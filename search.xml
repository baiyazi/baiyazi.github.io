<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android插件化开发指南 | 2.15 实现一个音乐播放器APP</title>
      <link href="/2021/11/android-plugin-dev-03/"/>
      <url>/2021/11/android-plugin-dev-03/</url>
      
        <content type="html"><![CDATA[<p>欢迎访问：<a href="https://blog.csdn.net/qq_26460841/article/details/121220878" target="_blank" rel="noopener">Android插件化开发指南——实践之ViewPager+Fragment优化（预加载和懒加载）</a></p><p>@[toc]</p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p><code>ViewPager</code>+<code>Fragment</code>的组合比较适合用来做页面的导航，这里因为在<code>Android</code>插件化开发指南——实践之仿酷狗音乐首页一文的实践中需要用来这块的知识。为了<code>app</code>加载更加流畅，这里考虑使用预加载和懒加载两种机制。当然，这里对于<code>ViewPager</code>+<code>Fragment</code>的简单实现，这里记录下：<br>首先定义好<code>ViewPager</code>控件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.viewpager.widget.ViewPager</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/fx_viewpager<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>然后定义好需要显示的三个子项的布局文件：<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/c7e01232841049fdbb7ed5443d818e28.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/c7e01232841049fdbb7ed5443d818e28.png#pic_center</a> =250x)<br>然后定义一个<code>ViewPager</code>控件的适配器：</p><pre class=" language-clike"><code class="language-clike">public class <span class="token class-name">PageViewPagerAdapter</span><span class="token operator">&lt;</span>T extends <span class="token class-name">View</span><span class="token operator">></span> extends <span class="token class-name">PagerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外部传入的ViewPager对应的Item对象</span>    private List<span class="token operator">&lt;</span>T<span class="token operator">></span> mList<span class="token punctuation">;</span>    public <span class="token function">PageViewPagerAdapter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>T<span class="token operator">></span> mList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this<span class="token punctuation">.</span>mList <span class="token operator">=</span> mList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public int <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> this<span class="token punctuation">.</span>mList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public boolean <span class="token function">isViewFromObject</span><span class="token punctuation">(</span>@NonNull View view<span class="token punctuation">,</span> @NonNull Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> object <span class="token operator">==</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @NonNull    @Override    public Object <span class="token function">instantiateItem</span><span class="token punctuation">(</span>@NonNull ViewGroup container<span class="token punctuation">,</span> int position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        container<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public void <span class="token function">destroyItem</span><span class="token punctuation">(</span>@NonNull ViewGroup container<span class="token punctuation">,</span> int position<span class="token punctuation">,</span> @NonNull Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        container<span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后只需要在<code>Fragment</code>中完成初始化<code>item</code>到<code>View</code>实例，并设置<code>adapter</code>，最后设置<code>OnPageChangeListener</code>监听即可。这里我的效果为：<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/fe2e0c90c7b34d17a953bf4010202d19.gif#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/fe2e0c90c7b34d17a953bf4010202d19.gif#pic_center</a> =250x)</p><h1 id="2-ViewPager-Fragment优化"><a href="#2-ViewPager-Fragment优化" class="headerlink" title="2. ViewPager+Fragment优化"></a>2. ViewPager+Fragment优化</h1><p>预加载和懒加载。<code>ViewPager</code>控件有个特有的预加载机制，即默认情况下当前页面左右两侧的<code>1</code>个页面会被加载，以方便用户滑动切换到相邻的界面时，可以更加顺畅的显示出来。这样就会导致本来加载一个页面，其实在背后会预先加载三个页面，也就是会导致内存消耗比较严重。如果页面的数据也很大的时候，可能存在极端的情况，即将内存撑爆，也就是<code>OOM</code>问题。</p><p>所以在内存消耗比较低的场景中，可以使用预加载技术来提高响应时间，进而带来比较丝滑的滑动效果。在内存消耗比较高的场景中，对应的需要使用懒加载技术，来延迟资源的加载。懒加载对服务器端和客户端内存有一定的缓解压力作用，预加载则会增加服务器和和客户端压力。</p><h2 id="2-1-预加载"><a href="#2-1-预加载" class="headerlink" title="2.1 预加载"></a>2.1 预加载</h2><p>在<code>ViewPager</code>中，可以通过<code>setOffscreenPageLimit(int limit)</code>来设置预加载页面数量，当前页面相邻的<code>limit</code>个页面会被预加载进内存。不妨来看看源码：</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// ViewPager.java</span>private static final int DEFAULT_OFFSCREEN_PAGES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>private int mOffscreenPageLimit <span class="token operator">=</span> DEFAULT_OFFSCREEN_PAGES<span class="token punctuation">;</span>public void <span class="token function">setOffscreenPageLimit</span><span class="token punctuation">(</span>int limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>limit <span class="token operator">&lt;</span> DEFAULT_OFFSCREEN_PAGES<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果小于1</span>        limit <span class="token operator">=</span> DEFAULT_OFFSCREEN_PAGES<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接设置为1</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>limit <span class="token operator">!=</span> mOffscreenPageLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果大于1</span>        mOffscreenPageLimit <span class="token operator">=</span> limit<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置预加载页面数量为设置的limi</span>        <span class="token function">populate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 填充</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面的代码中可以看出，预加载无法按照预想的，将<code>limit</code>设置为<code>0</code>来取消预加载。所以我们需要考虑其余的方式来实现取消<code>ViewPager</code>+<code>Fragment</code>的预加载。在博客 <a href="https://blog.csdn.net/myatlantis/article/details/42643733" target="_blank" rel="noopener">ViewPager+Fragment取消预加载（延迟加载）</a>一文中给出了一个解决的思路。即：</p><p>通过判断<code>Fragment</code>对用于的可见性来实现，也就是在这个<code>Fragment</code>对用户可见了再进行数据的加载。而再<code>Fragment</code>中提供了两个方法，分别是：</p><pre class=" language-clike"><code class="language-clike">boolean <span class="token function">getUserVisibleHint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获得Fragment可见状态</span>void <span class="token function">setUserVisibleHint</span><span class="token punctuation">(</span>boolean isVisibleToUser<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置Fragment可见状态</span></code></pre><p>我们只需要复写这两个方法即可，就可以判断当前的<code>Fragment</code>是否可见，进而判断是否进行数据的加载。其实根据上面的分析，这里我们知道根本上这个<code>Fragment</code>还是会加载，只是我们将那些实际请求数据的操作放置在了之后，其实也就是懒加载。</p><p>也即是说，取消<code>Fragment</code>预加载的解决为使用懒加载。因为预加载从前面代码中我们知道，解决不了，且默认设置为<code>1</code>，也就是会预加载左右两个页面。</p><h2 id="2-2-懒加载"><a href="#2-2-懒加载" class="headerlink" title="2.2 懒加载"></a>2.2 懒加载</h2><p>比如定义如下一个懒加载的<code>Fragment</code>父类：</p><pre class=" language-clike"><code class="language-clike">public abstract class <span class="token class-name">LazyFragment</span> extends <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    private View rootView<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示当前View实例对象</span>    private boolean isViewCreated <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rootView是否创建</span>    private boolean isDatasLoaded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否加载过</span>    private boolean isCurrentVisible <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 是否可见</span>    @Nullable    @Override    public View <span class="token function">onCreateView</span><span class="token punctuation">(</span>@NonNull LayoutInflater inflater<span class="token punctuation">,</span> @Nullable ViewGroup container<span class="token punctuation">,</span> @Nullable Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rootView <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            rootView <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token function">getLayoutResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isViewCreated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// rootView创建完毕</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getUserVisibleHint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">setUserVisibleHint</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rootView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    protected View <span class="token function">getRootView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> rootView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public void <span class="token function">setUserVisibleHint</span><span class="token punctuation">(</span>boolean isVisibleToUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        super<span class="token punctuation">.</span><span class="token function">setUserVisibleHint</span><span class="token punctuation">(</span>isVisibleToUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isViewCreated<span class="token punctuation">)</span><span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"isCurrentVisible: "</span> <span class="token operator">+</span> isCurrentVisible <span class="token operator">+</span> <span class="token string">" | isVisibleToUser: "</span> <span class="token operator">+</span> isVisibleToUser <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isCurrentVisible <span class="token operator">&amp;&amp;</span> isVisibleToUser<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 加载数据</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isDatasLoaded<span class="token punctuation">)</span> <span class="token function">lazyLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isDatasLoaded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                isCurrentVisible <span class="token operator">=</span> isVisibleToUser<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>isCurrentVisible <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isVisibleToUser<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 停止加载数据</span>                <span class="token function">stopLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                isCurrentVisible <span class="token operator">=</span> isVisibleToUser<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 对子类提供一个查找元素的方法     */</span>    protected <span class="token operator">&lt;</span>T extends <span class="token class-name">View</span><span class="token operator">></span> T <span class="token function">findViewById</span><span class="token punctuation">(</span>int id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isViewCreated<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> rootView<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 由具体子类来实现这个方法，以实现返回当前页面的布局文件ID     */</span>    protected abstract int <span class="token function">getLayoutResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 提供两个方法，用来进行加载数据，或者停止加载数据     */</span>    protected abstract void <span class="token function">lazyLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    protected void <span class="token function">stopLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后将原本传入<code>ViewPager</code>的直接通过<code>LayoutInflater</code>实例化的<code>View</code>对象换成<code>Fragment</code>对象。同时，将适配器修改为继承自<code>FragmentPagerAdapter</code>的类：</p><pre class=" language-clike"><code class="language-clike">public class <span class="token class-name">PageViewPagerAdapter</span><span class="token operator">&lt;</span>T extends <span class="token class-name">Fragment</span><span class="token operator">></span> extends <span class="token class-name">FragmentPagerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外部传入的ViewPager对应的Item对象</span>    private List<span class="token operator">&lt;</span>T<span class="token operator">></span> mList<span class="token punctuation">;</span>    public <span class="token function">PageViewPagerAdapter</span><span class="token punctuation">(</span>@NonNull FragmentManager fm<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> mList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">super</span><span class="token punctuation">(</span>fm<span class="token punctuation">)</span><span class="token punctuation">;</span>        this<span class="token punctuation">.</span>mList <span class="token operator">=</span> mList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @NonNull    @Override    public Fragment <span class="token function">getItem</span><span class="token punctuation">(</span>int position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public int <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> this<span class="token punctuation">.</span>mList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后再创建<code>ViewPager</code>关联的三个页面的<code>Fragment</code>的时候，就需要继承自前面所定义的<code>LazyFragment</code>，比如在下面的示例中，我使用<code>Handler</code>发送一个延迟消息，来模拟数据的耗时加载：</p><pre class=" language-clike"><code class="language-clike">public class <span class="token class-name">FxPageMusicFragment</span> extends <span class="token class-name">LazyFragment</span> <span class="token punctuation">{</span>    private View rootView<span class="token punctuation">;</span>    @Nullable    @Override    public View <span class="token function">onCreateView</span><span class="token punctuation">(</span>@NonNull LayoutInflater inflater<span class="token punctuation">,</span> @Nullable ViewGroup container<span class="token punctuation">,</span> @Nullable Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        super<span class="token punctuation">.</span><span class="token function">onCreateView</span><span class="token punctuation">(</span>inflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        rootView <span class="token operator">=</span> <span class="token function">getRootView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">initViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rootView<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    private void <span class="token function">initViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// todo 初始化一些数据</span>    <span class="token punctuation">}</span>    @Override    protected int <span class="token function">getLayoutResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置布局文件-音乐</span>        <span class="token keyword">return</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>fx_viewpager_item_yy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    protected void <span class="token function">lazyLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"lazyLoadData: 音乐加载数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// todo 加载数据模拟</span>        Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            @Override            public void <span class="token function">handleMessage</span><span class="token punctuation">(</span>@NonNull Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                super<span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    Button button <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>yy_page_loading_button<span class="token punctuation">)</span><span class="token punctuation">;</span>                    button<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"数据加载完毕。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span>what <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        handler<span class="token punctuation">.</span><span class="token function">sendMessageDelayed</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    protected void <span class="token function">stopLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        super<span class="token punctuation">.</span><span class="token function">stopLoadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"TAG"</span><span class="token punctuation">,</span> <span class="token string">"lazyLoadData: 音乐停止加载数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后的效果为：<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/e16b5b7066674783a6b00c11865a1edd.gif#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/e16b5b7066674783a6b00c11865a1edd.gif#pic_center</a> =250x)<br>当然，对于<code>ViewPager</code>+<code>Fragment</code>优化的懒加载处理这块，我看的<code>bilibili</code>的视频：<a href="https://www.bilibili.com/video/BV1oa4y1J7qC?p=5" target="_blank" rel="noopener">懒加载方案源码解析之一</a>。</p><h1 id="3-后记"><a href="#3-后记" class="headerlink" title="3. 后记"></a>3. 后记</h1><p>对于<code>ViewPager</code>+<code>Fragment</code>优化的懒加载处理，主要参考了上面的那个视频。然后简单修改了一部分。从观看视频到依葫芦画瓢的这个过程，确实也说明了自己知识储备确实不够。还需要多加练习。</p><hr><p><strong>References</strong></p><ul><li><a href="https://www.jianshu.com/p/2eb190614870" target="_blank" rel="noopener">Android懒加载vs预加载——Viewpager+Fragment</a></li><li><a href="https://www.jianshu.com/p/7a47907f49c2" target="_blank" rel="noopener">ViewPager+Fragment组合的预加载和懒加载</a></li><li><a href="https://blog.csdn.net/myatlantis/article/details/42643733" target="_blank" rel="noopener">ViewPager+Fragment取消预加载（延迟加载）</a></li><li><a href="https://www.bilibili.com/video/BV1oa4y1J7qC?p=5" target="_blank" rel="noopener">【视频】懒加载方案源码解析之一</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android插件化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android插件化开发指南 | 2.15 实现一个音乐播放器APP</title>
      <link href="/2021/11/android-plugin-dev-02/"/>
      <url>/2021/11/android-plugin-dev-02/</url>
      
        <content type="html"><![CDATA[<p>欢迎访问：<a href="https://blog.csdn.net/qq_26460841/article/details/121061646" target="_blank" rel="noopener">Android插件化开发指南——实践之Activity转场效果（仿酷狗音乐启动页）</a></p><p>@[toc]</p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>在<a href="https://blog.csdn.net/qq_26460841/article/details/120992273" target="_blank" rel="noopener">Android插件化开发指南——2.15 实现一个音乐播放器APP</a>中介绍了音乐播放的基本知识，以及在最后提到了想仿一个音乐播放器，所以在接下来的日子里将继续仿造。刚刚结合<a href="https://blog.csdn.net/qq_26460841/article/details/121003811" target="_blank" rel="noopener">Android启动页白屏/黑屏问题解决</a>一文，简单实现了仿酷狗音乐的启动页面，具体效果如下：<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/29b5bbe069aa40119f5496316b7f94a2.gif#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/29b5bbe069aa40119f5496316b7f94a2.gif#pic_center</a> =200x)<br>但是退出的效果和酷狗的退出效果差别很大，比如下面我截取片段：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/8a67646aaa66485d9c38205f777a9e9b.gif#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/8a67646aaa66485d9c38205f777a9e9b.gif#pic_center</a> =200x)<br>可以发现明显的页面退出效果更加炫酷。所以在这篇的接下来的篇幅中，将一起来探寻下这个炫酷的效果是怎么实现的。百度了一下，发现了这篇博客写的挺好的：<a href="https://blog.csdn.net/huachao1001/article/details/51659963" target="_blank" rel="noopener">酷炫的Activity切换动画，打造更好的用户体验</a>。接下来就来学习下这个实现过程。</p><h1 id="2-Activity退出动画"><a href="#2-Activity退出动画" class="headerlink" title="2. Activity退出动画"></a>2. Activity退出动画</h1><p>在这篇博客：<a href="https://blog.csdn.net/huachao1001/article/details/51659963" target="_blank" rel="noopener">酷炫的Activity切换动画，打造更好的用户体验</a>中提到：</p><blockquote><p><code>Android 5.0 (API 21)</code>及更高版本系统内置了<code>Activity</code>之间的切换动画</p></blockquote><p>那么不妨去<a href="https://developer.android.google.cn/" target="_blank" rel="noopener">Android官网</a>看看是否存在相关说明，很容易找到了这篇文档：<a href="https://developer.android.google.cn/training/transitions/start-activity" target="_blank" rel="noopener">使用动画启动 Activity</a>，接下来就来看看这篇文档。</p><p>对于使用使用动画启动 <code>Activity</code>，一共提供了<strong>三种过渡</strong>，进入和退出过渡，以及 <code>Activity</code> 之间共享元素的过渡指定自定义动画。</p><ul><li><strong>进入</strong>过渡决定了 <code>Activity</code> 中的视图如何进入场景。例如，在“爆炸式”进入过渡中，视图从外场进入场景，飞向屏幕中心。</li><li><strong>退出</strong>过渡决定了 <code>Activity</code> 中的视图如何退出场景。例如，在“爆炸式”退出过渡中，视图从屏幕中心离开场景。</li><li><strong>共享元素</strong>过渡决定了两个 <code>Activity</code> 共享的视图如何在这些 <code>Activity</code> 之间过渡。例如，如果两个 <code>Activity</code> 使用相同的图片（但位置和大小不同），<code>changeImageTransform</code> 共享元素过渡就会在这些 <code>Activity</code> 之间流畅地平移和缩放该图片</li></ul><p>结合自己当前的需求，很容易知道自己所需要的为：<code>Activity</code> 视图从屏幕中心退出的场景。而在<code>Android</code> 支持以下进入和退出过渡：</p><ul><li><strong>爆炸式（Explode）</strong> - 将视图移入场景中心或从中移出。</li><li><strong>滑动式（Slide）</strong> - 将视图从场景的其中一个边缘移入或移出。</li><li><strong>淡入淡出式（Fade）</strong> - 通过更改视图的不透明度，在场景中添加视图或从中移除视图。</li></ul><p>故而最终所需要的效果应该是：<strong>淡入淡出式从从屏幕中心移除视图</strong>。至于其余的动画，可以参考博客<a href="https://blog.csdn.net/huachao1001/article/details/51659963" target="_blank" rel="noopener">酷炫的Activity切换动画，打造更好的用户体验</a>或者官方文档之 <a href="https://developer.android.google.cn/training/transitions/start-activity" target="_blank" rel="noopener">使用动画启动 Activity</a>，这里不再介绍。</p><h2 id="2-1-简单使用"><a href="#2-1-简单使用" class="headerlink" title="2.1 简单使用"></a>2.1 简单使用</h2><p>为了可以使用窗口过渡特效，所以首先需要启动可用，即在主题配置文件中，加上：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- enable window content transitions --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:windowActivityTransitions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span></code></pre><p>我这里定义在<code>themes.xml</code>文件中，比如：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WelcomeThemeBefore<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.AppCompat.NoActionBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- enable window content transitions --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:windowActivityTransitions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--设置背景颜色--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:windowBackground<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/full_screen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--设置没有ActionBar--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:windowNoTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--设置顶部状态栏颜色--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:statusBarColor<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">tools:</span>targetApi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>@color/full_screen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 状态栏字体设置为深色 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android:windowLightStatusBar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>当然，也可以使用代码的方式来启动支持过渡，比如：</p><pre class=" language-java"><code class="language-java"><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">requestFeature</span><span class="token punctuation">(</span>Window<span class="token punctuation">.</span>FEATURE_CONTENT_TRANSITIONS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>任意选择一种即可。这里我选择<code>xml</code>文件配置的方式。</p><p>因为我们需要在第一个页面的退出过渡，所以需要为这个<code>Activity</code>指定退出的过渡，当使用<code>startActivity</code>的时候进行指定启动另一个<code>Activity</code>的时候，会激活配置的过渡。在<code>Activity</code>指定退出的过渡代码为：</p><pre class=" language-java"><code class="language-java"><span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExitTransition</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Explode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同理也可以指定进入的过渡：</p><pre class=" language-java"><code class="language-java"> <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEnterTransition</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Explode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但是其实很不幸，并没有生效。因为需要设置效果为：在所要跳转的<code>Activity</code>页面（即目标<code>Activity</code>）中设置该<code>Activity</code>的进出场动画。而不是为当前<code>WelcomeActivity</code>设置。比如我们在目标<code>MainActivity</code>设置为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setEnterTransition</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Explode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDuration</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在<code>WelcomeActivity</code>中进行启动：</p><pre class=" language-java"><code class="language-java">Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> ActivityOptions<span class="token punctuation">.</span><span class="token function">makeSceneTransitionAnimation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>就可以看到<code>MainActivity</code>的启动效果：<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/5f431ebda0c147b9b3a3931fc79f18b1.gif#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/5f431ebda0c147b9b3a3931fc79f18b1.gif#pic_center</a> =200x)<br>但这确实不是这里所需要的，所以需要另一种<strong>转场效果</strong>。</p><h2 id="2-2-overridePendingTransition"><a href="#2-2-overridePendingTransition" class="headerlink" title="2.2 overridePendingTransition"></a>2.2 overridePendingTransition</h2><p>在<code>5.0</code>之前如果我们想要在启动<code>Activity</code>有特效，就需要使用<code>overridePendingTransition</code>方法来指定入场和出场的两个补间动画。所以这里可以采用这种方式来试试。因为这里只需要出场动画，所以这里定义一个<code>/anim/out.xml</code>文件，其内容为：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scale</span>        <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromXScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromYScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>pivotX</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%p<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>pivotY</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50%p<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toXScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toYScale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0.5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alpha</span>        <span class="token attr-name"><span class="token namespace">android:</span>duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fromAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1.0<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>toAlpha</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span></code></pre><p>然后在<code>startActivity</code>之后，调用<code>overridePendingTransition</code>方法来指定动画文件即可，即：</p><pre class=" language-java"><code class="language-java">Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>intent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> MainActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">overridePendingTransition</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>anim<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果为：<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/ff59f05b0d9d4955aeebc623977d3aca.gif#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/ff59f05b0d9d4955aeebc623977d3aca.gif#pic_center</a> =200x)</p><p>上面这种方式来自博客： <a href="https://developer.android.google.cn/training/transitions/start-activity" target="_blank" rel="noopener">使用动画启动 Activity</a>，感兴趣可以阅读原文。</p><h1 id="3-后记"><a href="#3-后记" class="headerlink" title="3. 后记"></a>3. 后记</h1><p>完整代码地址：<a href="https://github.com/baiyazi/MusicApp/tree/main/mymusicdemo-01" target="_blank" rel="noopener">https://github.com/baiyazi/MusicApp</a></p><hr><p><strong>References</strong></p><ul><li><a href="https://blog.csdn.net/qq_26460841/article/details/119841956" target="_blank" rel="noopener">用IdleHandler来做闲时等待</a></li><li><a href="https://blog.csdn.net/qq_26460841/article/details/121003811" target="_blank" rel="noopener">Android启动页白屏/黑屏问题解决</a></li><li><a href="https://blog.csdn.net/qq_26460841/article/details/120992273" target="_blank" rel="noopener">Android插件化开发指南——2.15 实现一个音乐播放器APP</a></li><li><a href="https://blog.csdn.net/huachao1001/article/details/51659963" target="_blank" rel="noopener">酷炫的Activity切换动画，打造更好的用户体验</a></li><li><a href="https://developer.android.google.cn/training/transitions/start-activity" target="_blank" rel="noopener">使用动画启动 Activity</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android插件化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android插件化开发指南 | 2.15 实现一个音乐播放器APP</title>
      <link href="/2021/11/android-plugin-dev-01/"/>
      <url>/2021/11/android-plugin-dev-01/</url>
      
        <content type="html"><![CDATA[<p>欢迎访问：<a href="https://blog.csdn.net/qq_26460841/article/details/120992273" target="_blank" rel="noopener">Android插件化开发指南——2.15 实现一个音乐播放器APP</a></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>最近对<code>Android</code>插件化开发比较感兴趣，也读了部分《<code>Android</code>插件化开发指南》这本书。在该书中<code>1.4</code>部分介绍了这么一句话：</p><blockquote><p>我们曾天真地认为，Android插件化是为了增加新的功能，或者增加一个完整的模块。费了不少时间和精力，等项目实施了插件化后，我们才发现，<strong>插件化80%的使用场景，是为了修复线上bug</strong>。</p></blockquote><p>我现在也粗浅的认为插件化是为了新增新的功能，至于修复线上<code>bug</code>这部分，确实还没有接触到或者说了解。希望后续自己能了解更多。</p><p>对于《<code>Android</code>插件化开发指南》这本书，我决定将其消化吸收了再整理博客笔记，因为确实写的比较好，有很多地方值得学习和借鉴。在这篇博客中，就简单的将书中<code>2.15</code>的例子展示出来，看看值得学习的点。</p><h1 id="2-实现一个音乐播放器APP"><a href="#2-实现一个音乐播放器APP" class="headerlink" title="2. 实现一个音乐播放器APP"></a>2. 实现一个音乐播放器APP</h1><p>代码作者包老师也给出了源码地址，分别是：</p><ul><li><a href="https://github.com/BaoBaoJianqiang/ReceiverTestBetweenActivityAndService1" target="_blank" rel="noopener">ReceiverTestBetweenActivityAndService1</a>；</li><li><a href="https://github.com/BaoBaoJianqiang/ReceiverTestBetweenActivityAndService2" target="_blank" rel="noopener">ReceiverTestBetweenActivityAndService2</a>；</li></ul><p>感兴趣的可以直接看作者提供的源码。</p><h2 id="2-1-设计思路一（一个Service和两个BroadcastReceiver）"><a href="#2-1-设计思路一（一个Service和两个BroadcastReceiver）" class="headerlink" title="2.1 设计思路一（一个Service和两个BroadcastReceiver）"></a>2.1 设计思路一（一个Service和两个BroadcastReceiver）</h2><ul><li>音乐前台使用一个<code>Activity</code>来展示歌曲信息；</li><li>音乐后台播放，一般使用<code>Service</code>来实现；</li><li>用户交互至少需要提供开始和暂停按钮，无论点击那个按钮都是通知后台<code>Service</code>播放或者停止音乐；</li><li>当前音乐播放完毕，自动切换到下一首的时候，需要通知前台<code>Activity</code>；</li></ul><p>所以这个案例中至少需要一个<code>Service</code>和两个<code>BroadcastReceiver</code>。</p><p>首先是在<code>MainActivity</code>中简单定义两个按钮，并为这两个按钮提供发送广播（发送广播到<code>Service</code>）的方法。</p><pre class=" language-clike"><code class="language-clike">btnPlay<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    @Override    public void <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//send message to receiver in Service</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"UpdateService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 传入Action</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"command"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btnStop<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    @Override    public void <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//send message to receiver in Service</span>        Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"UpdateService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 传入Action</span>        intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"command"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同时还需要提供一个<code>BroadcastReceiver</code>用来接受从<code>Service</code>发来的播放结束的广播消息。</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// 用来接受Service发来的消息</span>public class <span class="token class-name">Receiver1</span> extends <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    @Override    public void <span class="token function">onReceive</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        status <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int current <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tvTitle<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>MyMusics<span class="token punctuation">.</span>musics<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>            tvAuthor<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>MyMusics<span class="token punctuation">.</span>musics<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>            case <span class="token number">0x11</span><span class="token punctuation">:</span>                btnPlay<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>play<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            case <span class="token number">0x12</span><span class="token punctuation">:</span>                btnPlay<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>pause<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            case <span class="token number">0x13</span><span class="token punctuation">:</span>                btnPlay<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>play<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            default<span class="token punctuation">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>同时还需要在<code>onCreate</code>方法后面完成对上面<code>Receiver1</code>的注册：</p><pre class=" language-clike"><code class="language-clike">receiver1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Receiver1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IntentFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"UpdateActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以收到action=UpdateActivity</span><span class="token function">registerReceiver</span><span class="token punctuation">(</span>receiver1<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为在播放按钮中我们并没有启动后台<code>Service</code>，所以还需要在<code>onCreate</code>的后面完成：</p><pre class=" language-clike"><code class="language-clike">Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> MyService<span class="token punctuation">.</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">startService</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于启动的<code>MyService</code>服务，播放完毕后需要发送广播到<code>Activity</code>：</p><pre class=" language-clike"><code class="language-clike">mPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mPlayer<span class="token punctuation">.</span><span class="token function">setOnCompletionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnCompletionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    @Override    public void <span class="token function">onCompletion</span><span class="token punctuation">(</span>MediaPlayer mp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        current<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">prepareAndPlay</span><span class="token punctuation">(</span>MyMusics<span class="token punctuation">.</span>musics<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//send message to receiver in Activity</span>        Intent sendIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"UpdateActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sendIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sendIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendBroadcast</span><span class="token punctuation">(</span>sendIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了接收从<code>Activity</code>中传入的信号（播放或者暂停），这里定义一个接收器：</p><pre class=" language-clike"><code class="language-clike">public class <span class="token class-name">Receiver2</span> extends <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    @Override    public void <span class="token function">onReceive</span><span class="token punctuation">(</span>final Context context<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int command <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getIntExtra</span><span class="token punctuation">(</span><span class="token string">"command"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>            case <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">0x11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">prepareAndPlay</span><span class="token punctuation">(</span>MyMusics<span class="token punctuation">.</span>musics<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    status <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">0x12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mPlayer<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    status <span class="token operator">=</span> <span class="token number">0x13</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">0x13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mPlayer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    status <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            case <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">0x12</span> <span class="token operator">||</span> status <span class="token operator">==</span> <span class="token number">0x13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mPlayer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    status <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//send message to receiver in Activity</span>        Intent sendIntent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token string">"UpdateActivity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sendIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>        sendIntent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sendBroadcast</span><span class="token punctuation">(</span>sendIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>让媒体播放器执行相应的方法，并把状态更新，传递到<code>Activity</code>。</p><p>当然这个<code>Receiver2</code>也需要在这个<code>MyService</code>中注册，为：</p><pre class=" language-clike"><code class="language-clike">receiver2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Receiver2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IntentFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"UpdateService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerReceiver</span><span class="token punctuation">(</span>receiver2<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-2-设计思路二（一个Service和一个BroadcastReceiver）"><a href="#2-2-设计思路二（一个Service和一个BroadcastReceiver）" class="headerlink" title="2.2 设计思路二（一个Service和一个BroadcastReceiver）"></a>2.2 设计思路二（一个Service和一个BroadcastReceiver）</h2><p>上面的逻辑比较清晰，就是<code>A（Activity）</code>，<code>B（Service）</code>两个组件直接各自注册一个用来接收对方广播的接收器，然后收到消息后进行对应的逻辑处理。上面的流程可以简化为如下的图：<br><img src="https://img-blog.csdnimg.cn/b7320c1124ce449191e901d30404fd95.png" alt="在这里插入图片描述"></p><p>其实，很多音乐播放器只有一个<code>Receiver</code>，这是怎么实现的呢？</p><p>因为从上图可以看出，<code>MyActivity</code>和<code>MyService</code>的代码耦合度比较高，在学习设计模式中我们知道，为了解耦我们通常需要面向接口编程，而不是具体的实现。所以在《<code>Android</code>插件化开发指南》一书中作者使用了接口来进行解耦，从而替代从<code>Activity</code>向<code>Service</code>中发送广播的过程。如下图所示：<img src="https://img-blog.csdnimg.cn/e7c41cd629f049e7abc45d5962b67292.png" alt="在这里插入图片描述"><br>首先定义好接口：</p><pre class=" language-clike"><code class="language-clike">public interface <span class="token class-name">IServiceInterface</span> <span class="token punctuation">{</span>    public void <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public void <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在<code>Activity</code>中定义一个<code>IServiceInterface</code>的实例：</p><pre class=" language-clike"><code class="language-clike">IServiceInterface myService <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>ServiceConnection mConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    public void <span class="token function">onServiceConnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">,</span> IBinder binder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        myService <span class="token operator">=</span> <span class="token punctuation">(</span>IServiceInterface<span class="token punctuation">)</span> binder<span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"onServiceConnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span>ComponentName name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"onServiceDisconnected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这里使用<code>onBind</code>方式，因为在<code>ServiceConnection</code>回调中可以得到一个<code>IBinder</code>对象，而这个对象是在<code>Service</code>的<code>onBind</code>中返回的，所以我们可以返回一个实现了<code>IServiceInterface</code>接口的<code>IBinder</code>对象，那么就可以得到接口的实现。在<code>Activity</code>中对应的将按钮的响应事件定义为：</p><pre class=" language-clike"><code class="language-clike">btnPlay<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    @Override    public void <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        myService<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btnStop<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    @Override    public void <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        myService<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当然在<code>Activity</code>中对应的定义广播接收器不变，一样需要注册这个广播接收器，并在最后启动定义的<code>MyService</code>服务。和前面的保持一致，这里就不再给出。</p><p>对于<code>MyService</code>这个类，才是本次的重点，因为在这个类中需要提供在<code>onBind</code>之后的返回对象，而我们需要让这个对象是接口的实例，故而定义如下：</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// MyService类的内部类</span>private class <span class="token class-name">MyBinder</span> extends <span class="token class-name">Binder</span> implements <span class="token class-name">IServiceInterface</span> <span class="token punctuation">{</span>    @Override    public void <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">0x11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">prepareAndPlay</span><span class="token punctuation">(</span>MyMusics<span class="token punctuation">.</span>musics<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">0x12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mPlayer<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> <span class="token number">0x13</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">0x13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mPlayer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sendMessageToActivity</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public void <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> <span class="token number">0x12</span> <span class="token operator">||</span> status <span class="token operator">==</span> <span class="token number">0x13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mPlayer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            status <span class="token operator">=</span> <span class="token number">0x11</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">sendMessageToActivity</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其余的和前面的保持一致，也就是在播放完毕后发送广播通知<code>Activity</code>。</p><h1 id="3-仿一个音乐播放器"><a href="#3-仿一个音乐播放器" class="headerlink" title="3.仿一个音乐播放器"></a>3.仿一个音乐播放器</h1><p>从上面的两个案例中，感觉确实案例二更加优美。所以接下来继续尝试在这个案例剖析的基础上进行拓展。决定以酷狗音乐为例，来进行仿写试试。当然，写的过程将持续记录到这篇博客中。</p><p><a href="https://blog.csdn.net/qq_26460841/article/details/121003811" target="_blank" rel="noopener">Android启动页白屏/黑屏问题解决</a>；<br><a href="https://blog.csdn.net/qq_26460841/article/details/121061646" target="_blank" rel="noopener">仿酷狗音乐启动页——Activity转场效果</a></p><hr><p><strong>Thanks</strong></p><ul><li>《Android插件化开发指南》</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android插件化开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reactk开发 | 核心概念</title>
      <link href="/2021/11/react-01/"/>
      <url>/2021/11/react-01/</url>
      
        <content type="html"><![CDATA[<p>欢迎访问：<a href="https://blog.csdn.net/qq_26460841/article/details/121046948" target="_blank" rel="noopener">【React Native】从React开始——核心概念</a></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>&ensp;&ensp;&ensp;&ensp;在上一篇<a href="https://blog.csdn.net/qq_26460841/article/details/121034480" target="_blank" rel="noopener">【React Native】回归跨平台开发——细细碎碎念念</a>中大致介绍了如何搭建环境的问题。在接下来的日子里将来学习下<code>React</code>这个框架。为什么呢？因为在<code>React Native</code>的官网的第一句话就是：</p><blockquote><p><strong>使用 <code>React</code> 来创建 <code>Android</code> 和 <code>iOS</code> 的原生应用</strong></p></blockquote><p>不妨看看昨天的项目目录：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/7237e14c8e6b4319908b8c7f76199c1c.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/7237e14c8e6b4319908b8c7f76199c1c.png#pic_center</a> =700x)<br>可以发现这里有<code>android</code>和<code>ios</code>两个目录，这两个目录均是<code>RN</code>自动生成的，代码目录见下图：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/27f14fb344e84ecbbdc07cafadeff430.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/27f14fb344e84ecbbdc07cafadeff430.png#pic_center</a> =600x)<br>可以发现其实就是原生开发的目录结构，打开<code>MainActivity.java</code>文件：</p><pre class=" language-clike"><code class="language-clike">package com<span class="token punctuation">.</span>awesomeproject<span class="token punctuation">;</span>import com<span class="token punctuation">.</span>facebook<span class="token punctuation">.</span>react<span class="token punctuation">.</span>ReactActivity<span class="token punctuation">;</span>public class <span class="token class-name">MainActivity</span> extends <span class="token class-name">ReactActivity</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * Returns the name of the main component registered from JavaScript. This is used to schedule   * rendering of the component.   */</span>  @Override  protected String <span class="token function">getMainComponentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"AwesomeProject"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实发现这里的写法就和原生的略有不同，猜测应该事<code>FaceBook</code>对<code>ReactActivity</code>进行了再次封装，以更方便的支持他提供的各种组件。</p><p>究竟事如何生成的这个原生代码部分，确实比较有意思。因为不光有<code>Android</code>的，还生成了<code>ios</code>的代码。当然更加有意思的是：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/bc03d28bb3384a2889043f628df52068.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/bc03d28bb3384a2889043f628df52068.png#pic_center</a> =500x)<br>也就是说其实可以做到混合开发，无缝集成。</p><p>所以还是有必要好好学习<code>RN</code>，因为之前没有学过<code>React</code>，所以接下来就好好学习一下这个框架以及复习下<code>JavaScript</code>。无意间看到了这句话，感觉比较搞笑，但也说明了<code>React</code>其重要的地位：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/602b8f829f0448cab1221a8b9e57ef8b.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/602b8f829f0448cab1221a8b9e57ef8b.png#pic_center</a> =500x)</p><h1 id="2-React"><a href="#2-React" class="headerlink" title="2. React"></a>2. React</h1><p>首先找到其<a href="https://react.docschina.org/" target="_blank" rel="noopener">官方文档</a>，我们知道<code>React</code>它是一个用于构建用户界面的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="noopener">JavaScript</a> 库，由<code>Facebook</code>于<code>2013</code>年<code>5</code>月开源。<code>React</code>主要用于构建<code>UI</code>，和<code>Vue</code>有些类似。下面正式进入正题。</p><p>开始一个 <code>React</code> 应用，可选择两种方式：</p><ul><li>通过 <code>HTML</code> 的 <code>script</code> 标签引入 <code>React</code> ，具体可参考：<a href="https://react.docschina.org/docs/add-react-to-a-website.html" target="_blank" rel="noopener">在网站中添加 React</a>；</li><li>搭建本地开发环境；</li></ul><p>因为第一种方式比较简单，直接参考官方文档即可，这里记录下第二种方式。首先需要确保安装了<code>Node.js</code>，需要确保 <code>Node &gt;= 14.0.0</code> 和 <code>npm &gt;= 5.6</code>。这里还是检查下：</p><p><img src="https://img-blog.csdnimg.cn/edd999a35cdd4c9ba4d8ba514611f579.png#pic_center" alt="在这里插入图片描述"></p><p>这里我需要更新一下<code>node</code>的版本。<a href="https://nodejs.org/en/" target="_blank" rel="noopener">下载最新版</a>安装即可。</p><p>然后执行：</p><pre class=" language-clike"><code class="language-clike">npx create<span class="token operator">-</span>react<span class="token operator">-</span>app my<span class="token operator">-</span>app</code></pre><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/50a2861d16d04f63a012cc32ecd9c1b9.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/50a2861d16d04f63a012cc32ecd9c1b9.png#pic_center</a> =600x)</p><p>按照创建完毕后的提示：</p><pre class=" language-clike"><code class="language-clike">yarn start # 启动服务yarn build # 编译为静态文件yarn test # 运行测试</code></pre><p>那么这里直接运行下，即：</p><pre class=" language-clike"><code class="language-clike">cd my<span class="token operator">-</span>appyarn start</code></pre><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/d6a340f16ea945ae80bf2be664c2c230.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/d6a340f16ea945ae80bf2be664c2c230.png#pic_center</a> =500x)<br>按照提示浏览器访问：<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a>，即可看见一个<code>React</code>的图标效果。</p><h2 id="2-1-编辑器配置语法高亮"><a href="#2-1-编辑器配置语法高亮" class="headerlink" title="2.1 编辑器配置语法高亮"></a>2.1 编辑器配置语法高亮</h2><p>推荐参照<a href="https://babeljs.io/docs/editors/" target="_blank" rel="noopener">这篇教程</a>来给你的编辑器配置语法高亮。</p><p>因为<code>Webstorm</code>只提供<code>30</code>天白嫖，所以以后还是使用<code>Visual Studio</code>来进行代码编写。所以按照文档说明，这里安装下 <code>vscode-language-babel</code> 这个插件。即：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/86b9a5144f7547f3aa111eef9c76b792.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/86b9a5144f7547f3aa111eef9c76b792.png#pic_center</a> =400x)</p><p>然后搜索 <code>vscode-language-babel</code> 这个插件安装即可。</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/cd5420f950964b84b9cf28f416fdd0ea.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/cd5420f950964b84b9cf28f416fdd0ea.png#pic_center</a> =700x)</p><h2 id="2-2-Hello-World"><a href="#2-2-Hello-World" class="headerlink" title="2.2 Hello World!"></a>2.2 Hello World!</h2><p>不妨看下这个项目的文件结构：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/8ab587c0c26c43efa5e0036dbbad00e1.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/8ab587c0c26c43efa5e0036dbbad00e1.png#pic_center</a> =700x)</p><p>其实和之前的<code>hexo</code>有些类似，<code>public</code>为生成的<code>html</code>页面，<code>node_modules</code>为<code>nodejs</code>的一些依赖文件，而真正的写代码的地方在<code>src</code>目录中。</p><p>不妨删除src目录下的其余文件，仅留下<code>index.js</code>和<code>index.css</code>文件，然后将<code>index.js</code>文件内容修改为一个正经的<code>Hello World!</code>，如下：</p><pre class=" language-clike"><code class="language-clike">import React from <span class="token string">'react'</span>import ReactDOM from <span class="token string">'react-dom'</span>import <span class="token string">'./index.css'</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">,</span>   document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/9376fdfb70ad4ba095770addd1cf4126.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/9376fdfb70ad4ba095770addd1cf4126.png#pic_center</a> =400x)</p><h2 id="2-3-取消VSCode的自动代码折叠"><a href="#2-3-取消VSCode的自动代码折叠" class="headerlink" title="2.3 取消VSCode的自动代码折叠"></a>2.3 取消VSCode的自动代码折叠</h2><p>但是<code>VSCode</code>的<code>ctrl+s</code>后自动代码折叠可是够麻烦的，所以这里取消一下：<br><img src="https://img-blog.csdnimg.cn/f183b360f13d4d5680c7cc0b9f7d95bc.png#pic_center" alt="在这里插入图片描述"></p><h2 id="2-4-语法和使用"><a href="#2-4-语法和使用" class="headerlink" title="2.4 语法和使用"></a>2.4 语法和使用</h2><h3 id="2-4-1-元素渲染"><a href="#2-4-1-元素渲染" class="headerlink" title="2.4.1 元素渲染"></a>2.4.1 元素渲染</h3><p>在之前的案例中代码如下：</p><pre class=" language-clike"><code class="language-clike">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">,</span>   document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>我们看到了<a href="https://react.docschina.org/docs/react-dom.html#render" target="_blank" rel="noopener">ReactDOM.render()</a>函数进行渲染，其中传入了两个参数，分别是待渲染元素和<code>DOM</code>根。在<code>React</code>中，更新 <code>UI</code> 唯一的方式是创建一个全新的元素，并将其传入 <code>ReactDOM.render()</code>进行渲染。所以在需要更新的地方都需要使用这个函数，比如下面的案例：</p><pre class=" language-clike"><code class="language-clike">let number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  number <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Number is <span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">,</span>     document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/856a8bfadbde4256839f788cb5189e02.png#pic_center" alt="在这里插入图片描述"><br>并会每一秒钟进行自加<code>1</code>。当然也可以参考官方提供的这个例子：<a href="https://codepen.io/pen?&editors=0010" target="_blank" rel="noopener">一个计时器的例子</a></p><h3 id="2-4-2-组件"><a href="#2-4-2-组件" class="headerlink" title="2.4.2 组件"></a>2.4.2 组件</h3><p>在开发微信小程序的时候，为了少写一些代码通常都需要封装一些组件，以提高代码的复用。在<code>React</code>中也提供 组件的封装，首先从函数组件开始。</p><h4 id="2-4-2-1-函数组件"><a href="#2-4-2-1-函数组件" class="headerlink" title="2.4.2.1 函数组件"></a>2.4.2.1 函数组件</h4><p>即编写<code>JavaScript</code> 函数，有两种形式，分别是：</p><pre class=" language-clike"><code class="language-clike"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>和</p><pre class=" language-clike"><code class="language-clike">class <span class="token class-name">Welcome</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述两个组件在 <code>React</code> 里是等效的。</p><h4 id="2-4-2-2-渲染组件"><a href="#2-4-2-2-渲染组件" class="headerlink" title="2.4.2.2 渲染组件"></a>2.4.2.2 渲染组件</h4><p>在前面的案例中，其实也写过这个部分，其实也就是使用 <code>ReactDOM.render()</code>进行渲染。比如：</p><pre class=" language-clike"><code class="language-clike"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span>const element <span class="token operator">=</span> <span class="token operator">&lt;</span>Welcome name<span class="token operator">=</span><span class="token string">"Sara"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  element<span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果为：<br><img src="https://img-blog.csdnimg.cn/09f6e4f01a0747a0ac94fbf5814a8806.png" alt="在这里插入图片描述"><br>因为首先定义了一个函数组件<code>&lt;Welcome&gt;</code>，而其属性都会传入<code>props</code>这个对象中，所以最终显示结果为上图所示。</p><p><strong>注意： 组件名称必须以大写字母开头。</strong><br><strong><code>React</code> 会将以小写字母开头的组件视为原生 <code>DOM</code> 标签。</strong></p><h3 id="2-4-3-生命周期"><a href="#2-4-3-生命周期" class="headerlink" title="2.4.3 生命周期"></a>2.4.3 生命周期</h3><p>为了使用生命周期方法，我们需要使用函数组件的第二种形式，即创建一个同名的 <code>ES6 class</code>，并且继承于 <code>React.Component</code>，函数主体写在<code>render()</code>方法中。和Java等面向对象语言类似，也有构造方法<code>constructor</code>，可以用来接收参数<code>props</code>。</p><p>为了使在元素渲染部分的案例的计数器更加像一个正规的组件，我们假定最终的调用为：</p><pre class=" language-clike"><code class="language-clike">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>CountNumber <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么我们就需要对之前的代码进行组件化。在这里引入两个生命周期方法，分别是挂载（<code>mount</code>）和卸载（<code>unmount</code>）。分别在组件第一次被渲染到 <code>DOM</code> 中的时候和被删除的时候执行。</p><pre class=" language-clike"><code class="language-clike">class <span class="token class-name">CountNumber</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>data<span class="token punctuation">:</span> props<span class="token punctuation">.</span>number<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    this<span class="token punctuation">.</span>timerId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> this<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    var _number <span class="token operator">=</span> this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    this<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      data<span class="token punctuation">:</span> _number <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Number is <span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>CountNumber number<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果和前面的一样，也就是自动累加更新。</p><p>注意到上面更新数据的时候使用了<code>this.setState(obj)</code>方法，有点类似于微信小程序，提供的用来更新数据的方法。因为<code>this.props</code>是只读的，不支持修改。<code>state</code> 是默认的私有属性，并且完全受控于当前组件。所以如果数据需要更新（即修改），就需要将数据从<code>props</code>中拷贝到<code>state</code>中，进而使用 <code>this.setState()</code> 来时刻更新组件 <code>state</code>。</p><p><strong>需要注意的是</strong>：<strong>构造函数是唯一可以给 <code>this.state</code> 赋值的地方</strong>。且不能直接修改state，即下面的写法是错误的：</p><pre class=" language-clike"><code class="language-clike">this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>comment <span class="token operator">=</span> <span class="token string">'Hello'</span><span class="token punctuation">;</span></code></pre><p>应该是：</p><pre class=" language-clike"><code class="language-clike">this<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>comment<span class="token punctuation">:</span> <span class="token string">'Hello'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这让我想起了之前刚开发微信小程序的时候，也有这个问题，当时就错误的直接赋值修改了，导致其修改并没有生效。</p><p>当然，在进行更新的时候，也可以传入一个函数，比如：</p><pre class=" language-clike"><code class="language-clike">this<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>只要最终返回的值是一个键值对形式的即可。</p><h3 id="2-4-3-事件处理"><a href="#2-4-3-事件处理" class="headerlink" title="2.4.3 事件处理"></a>2.4.3 事件处理</h3><p>和<code>HTML</code>中类似，也支持<code>onClick</code>事件，只是写法上略有不同。同时在 <code>React</code> 中另一个不同点是你不能通过返回 <code>false</code> 的方式阻止默认行为。你必须显式的使用 <code>preventDefault</code> 。比如在下面的案例中，使用<code>a</code>标签，默认链接到百度，但是这里使用<code>preventDefault</code>来阻止默认行为：</p><pre class=" language-clike"><code class="language-clike">class <span class="token class-name">LinkButton</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>data<span class="token punctuation">:</span>props<span class="token punctuation">.</span>text<span class="token punctuation">,</span> _default<span class="token punctuation">:</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 为了在回调中使用 `this`，这个绑定是必不可少的</span>    this<span class="token punctuation">.</span>handleClick <span class="token operator">=</span> this<span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 阻止默认行为。</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>_default<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"button"</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> this<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>LinkButton text<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"百度搜索"</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>至于类样式文件定义在<code>index.css</code>中，和<code>html</code>中使用的一样，这里就不再给出。实际测试发现确实可以阻止了默认的跳转行为。</p><h3 id="2-4-4-列表"><a href="#2-4-4-列表" class="headerlink" title="2.4.4 列表"></a>2.4.4 列表</h3><pre class=" language-clike"><code class="language-clike"><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  const numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  const listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token punctuation">{</span>number<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>const numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>NumberList numbers<span class="token operator">=</span><span class="token punctuation">{</span>numbers<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其结果也就是：<br><img src="https://img-blog.csdnimg.cn/d471b24976bc42fbaa1803e0294af178.png" alt="在这里插入图片描述"><br>其中， <code>map()</code> 函数是<code>JavaScript</code>中提供的用来进行列表处理的一个函数，比如下面我们让数组中的每一项变双倍，从而得到一个新的列表，代码为：</p><pre class=" language-clike"><code class="language-clike">numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果为：<code>[2, 4, 6, 8, 10]</code></p><p>需要注意的是，对于创建的列表元素，对于每一项应该有个<code>key</code>字段进行标识。</p><h3 id="2-4-5-表单"><a href="#2-4-5-表单" class="headerlink" title="2.4.5 表单"></a>2.4.5 表单</h3><p>对于表单控件，其使用还是和<code>HTML</code>中的保持一致。比如下面封装一个登录页面的控件：</p><p><img src="https://img-blog.csdnimg.cn/98ad4bb152604caf833a128a0cf7dab0.png#pic_center" alt="在这里插入图片描述"></p><pre class=" language-clike"><code class="language-clike">class <span class="token class-name">LoginForm</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>          username<span class="token punctuation">:</span> props<span class="token punctuation">.</span>username <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> props<span class="token punctuation">.</span>username<span class="token punctuation">,</span>          passwd<span class="token punctuation">:</span> props<span class="token punctuation">.</span>passwd <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> props<span class="token punctuation">.</span>passwd    <span class="token punctuation">}</span>    this<span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> this<span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>handleChange <span class="token operator">=</span> this<span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>username <span class="token operator">+</span><span class="token string">"\t"</span> <span class="token operator">+</span> this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 阻止默认行为。</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    var _value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    var _name <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>_name <span class="token operator">===</span> <span class="token string">"passwd"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      this<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        passwd<span class="token punctuation">:</span> _value      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      this<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        username<span class="token punctuation">:</span> _value      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"flexontainer"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>简易版用户登录<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"flexontainer"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>用户名：<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"flexontainer"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>密码：<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"passwd"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>passwd<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"登录"</span> className<span class="token operator">=</span><span class="token string">"submitButton"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当然，对应的<code>css</code>的样式也很简单：</p><pre class=" language-css"><code class="language-css"><span class="token selector">form</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px auto<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">201</span>, <span class="token number">198</span>, <span class="token number">198</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.flexontainer</span></span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2</span>rem<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">2</span>rem<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">2</span>rem<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.flexontainer</span> div<span class="token pseudo-class">:first-child</span></span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.flexontainer</span> div<span class="token pseudo-class">:first-child</span></span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.flexontainer</span> div<span class="token pseudo-class">:last-child</span></span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.flexontainer</span> div</span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.flexontainer</span> div>input</span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1.2</span>rem<span class="token punctuation">;</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.submitButton</span></span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1.8</span>rem<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.8</span>em<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.flexontainer</span> div<span class="token class">.center</span></span><span class="token punctuation">{</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用比较简单，直接调用这个组件即可：</p><pre class=" language-clike"><code class="language-clike">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>LoginForm username<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'李四'</span><span class="token punctuation">}</span> passwd<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里为表单传入了默认值，所以我们需要在自定义的组件中进行值非空的判断。因为每次<code>input</code>输入框都会触发<code>handleChange</code>方法，所以这里可以自动更新。</p><p>至于其余的表单也和<code>HTML</code>中的一样，就不再继续。</p><h3 id="2-4-6-状态提升"><a href="#2-4-6-状态提升" class="headerlink" title="2.4.6 状态提升"></a>2.4.6 状态提升</h3><p>官网原话是这么说的：</p><blockquote><p>通常，多个组件需要反映相同的变化数据，这时我们建议将共享状态提升到最近的共同父组件中去。</p></blockquote><p>看到这句话我想到了<code>JavaScript</code>中的父子元素之间的冒泡事件。看了一遍官网的<a href="https://react.docschina.org/docs/lifting-state-up.html" target="_blank" rel="noopener">状态提升</a>说明，感觉主要思想在于如何将子控件的值及时反馈到父控件，以及父控件如何将值传递到子控件中。接着上个案例修改，比如做一个两个同步的提交表单：</p><p><img src="https://img-blog.csdnimg.cn/cc6215f9f90b4434886ec24802be0527.png#pic_center" alt="在这里插入图片描述"><br>在<code>LoginForm</code>中不再使用<code>state</code>这个状态，而是直接使用<code>props</code>这个只读变量来设置一开始的值，然后直接回传用户输入的结果到父控件即可。</p><pre class=" language-clike"><code class="language-clike">class <span class="token class-name">LoginForm</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> this<span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>handleChange <span class="token operator">=</span> this<span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>username <span class="token operator">+</span><span class="token string">"\t"</span> <span class="token operator">+</span> this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 阻止默认行为。</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>    var _value <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    var _name <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>_name <span class="token operator">===</span> <span class="token string">"passwd"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 新增回调函数</span>      this<span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onPasswordChange</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 新增回调函数</span>       this<span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onUserNameChange</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>form onSubmit<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"flexontainer"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span>简易版用户登录<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"flexontainer"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>用户名：<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>username<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"flexontainer"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>密码：<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> name<span class="token operator">=</span><span class="token string">"passwd"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>passwd<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"登录"</span> className<span class="token operator">=</span><span class="token string">"submitButton"</span><span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义父控件为<code>ParentContainer</code>：</p><pre class=" language-clike"><code class="language-clike">class <span class="token class-name">ParentContainer</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>        username <span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>        passwd <span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    this<span class="token punctuation">.</span>handlePasswordChange <span class="token operator">=</span> this<span class="token punctuation">.</span>handlePasswordChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>handleUserNameChange <span class="token operator">=</span> this<span class="token punctuation">.</span>handleUserNameChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleUserNameChange</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"handleUserNameChange "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    this<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      username <span class="token punctuation">:</span> value    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"handleUserNameChange "</span> <span class="token operator">+</span> this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handlePasswordChange</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"handlePasswordChange "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    this<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      passwd <span class="token punctuation">:</span> value    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"handlePasswordChange "</span> <span class="token operator">+</span> this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>LoginForm           username<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span>           passwd<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>passwd<span class="token punctuation">}</span>           onUserNameChange<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleUserNameChange<span class="token punctuation">}</span>           onPasswordChange<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handlePasswordChange<span class="token punctuation">}</span>           <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>LoginForm           username<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>username<span class="token punctuation">}</span>           passwd<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>passwd<span class="token punctuation">}</span>           onUserNameChange<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleUserNameChange<span class="token punctuation">}</span>           onPasswordChange<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handlePasswordChange<span class="token punctuation">}</span>           <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用自定义回调接口，感觉其写法有点类似于<code>Java</code>语言中的接口的思想。需要注意的是这里为了实现状态提升，在子控件中就不再是直接设置，而是将这个权限交给了父控件，由父控件来完成。而如果是子控件设置的话，就有点类似于自己临时拷贝一块内存区域，所以不会影响到原本的结果。将导致两个部分就不会同步。最终的调用如下：</p><pre class=" language-clike"><code class="language-clike">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>ParentContainer<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-7-组合"><a href="#2-4-7-组合" class="headerlink" title="2.4.7 组合"></a>2.4.7 组合</h3><p><strong>在<code>React</code>中推荐使用组合而非继承来实现组件间的代码重用</strong>。比如上面的那个案例就是一个组合的例子，当然还有一种组合方式，感觉比较巧妙，那就是可以组合在自定义控件的内部，比如下面的案例：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/e736a6a39c314e36b9cab9b0bd376396.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/e736a6a39c314e36b9cab9b0bd376396.png#pic_center</a> =600x)</p><p>注意下面的写法，因为需要在自定义组件内部添加子元素，所以这里的写法为：<code>{props.children}</code></p><pre class=" language-clike"><code class="language-clike"><span class="token keyword">function</span> <span class="token function">FancyBorder</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'FancyBorder color-'</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>color<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">WelcomeDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>FancyBorder color<span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token string">"Dialog-title"</span><span class="token operator">></span>        Welcome      <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>p className<span class="token operator">=</span><span class="token string">"Dialog-message"</span><span class="token operator">></span>        Thank you <span class="token keyword">for</span> visiting our spacecraft<span class="token operator">!</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>FancyBorder<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对应的样式为：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.FancyBorder</span> </span><span class="token punctuation">{</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.color-red</span> </span><span class="token punctuation">{</span>  <span class="token property">border-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.Dialog-title</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.Dialog-message</span> </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> larger<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>调用：</p><pre class=" language-clike"><code class="language-clike">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>WelcomeDialog <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-4-8-React-哲学"><a href="#2-4-8-React-哲学" class="headerlink" title="2.4.8 React 哲学"></a>2.4.8 React 哲学</h3><p><a href="https://react.docschina.org/docs/thinking-in-react.html" target="_blank" rel="noopener">React 哲学</a></p><h1 id="3-后记"><a href="#3-后记" class="headerlink" title="3. 后记"></a>3. 后记</h1><p>大致过了一遍<code>React</code>的基础语法，总体来和<code>H5</code>的开发，乃至之前的微信小程序开发还是很相似的。在接下来的日子将继续看React的<a href="https://react.docschina.org/docs/getting-started.html" target="_blank" rel="noopener">高级指引</a>部分。</p><hr><p><strong>Thanks</strong></p><ul><li><a href="https://react.docschina.org/docs/getting-started.html" target="_blank" rel="noopener">React 开始</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reactk开发 | React Router 基础</title>
      <link href="/2021/11/react-02/"/>
      <url>/2021/11/react-02/</url>
      
        <content type="html"><![CDATA[<p>欢迎访问：<a href="https://blog.csdn.net/qq_26460841/article/details/121099969" target="_blank" rel="noopener">【React Native】从React开始——React Router 基础</a></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>在上篇博客<a href="https://blog.csdn.net/qq_26460841/article/details/121046948" target="_blank" rel="noopener">【React Native】从React开始——核心概念</a>中了解了<code>React</code>的一些基础用法，并了解到其实和之前学习的微信小程序开发十分相像。感兴趣微信小程序开发的同学可以去同步了解学习下。在这篇博客中，将继续学习<code>React</code>路由基础部分的内容。当然这部分内容我在<a href="https://react.docschina.org/" target="_blank" rel="noopener">官网</a>中并没有找到，所幸在网上还是找到了一个开源的项目说明，即<a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/installation.md" target="_blank" rel="noopener">getting started guide</a>。接下来的内容将参考这篇文档的内容进行继续学习。</p><h1 id="2-React路由基础"><a href="#2-React路由基础" class="headerlink" title="2. React路由基础"></a>2. React路由基础</h1><p>路由官方提供了一个强大的组件，即：<a href="https://github.com/remix-run/react-router" target="_blank" rel="noopener">React Router</a>。首先看下官网的介绍：</p><blockquote><p>React Router is a lightweight, fully-featured routing library for the React JavaScript library. React Router runs everywhere that React runs; on the web, on the server (using node.js), and on React Native.</p></blockquote><p>翻译过来也即是：</p><blockquote><p><code>React Router</code>是一个轻量级、功能齐全的路由库。<code>React</code>路由器运行在<code>React</code>运行的<strong>任何地方</strong>；在<code>web</code>、服务器（使用<code>node.js</code>）和<code>React Native</code>上。</p></blockquote><p>所以学习这个库还是很有必要的。同时，在<code>Readme</code>文件中可以看到官方提供了学习的指引，即：<a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/installation.md" target="_blank" rel="noopener">getting started guide</a>。在这个文档中看到了这么一句话，更加证明了其重要的地位：</p><blockquote><p>React Router isn’t just about matching a url to a function or component: it’s about building a full user interface that maps to the URL.</p></blockquote><p>首先按照这个文档来一起看下使用流程。</p><h2 id="2-1-安装React-Router"><a href="#2-1-安装React-Router" class="headerlink" title="2.1 安装React Router"></a>2.1 安装React Router</h2><p>首先进入之前创建的项目目录，这里我的为<code>my-app</code>，然后执行命令：</p><pre class=" language-clike"><code class="language-clike">npm install history react<span class="token operator">-</span>router<span class="token operator">-</span>dom</code></pre><p>或者使用命令：</p><pre class=" language-clike"><code class="language-clike">npm install react<span class="token operator">-</span>router<span class="token operator">-</span>dom</code></pre><p>这里我去掉了版本。结果如下：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/7f2466cd218445d492ada2776e135867.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/7f2466cd218445d492ada2776e135867.png#pic_center</a> =600x)<br>当然，在文件夹下可以做一个简单的检查：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/d0062cafcd7c4569988bb0a583f5abb3.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/d0062cafcd7c4569988bb0a583f5abb3.png#pic_center</a> =600x)</p><h2 id="2-2-Create-React-App"><a href="#2-2-Create-React-App" class="headerlink" title="2.2 Create React App"></a>2.2 Create React App</h2><p>在<code>Readme</code>文件中给出了几个使用案例，这里简单的来尝试下。首先导入路由模块：</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// 导入路由的模块</span>import <span class="token punctuation">{</span> BrowserRouter as Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link <span class="token punctuation">}</span> from <span class="token string">"react-router-dom"</span></code></pre><p>然后定义两个模块，分别是<code>LoginForm</code>和<code>HomePage</code>，其中<code>LoginForm</code>直接从上个博客<a href="https://blog.csdn.net/qq_26460841/article/details/121046948#t12" target="_blank" rel="noopener">【React Native】从React开始——核心概念#表单</a>中拷贝过来，这里仅简单的给出<code>HomePage</code>的模块代码：</p><pre class=" language-clike"><code class="language-clike">const HomePage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>主页<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span></code></pre><p>然后开始使用：</p><pre class=" language-clike"><code class="language-clike">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Router<span class="token operator">></span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"textAlignCenter"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/login"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>LoginForm<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>      <span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>HomePage<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>      <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>Home Page<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>Go to Login Page<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>  <span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>即，将要做路由的部分使用<code>Router</code>标签包裹起来，然后使用<code>Link</code> 来定义链接，对应于<code>HTML</code>中的<code>a</code>标签，<code>to</code>后面的东西对应<code>a</code>标签的<code>href</code>属性。<code>Route</code>标签内容东西为映射关系，即链接和对应的模块匹配设置。注意到：</p><pre class=" language-clike"><code class="language-clike"><span class="token operator">&lt;</span>Route exact path<span class="token operator">=</span><span class="token string">"/"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>HomePage<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span></code></pre><p>这里使用了<code>exact</code>这个属性，它的意思是精确的，表示精确匹配。因为对于网站默认的匹配为<code>/</code>，而对应的任意一个链接，比如<code>/a</code>、<code>/a/b/c</code>等均可以匹配到。比如如果去掉这个属性，当我们访问<code>/login</code>的时候，页面两个模块都会显示出来：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/dbd5cfe31ca943eebd19d9e20b3e5a7d.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/dbd5cfe31ca943eebd19d9e20b3e5a7d.png#pic_center</a> =800x)</p><p>如果加上这个<code>exact</code>属性，效果为：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/565f4202d1f1431eae49feca7219c9c2.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/565f4202d1f1431eae49feca7219c9c2.png#pic_center</a> =800x)</p><h2 id="2-3-React-Router"><a href="#2-3-React-Router" class="headerlink" title="2.3 React Router"></a>2.3 React Router</h2><p>通过官网找到了一个专门介绍<code>React Router</code>的网站：<a href="https://reactrouter.com/" target="_blank" rel="noopener">https://reactrouter.com/</a>。接下来就来一起看下这个网站的文档内容。当然在这之前，我将上面的案例进行简单的修改，使得更像一个网站。为了方便，首先设置一下在<code>VSCode</code>中的<code>html</code>标签代码补全。然后重新新建一个项目：</p><h3 id="2-3-1-重新建立一个使用了Router的项目"><a href="#2-3-1-重新建立一个使用了Router的项目" class="headerlink" title="2.3.1 重新建立一个使用了Router的项目"></a>2.3.1 重新建立一个使用了Router的项目</h3><pre class=" language-clike"><code class="language-clike">npx create<span class="token operator">-</span>react<span class="token operator">-</span>app myappcd myappnpm install react<span class="token operator">-</span>router<span class="token operator">-</span>dom  <span class="token comment" spellcheck="true">// 路由模块</span>yarn start</code></pre><p>然后在<code>src</code>目录下的文件为：</p><p>![src](<a href="https://img-blog.csdnimg.cn/a8d22e8275b4483b973c0f5a852cdba7.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/a8d22e8275b4483b973c0f5a852cdba7.png#pic_center</a> =400x)<br>在接下来的案例中，就不将所有的内容都写在<code>index.js</code>文件中。我这里将它按照模块进行拆分。比如<code>Nav.js</code>文件中为：</p><pre class=" language-clike"><code class="language-clike">import logo from <span class="token string">'./logo.svg'</span><span class="token punctuation">;</span>import <span class="token string">'./App.css'</span><span class="token punctuation">;</span>import <span class="token punctuation">{</span> Link <span class="token punctuation">}</span> from <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Nav</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"Nav"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"flex1"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>logo<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"App-logo"</span> alt<span class="token operator">=</span><span class="token string">"logo"</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>ul className<span class="token operator">=</span><span class="token string">"flex1"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/login"</span><span class="token operator">></span>Login<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/about"</span><span class="token operator">></span>About<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>export default Nav<span class="token punctuation">;</span></code></pre><p>其余的<code>About.js</code>以及<code>Home.js</code>采用类似的写法。然后在<code>index.js</code>文件中，做一下路由关联：</p><pre class=" language-clike"><code class="language-clike">import <span class="token string">'./App.css'</span>import reactDom from <span class="token string">'react-dom'</span>import Nav from <span class="token string">'./Nav'</span>import Home from <span class="token string">'./Home'</span>import Login from <span class="token string">'./Login'</span>import About from <span class="token string">'./About'</span>import <span class="token punctuation">{</span> BrowserRouter as Router<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> from <span class="token string">'react-router-dom'</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>Router<span class="token operator">></span>        <span class="token operator">&lt;</span>Nav <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> exact component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/login"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Login<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span>reactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>     document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>最后的效果为：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/cf077110b1064d4fad47969c6a4c9c84.gif#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/cf077110b1064d4fad47969c6a4c9c84.gif#pic_center</a> =600x)<br>因为代码比较简单，这篇博客里面就不贴出来了。我上传到了<code>github</code>，代码链接为：<a href="https://github.com/baiyazi/ReactLearn/tree/main/src_11.04%20v0" target="_blank" rel="noopener">ReactLearn/src_11.04 v0/</a></p><h3 id="2-3-2-useParams"><a href="#2-3-2-useParams" class="headerlink" title="2.3.2 useParams"></a>2.3.2 useParams</h3><p>在上一小节中简单的使用了<code>React</code>路由，但在实际中，通常我们需要在链接后面拼接一些参数，比如：<code>https://editor.csdn.net/md?articleId=121095969</code>。在这个小节中，将介绍使用<code>URL</code>参数的使用。比如我们定义一个获取消息的模块：</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// Message.js</span>import <span class="token string">'./App.css'</span>import <span class="token punctuation">{</span> useParams <span class="token punctuation">}</span> from <span class="token string">'react-router-dom'</span><span class="token keyword">function</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  let <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"HomeModule"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>The message is <span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span>export default Message<span class="token punctuation">;</span></code></pre><p>使用了<code>react-router-dom</code>中的<code>useParams</code>钩子函数。然后将其添加到我们<code>index.js</code>文件的路由模块下：</p><pre class=" language-clike"><code class="language-clike"><span class="token operator">&lt;</span>Router<span class="token operator">></span>    <span class="token operator">&lt;</span>Nav <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Switch<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> exact component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/login"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Login<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/:id"</span> children<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token operator">&lt;</span>Message <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span></code></pre><p>对了，这里使用了<code>Switch</code>标签，也来自<code>react-router-dom</code>。<code>&lt;Switch&gt;</code> 查看其所有子 <code>&lt;Route&gt;</code> 元素并呈现路径与当前 <code>URL</code> 匹配的第一个元素。 当您有多个路由，但您希望一次只渲染其中一个时使用 <code>&lt;Switch&gt;</code>就可以达到预期。</p><p>那么我们在测试的时候，截图如下：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/0f2a8e5582444cb1834f353abf962174.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/0f2a8e5582444cb1834f353abf962174.png#pic_center</a> =600x)<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/7a7f1fa4bcb6466b90530cf015668692.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/7a7f1fa4bcb6466b90530cf015668692.png#pic_center</a> =600x)</p><p>结果可以发现通过这种方式，可以比较方便的获取到浏览器地址栏的参数。我上传到了<code>github</code>，代码链接为：<a href="https://github.com/baiyazi/ReactLearn/tree/main/src_11.04%20v0.1" target="_blank" rel="noopener">ReactLearn/src_11.04 v0.1/</a></p><h3 id="2-3-3-useRouteMatch"><a href="#2-3-3-useRouteMatch" class="headerlink" title="2.3.3 useRouteMatch"></a>2.3.3 useRouteMatch</h3><p><code>useRouteMatch</code> 将尝试将当前 <code>URL</code> 与给定的 <code>URL</code> 匹配，该 <code>URL</code> 可以是字符串或具有不同选项的对象。不妨先看看它会返回什么参数，改写下之前的<code>Message.js</code>案例：</p><pre class=" language-clike"><code class="language-clike">import <span class="token string">'./App.css'</span>import <span class="token punctuation">{</span> useRouteMatch<span class="token punctuation">,</span> useParams <span class="token punctuation">}</span> from <span class="token string">'react-router-dom'</span><span class="token keyword">function</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  let <span class="token punctuation">{</span> path<span class="token punctuation">,</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRouteMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  let <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"HomeModule"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>The message is <span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>The message is <span class="token punctuation">{</span>path<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span>h1<span class="token operator">></span>The message is <span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span>export default Message</code></pre><p>结果为：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/47518e0f2a32480a8bb60c7d97e9e07e.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/47518e0f2a32480a8bb60c7d97e9e07e.png#pic_center</a> =300x)<br>然后我们可以再次按照<a href="https://reactrouter.com/web/example/nesting" target="_blank" rel="noopener">网站文档</a>进行模仿改造。将<code>Message.js</code>改造为：</p><pre class=" language-clike"><code class="language-clike">import <span class="token string">'./App.css'</span>import <span class="token punctuation">{</span> useRouteMatch<span class="token punctuation">,</span> useParams<span class="token punctuation">,</span> Link<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Route <span class="token punctuation">}</span> from <span class="token string">'react-router-dom'</span><span class="token keyword">function</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  let <span class="token punctuation">{</span> path<span class="token punctuation">,</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRouteMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"MessageModule"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"leftNav"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span>`$<span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token operator">/</span>home`<span class="token punctuation">}</span><span class="token operator">></span>生活消息<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span>`$<span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token operator">/</span>work`<span class="token punctuation">}</span><span class="token operator">></span>工作消息<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"rightContent"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Switch<span class="token operator">></span>          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token punctuation">{</span>path<span class="token punctuation">}</span> exact<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token punctuation">{</span>`$<span class="token punctuation">{</span>path<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">:</span>messageId`<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Content <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span>const Content <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  let <span class="token punctuation">{</span> messageId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>Message is <span class="token punctuation">{</span>messageId<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">}</span>export default Message</code></pre><p>效果如下图：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/c0e138abe8c94edcb42cad7282e7226d.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/c0e138abe8c94edcb42cad7282e7226d.png#pic_center</a> =600x)</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/4ba7da8eef4c4359b3626e1e5611c9c6.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/4ba7da8eef4c4359b3626e1e5611c9c6.png#pic_center</a> =600x)<br>观察上面可以知道，可以很容易实现一个导航和页面的动态加载的需求。也即是说，对于动态定制页面来说十分方便。</p><p>我上传到了<code>github</code>，代码链接为：<a href="https://github.com/baiyazi/ReactLearn/tree/main/src_11.04%20v0.2" target="_blank" rel="noopener">ReactLearn/src_11.04 v0.2/</a></p><h3 id="2-3-4-useHistory"><a href="#2-3-4-useHistory" class="headerlink" title="2.3.4 useHistory"></a>2.3.4 useHistory</h3><p><code>useHistory</code>可以用来做导航<strong>跳转</strong>。比如在上面的案例中，进行修改<code>Message.js</code>：</p><pre class=" language-clike"><code class="language-clike">import <span class="token string">'./App.css'</span>import <span class="token punctuation">{</span>  useRouteMatch<span class="token punctuation">,</span>  useParams<span class="token punctuation">,</span>  Link<span class="token punctuation">,</span>  Switch<span class="token punctuation">,</span>  Route<span class="token punctuation">,</span>  useHistory<span class="token punctuation">,</span><span class="token punctuation">}</span> from <span class="token string">'react-router-dom'</span><span class="token keyword">function</span> <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  let <span class="token punctuation">{</span> path<span class="token punctuation">,</span> url <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRouteMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  let history <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 使用history来进行页面跳转</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"MessageModule"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"leftNav"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span>`$<span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token operator">/</span>home`<span class="token punctuation">}</span><span class="token operator">></span>生活消息<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span>`$<span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token operator">/</span>work`<span class="token punctuation">}</span><span class="token operator">></span>工作消息<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>新增li项，并设置onClick回调<span class="token operator">--</span><span class="token operator">></span>          <span class="token operator">&lt;</span>li onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>To Login Page<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"rightContent"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Switch<span class="token operator">></span>          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token punctuation">{</span>path<span class="token punctuation">}</span> exact<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token punctuation">{</span>`$<span class="token punctuation">{</span>path<span class="token punctuation">}</span><span class="token operator">/</span><span class="token punctuation">:</span>messageId`<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Content <span class="token operator">/</span><span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span>const Content <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  let <span class="token punctuation">{</span> messageId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>Message is <span class="token punctuation">{</span>messageId<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">}</span>export default Message</code></pre><p>效果为点击新增的<code>li</code>项后，会跳转到设置的<code>login</code>页面。由于比较简单，且未修改其余文件内容，这里就不上传代码了。</p><h3 id="2-3-5-useLocation"><a href="#2-3-5-useLocation" class="headerlink" title="2.3.5 useLocation"></a>2.3.5 useLocation</h3><p>返回一个表示当前<code>URL</code>的<code>location</code>对象。比如新写一个<code>Test</code>模块，然后在这个模块中<code>console.log</code>一下得到的<code>location</code>对象。获取到的内容为：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/4e422d6ecae34dc99793e6254d3e5a49.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/4e422d6ecae34dc99793e6254d3e5a49.png#pic_center</a> =300x)<br>感觉和<code>window.location</code>对象的内容对应的，比如我们在浏览器控制台进行输出这个对象：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/c4ebd26d750b487bb09fda6b34c02f71.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/c4ebd26d750b487bb09fda6b34c02f71.png#pic_center</a> =400x)</p><h3 id="2-3-6-Redirect"><a href="#2-3-6-Redirect" class="headerlink" title="2.3.6 Redirect"></a>2.3.6 Redirect</h3><p>即重定向，和前面使用的<code>history.push(&quot;/login&quot;)</code>有些类似，但是<code>Redirect</code>将覆盖历史堆栈中的当前位置，就像服务器端重定向一样。下面看一个基础案例：</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// Totest.js</span>import <span class="token string">'./App.css'</span>import <span class="token punctuation">{</span> useLocation<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> from <span class="token string">'react-router-dom'</span><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  let location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  let loggedIn <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"12345678"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>loggedIn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Route<span class="token operator">></span>        <span class="token punctuation">{</span>loggedIn <span class="token operator">?</span> <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/home"</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>TouristPage <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span>const TouristPage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>You <span class="token keyword">do</span> not have permission to access this site<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>export default Test</code></pre><p>效果为，当输入浏览器的链接为<code>http://localhost:3000/test?id=12345678</code>，就可以访问主页。除此之外的会显示：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/a008f824d198453388c431910c66f3a8.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/a008f824d198453388c431910c66f3a8.png#pic_center</a> =600x)</p><p>上面<code>&lt;Redirect to=&quot;/home&quot; /&gt;</code>中传入的是一个字符串，同样可以传入一个对象。用来指定一些参数，比如：</p><pre class=" language-clike"><code class="language-clike"><span class="token operator">&lt;</span>Redirect  to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>    pathname<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span>    search<span class="token punctuation">:</span> <span class="token string">"?utm=your+face"</span><span class="token punctuation">,</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span> referrer<span class="token punctuation">:</span> currentLocation <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h3 id="2-3-7-Query-Parameters"><a href="#2-3-7-Query-Parameters" class="headerlink" title="2.3.7 Query Parameters"></a>2.3.7 Query Parameters</h3><p>在前面的案例中，我写了一行<code>bug</code>代码：<code>let loggedIn = location.search.substring(1).split(&quot;=&quot;)[1] === &quot;12345678&quot;</code>。这个代码无疑只是为了这里的案例用的。实际上，在React中提供了另一种更加优雅的方式来解决链接中的参数查询。可以查看官网案例：<a href="https://v5.reactrouter.com/web/example/query-parameters" target="_blank" rel="noopener">here</a>。这里，我来对上面的案例进行简单模仿改造一下。</p><pre class=" language-clike"><code class="language-clike">import <span class="token string">'./App.css'</span>import <span class="token punctuation">{</span> useLocation<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> from <span class="token string">'react-router-dom'</span><span class="token keyword">function</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 用URLSearchParams来进行包装一次</span>  <span class="token keyword">function</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>search<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  let query <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 直接使用get方法传入需要查询的key</span>  let loggedIn <span class="token operator">=</span> query<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'12345678'</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Route<span class="token operator">></span><span class="token punctuation">{</span>loggedIn <span class="token operator">?</span> <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/home"</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>TouristPage <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span><span class="token punctuation">}</span>const TouristPage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>You <span class="token keyword">do</span> not have permission to access this site<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span>export default Test</code></pre><p>效果和上个案例一样，只是这样的写法的代码更加优雅。先使用<code>URLSearchParams</code>来进行将<code>window.location.search</code>的所有参数进行包装一下，然后直接使用<code>get</code>来进行按<code>key</code>进行获取。这种方式更加简单，所以也推荐使用这种方式。</p><h3 id="2-3-8-No-Match-404"><a href="#2-3-8-No-Match-404" class="headerlink" title="2.3.8 No Match 404"></a>2.3.8 No Match 404</h3><p>首先为未匹配的链接页面配置好<code>404</code>页面，这里设置为<code>NoMatch.js</code>模块。具体内容如下：</p><pre class=" language-clike"><code class="language-clike">import <span class="token string">'./App.css'</span>import <span class="token punctuation">{</span> useLocation <span class="token punctuation">}</span> from <span class="token string">'react-router-dom'</span><span class="token keyword">function</span> <span class="token function">NoMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  let location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span>        No match <span class="token keyword">for</span> <span class="token operator">&lt;</span>code<span class="token operator">></span><span class="token punctuation">{</span>location<span class="token punctuation">.</span>pathname<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>code<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span>export default NoMatch</code></pre><p>然后，需要在<code>index.js</code>文件中，配置默认的路由，即：</p><pre class=" language-clike"><code class="language-clike"><span class="token operator">&lt;</span>Switch<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/"</span> exact component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/login"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Login<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/about"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/message"</span> children<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">&lt;</span>Message <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/test"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Test<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 当匹配不到就走默认的NoMatch</span>    <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"*"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>NoMatch <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span></code></pre><p>比如随意输入一个链接地址，然后结果为：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/45f8c58a8dd84e28857459c58a125c5d.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/45f8c58a8dd84e28857459c58a125c5d.png#pic_center</a> =400x)</p><p>我上传到了<code>github</code>，代码链接为：<a href="https://github.com/baiyazi/ReactLearn/tree/main/src_11.04%20v0.3" target="_blank" rel="noopener">ReactLearn/src_11.04 v0.3/</a></p><p>当然，在<a href="https://v5.reactrouter.com/web/guides/quick-start" target="_blank" rel="noopener">这个网站</a>上还有很多关于<code>React Router</code>的案例说明。感兴趣的可以继续看看这个网站。</p><hr><p><strong>References</strong></p><ul><li><a href="https://github.com/remix-run/react-router" target="_blank" rel="noopener">React Router</a></li><li><a href="https://blog.csdn.net/qq_26460841/article/details/121046948" target="_blank" rel="noopener">【React Native】从React开始——核心概念</a></li><li><a href="https://github.com/remix-run/react-router/blob/main/docs/getting-started/installation.md" target="_blank" rel="noopener">getting started guide</a></li><li><a href="http://www.react-china.org/t/topic/37496" target="_blank" rel="noopener">2021 年你应该使用的 9 个 React Hook 的库</a></li><li><a href="https://reactrouter.com/" target="_blank" rel="noopener">https://reactrouter.com/</a></li><li><a href="https://v5.reactrouter.com/web/guides/quick-start" target="_blank" rel="noopener">v5.reactrouter.com</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reactk开发 | 高级概念</title>
      <link href="/2021/11/react-03/"/>
      <url>/2021/11/react-03/</url>
      
        <content type="html"><![CDATA[<p>欢迎访问：<a href="https://blog.csdn.net/qq_26460841/article/details/121174545" target="_blank" rel="noopener">【React Native】从React开始——高级概念</a></p><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>&ensp;&ensp;&ensp;&ensp;在博客<a href="https://blog.csdn.net/qq_26460841/article/details/121046948" target="_blank" rel="noopener">【React Native】从React开始——核心概念</a>中了解了<code>React</code>的一些基础用法，并了解到其实和之前学习的微信小程序开发十分相像。感兴趣微信小程序开发的同学可以去同步了解学习下。在<a href="https://blog.csdn.net/qq_26460841/article/details/121099969" target="_blank" rel="noopener">【React Native】从React开始——React Router 基础</a>一篇中学习了在<code>React</code>中路由的使用，通过路由，我们的单页面应用看起来也更像是一个完整的前端页面。但是其实当用户点击设定好的链接的时候，因为实际上并不会再向服务器发起页面请求，而是直接根据代码逻辑进行<code>DOM</code>的渲染，所以这里加载会更加流畅。</p><p>&ensp;&ensp;&ensp;&ensp;当然，仅有前面两篇博客的只是储备其实还是略微不够的，因为在<code>React</code>中还有很多高级的用法。在<a href="https://react.docschina.org/docs/getting-started.html#advanced-concepts" target="_blank" rel="noopener">官网</a>中的高级指引部分内容，也就是这篇博客学习的核心。感兴趣可以直接查看官网的文档。</p><h1 id="2-内容"><a href="#2-内容" class="headerlink" title="2. 内容"></a>2. 内容</h1><h2 id="2-1-Context"><a href="#2-1-Context" class="headerlink" title="2.1 Context"></a>2.1 Context</h2><blockquote><p><code>Context</code> 提供了一个无需为每层组件手动添加 <code>props</code>，就能在组件树间进行数据传递的方法。</p></blockquote><p>在一个典型的 <code>React</code> 应用中，数据是通过 <code>props</code> 属性自上而下（由父及子）进行传递的，但这种做法对于某些类型的属性而言是极其繁琐的。<code>Context</code> 提供了一种在<strong>组件之间共享此类值</strong>的方式，而不必显式地通过组件树的逐层传递 <code>props</code>。</p><p>【注】：本篇博客的示例代码在<a href="https://github.com/baiyazi/ReactLearn/tree/main/src_11.04%20v0.3" target="_blank" rel="noopener">ReactLearn/src_11.04 v0.3/</a>的基础上进行修改。比如这里修改<code>NoMatch.js</code>文件为：</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// NoMatch.js</span>import <span class="token string">'./App.css'</span>import UserInfoContext from <span class="token string">'./Config'</span>import React from <span class="token string">'react'</span>class <span class="token class-name">NoMatch</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 使用为this.context</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>this<span class="token punctuation">.</span>context<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>        <span class="token punctuation">{</span>this<span class="token punctuation">.</span>context<span class="token punctuation">}</span> No match <span class="token operator">!</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 设置到当前的context </span>NoMatch<span class="token punctuation">.</span>contextType <span class="token operator">=</span> UserInfoContextexport default NoMatch</code></pre><p>新建一个<code>Config.js</code>文件，简单的用来测试：</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// Config.js</span>import React from <span class="token string">"react"</span><span class="token comment" spellcheck="true">// 直接外部定义一个Context</span>const UserInfoContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">"404"</span><span class="token punctuation">)</span>export default UserInfoContext<span class="token punctuation">;</span></code></pre><p>最终我们随便输入一个链接，就可以看见效果为：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/7cd80a9138f743a6afe50670a111116c.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/7cd80a9138f743a6afe50670a111116c.png#pic_center</a> =500x)</p><p>这里只是简单的使用，因为在官网中也提到了：</p><blockquote><p><code>Context</code> 主要应用场景在于很多不同层级的组件需要访问同样一些的数据。请谨慎使用，因为这会使得组件的复用性变差。</p></blockquote><p>所以对于后面的<code>Consumer</code>、<code>displayName</code>等这里不再介绍。</p><h2 id="2-2-错误边界"><a href="#2-2-错误边界" class="headerlink" title="2.2 错误边界"></a>2.2 错误边界</h2><p>错误边界是一种 <code>React</code> <strong>组件</strong>，这种组件可以捕获并打印发生在其子组件树任何位置的 <code>JavaScript</code> 错误，并且，它会渲染出备用 <code>UI</code>，而不是渲染那些崩溃了的子组件树。错误边界在渲染期间、生命周期方法和整个组件树的构造函数中捕获错误。</p><blockquote><p><strong>注意</strong><br>错误边界无法捕获以下场景中产生的错误：<br>1.事件处理<br>2.异步代码（例如 setTimeout 或 requestAnimationFrame 回调函数）<br>3.服务端渲染<br>4.它自身抛出来的错误（并非它的子组件）</p></blockquote><p>如果一个 <code>class</code> 组件中定义了 <code>static getDerivedStateFromError()</code> 或 <code>componentDidCatch()</code> 这两个生命周期方法中的任意一个（或两个）时，那么它就变成一个错误边界。当抛出错误后，用 <code>static getDerivedStateFromError()</code> 渲染备用 <code>UI</code> ，使用 <code>componentDidCatch()</code> 打印错误信息。</p><p><code>copy</code>一下<code>ErrorBoundary</code>到本地项目的<code>ErrorBoundary.js</code>文件中，定义为：</p><pre class=" language-clike"><code class="language-clike">import React from <span class="token string">'react'</span>class <span class="token class-name">ErrorBoundary</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> hasError<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  static <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 更新 state 使下一次渲染能够显示降级后的 UI</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> hasError<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidCatch</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> errorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 你同样可以将错误日志上报给服务器</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> errorInfo<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 你可以自定义降级后的 UI 并渲染</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>Something went wrong<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children  <span class="token punctuation">}</span><span class="token punctuation">}</span>export default ErrorBoundary</code></pre><p>然后，我们人为的制造一个<code>bug</code>在<code>NoMatch.js</code>文件中，比如：</p><pre class=" language-clike"><code class="language-clike">import <span class="token string">'./App.css'</span>import UserInfoContext from <span class="token string">'./Config'</span>import React from <span class="token string">'react'</span>class <span class="token class-name">NoMatch</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 制造一个bug代码</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>undefined <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>        <span class="token punctuation">{</span>this<span class="token punctuation">.</span>context<span class="token punctuation">}</span> No match <span class="token operator">!</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 设置到当前的context </span>NoMatch<span class="token punctuation">.</span>contextType <span class="token operator">=</span> UserInfoContextexport default NoMatch</code></pre><p>然后在<code>index.js</code>文件中，为默认匹配设置一个错误边界：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ErrorBoundary</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NoMatch</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ErrorBoundary</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Route</span><span class="token punctuation">></span></span></code></pre><p>为了看见效果，我们需要将项目打包到发布环境中。因为在开发环境最终会转到一个错误详情页面。比如下面的：<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/47ba498f52ba4bcda83b3038492a0faf.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/47ba498f52ba4bcda83b3038492a0faf.png#pic_center</a> =700x)<br>但，这里我们只需要看出现的线上效果。故而我们这里将项目简单打包，使用命令：</p><pre class=" language-clike"><code class="language-clike">npm run build <span class="token comment" spellcheck="true">// 代码会被编译到build文件夹</span>npm install <span class="token operator">-</span>g serve <span class="token comment" spellcheck="true">// 安装一个服务器</span>serve <span class="token operator">-</span>s build <span class="token comment" spellcheck="true">// 运行</span></code></pre><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/9788915e83d047ac8090a2e089bded7f.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/9788915e83d047ac8090a2e089bded7f.png#pic_center</a> =500x)<br>再次测试，可以看到页面效果为：<br>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/a2a9504e8d694d7cbd08017afb307be7.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/a2a9504e8d694d7cbd08017afb307be7.png#pic_center</a> =500x)</p><h3 id="2-2-1-错误边界应该放置在哪？"><a href="#2-2-1-错误边界应该放置在哪？" class="headerlink" title="2.2.1 错误边界应该放置在哪？"></a>2.2.1 错误边界应该放置在哪？</h3><p>错误边界的粒度由你来决定，可以将其包装在最顶层的路由组件并为用户展示一个 “<code>Something went wrong</code>” 的错误信息，就像服务端框架经常处理崩溃一样。你也可以将单独的部件包装在错误边界以保护应用其他部分不崩溃。</p><h3 id="2-2-2-关于-try-catch-？"><a href="#2-2-2-关于-try-catch-？" class="headerlink" title="2.2.2 关于 try/catch ？"></a>2.2.2 关于 try/catch ？</h3><p><code>try / catch</code> 很棒但它仅能用于命令式代码：</p><pre class=" language-clike"><code class="language-clike"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token function">showButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>然而，<code>React</code> 组件是声明式的并且具体指出 什么 需要被渲染。错误边界保留了 <code>React</code> 的声明性质，其行为符合你的预期。例如，即使一个错误发生在 <code>componentDidUpdate</code> 方法中，并且由某一个深层组件树的 <code>setState</code> 引起，<strong>其仍然能够冒泡到最近的错误边界</strong>。</p><h2 id="2-3-Refs-转发"><a href="#2-3-Refs-转发" class="headerlink" title="2.3 Refs 转发"></a>2.3 Refs 转发</h2><p>关于转发，<a href="https://react.docschina.org/docs/forwarding-refs.html" target="_blank" rel="noopener">官网-Refs 转发</a>的介绍如为：<code>Ref</code> 转发是一项将 <code>ref</code> 自动地通过组件传递到其一子组件的技巧。对于大多数应用中的组件来说，这通常不是必需的。但其对某些组件，尤其是<strong>可重用的组件库</strong>是很有用的。也就是说其实学习这块内容是很有必要的，因为在日常开发中，通常都需要定义一些可重用的组件库。</p><p><code>Ref</code> 转发是一个可选特性，其允许某些组件接收 <code>ref</code>，并将其向下传递（换句话说，“转发”它）给子组件。比如在文档中给出的示例：</p><pre class=" language-clike"><code class="language-clike">const FancyButton <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>button ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"FancyButton"</span><span class="token operator">></span>    <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 你可以直接获取 DOM button 的 ref：</span>const ref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>FancyButton ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span><span class="token operator">></span>Click me<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>FancyButton<span class="token operator">></span><span class="token punctuation">;</span></code></pre><p>以下是对上述示例发生情况的逐步解释：</p><ul><li>我们通过调用 <code>React.createRef</code> 创建了一个 <code>React ref</code> 并将其赋值给 <code>ref</code> 变量。</li><li>我们通过指定 <code>ref</code> 为 <code>JSX</code> 属性，将其向下传递给 <code>&lt;FancyButton ref={ref}&gt;</code>。</li><li><code>React</code> 传递 <code>ref</code> 给 <code>forwardRef</code> 内函数 <code>(props, ref) =&gt; ...</code>，作为其第二个参数。</li><li>我们向下转发该 <code>ref</code> 参数到 <code>&lt;button ref={ref}&gt;</code>，将其指定为 <code>JSX</code> 属性。</li><li>当 <code>ref</code> 挂载完成，<code>ref.current</code> 将指向 <code>&lt;button&gt; DOM</code> 节点。</li></ul><p>注意：</p><ul><li>第二个参数 <code>ref</code> 只在使用 <code>React.forwardRef</code> 定义组件时存在。常规函数和 <code>class</code> 组件不接收 <code>ref</code> 参数，且 <code>props</code> 中也不存在 <code>ref</code>。</li><li><code>Ref</code> 转发不仅限于 <code>DOM</code> 组件，你也可以转发 <code>refs</code> 到 <code>class</code> 组件实例中。</li></ul><p>比如下面的一个简单案例<code>/examples/RefsLearn.js</code>：</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// examples/RefsLearn.js</span>import React from <span class="token string">'react'</span>class <span class="token class-name">RefsLearn</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建React ref对象</span>    this<span class="token punctuation">.</span>myRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleClick</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取到input的自定义属性值</span>      let dataId <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      let obj <span class="token operator">=</span> this<span class="token punctuation">.</span>myRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>dataId <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          obj<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dataId <span class="token operator">===</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          obj<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dataId <span class="token operator">===</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          obj<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// eslint-disable-next-line no-throw-literal</span>          <span class="token keyword">throw</span> <span class="token string">"Error!"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>render中的子控件设置ref，那么就可以用这个ref来得到这个子控件对象<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"input"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>myRef<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ul<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">}</span> data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token operator">></span>获取焦点<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">}</span> data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">></span>禁用按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>                <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">}</span> data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token operator">></span>清空文本<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>export default RefsLearn</code></pre><p>在上面的案例中，可以可以实现预定义的三种效果，截图：</p><p>![在这里插入图片描述](<a href="https://img-blog.csdnimg.cn/284518aa17c441a384a516adef57bb68.png#pic_center" target="_blank" rel="noopener">https://img-blog.csdnimg.cn/284518aa17c441a384a516adef57bb68.png#pic_center</a> =400x)</p><p>通过上面的案例，可以体会到：</p><blockquote><p><code>render</code>中的子控件设置<code>ref</code>，那么就可以用这个<code>ref</code>来得到这个子控件对象，这个对象为<code>ref.current</code>。当然，操作过程需要一些<code>JavaScript</code>的知识，可以参考<a href="https://www.w3school.com.cn/jsref/dom_obj_button.asp" target="_blank" rel="noopener">w3school网站</a>。</p></blockquote><h2 id="2-4-Fragments"><a href="#2-4-Fragments" class="headerlink" title="2.4 Fragments"></a>2.4 Fragments</h2><p>通常我们在<code>render</code>中返回的是一个<code>div</code>包起来的一坨控件，比如上面的例子：</p><pre class=" language-clike"><code class="language-clike"><span class="token operator">&lt;</span>div<span class="token operator">></span>   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"input"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>myRef<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>但是有时候，在<code>render</code>中使用<code>div</code>来包起来的时候，会导致不再是我们想要的<code>HTML</code>结构。比如下面的案例：</p><pre class=" language-clike"><code class="language-clike">class <span class="token class-name">Columns</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span>World<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结果：</span><span class="token operator">&lt;</span>table<span class="token operator">></span>  <span class="token operator">&lt;</span>tr<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里不是我们所希望的结果<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>td<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>      <span class="token operator">&lt;</span>td<span class="token operator">></span>World<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">></span></code></pre><p>显然我们不需要<code>td</code>外层的<code>div</code>元素。所以在<code>React</code>中提供了<code>Fragments</code>来解决这个问题。可以在<code>render</code>的时候使用：</p><pre class=" language-clike"><code class="language-clike">class <span class="token class-name">Columns</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span>World<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>或者使用更加简洁的语法：</p><pre class=" language-clike"><code class="language-clike">class <span class="token class-name">Columns</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span><span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>        <span class="token operator">&lt;</span>td<span class="token operator">></span>World<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>来解决这个问题。</p><h2 id="2-5-高阶组件（HOC）"><a href="#2-5-高阶组件（HOC）" class="headerlink" title="2.5 高阶组件（HOC）"></a>2.5 高阶组件（HOC）</h2><p>高阶组件（<code>HigherOrderComponent</code>，<code>HOC</code>）是 <code>React</code> 中用于复用组件逻辑的一种<strong>高级技巧</strong>。<code>HOC</code> 自身不是 <code>React API</code> 的一部分，它是一种基于 <code>React</code> 的组合特性<strong>而形成的设计模式</strong>。</p><p>具体而言，<strong>高阶组件是参数为组件，返回值为新组件的函数</strong>。也就是说，高阶组件其实就是一个纯函数，它会接受一个组件作为参数，然后返回一个新的组件。</p><p>在官网中给了一个较为复杂的案例来说明这个问题，这里我用一个简单的案例来阐述。比如这里定义<code>Human</code>的类，都具有学习的功能，简单定义为：</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// Human.js</span>import React from <span class="token string">"react"</span><span class="token punctuation">;</span>class <span class="token class-name">Human</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        this<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 用来接收用户通知信息</span>            message<span class="token punctuation">:</span> <span class="token string">'随便看看'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>             <span class="token operator">&lt;</span>div<span class="token operator">></span>                 <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span> this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>message <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>             <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>export default Human<span class="token punctuation">;</span></code></pre><p>比如张三和李四来了，张三喜欢看文学方面的书籍，李四喜欢看计算机相关的书籍。那么对于张三李四，我们就可以这样来写。</p><pre class=" language-clike"><code class="language-clike"><span class="token comment" spellcheck="true">// Human.js</span>import React from <span class="token string">'react'</span>class <span class="token class-name">Human</span> extends <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    this<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>        message<span class="token punctuation">:</span> this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>message <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token string">'随便看看'</span> <span class="token punctuation">:</span> this<span class="token punctuation">.</span>props<span class="token punctuation">.</span>message    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>export const withLearning <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">,</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> class <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>      this<span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用来接收用户通知信息</span>        message<span class="token punctuation">:</span> info<span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//传递属性message</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent message<span class="token operator">=</span><span class="token punctuation">{</span>this<span class="token punctuation">.</span>state<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>export default Human</code></pre><p>那么在<code>index.js</code>文件中进行定义为：</p><pre class=" language-clike"><code class="language-clike"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/Human_v1"</span> component<span class="token operator">=</span><span class="token punctuation">{</span> Human <span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/Human_v2"</span> component<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token function">withLearning</span><span class="token punctuation">(</span>Human<span class="token punctuation">,</span> <span class="token string">"文学"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/Human_v3"</span> component<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token function">withLearning</span><span class="token punctuation">(</span>Human<span class="token punctuation">,</span> <span class="token string">"计算机"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span></code></pre><p>当我们访问对应的链接的时候，就可以看见对应的不同显示效果。这里不再截图。至于关于HOC的其余注意事项，这里不再复述。</p><h2 id="2-6-虚拟DOM"><a href="#2-6-虚拟DOM" class="headerlink" title="2.6 虚拟DOM"></a>2.6 虚拟DOM</h2><p><code>UI</code> 更新需要昂贵的 <code>DOM</code> 操作，而 <code>React</code> 内部使用几种巧妙的技术以便最小化 <code>DOM</code> 操作次数。为了了解什么是虚拟<code>DOM</code>，首先看看传统<code>Web</code>加载处理的流程。</p><ul><li><p>在传统的 <code>Web</code> 应用中，我们往往会把<strong>数据的变化实时地更新到用户界面</strong>中，于是每次数据的微小变动都会引起 <code>DOM</code> 树的重新渲染。</p></li><li><p>虚拟<code>DOM</code>的目的是将所有操作累加起来，<strong>统计计算出所有的变化后，统一更新一次</strong><code>DOM</code>。</p></li></ul><p>当<code>Node</code>节点的更新，虚拟<code>DOM</code>会比较两棵<code>DOM</code>树的区别，保证最小化的<code>DOM</code>操作。比如在<a href="https://react.docschina.org/docs/reconciliation.html" target="_blank" rel="noopener">官网-协调</a>部分提到的<code>Diffing</code>算法：</p><ul><li>当对比两颗树时，<code>React</code> 首先比较两棵树的根节点；</li><li>当根节点为不同类型的元素时，<code>React</code> 会拆卸原有的树并且建立起新的树；</li><li>当比对两个相同类型的 <code>React</code> 元素时，<code>React</code> 会保留 <code>DOM</code> 节点，仅比对及更新有改变的属性；</li><li>在处理完当前节点之后，<code>React</code> 继续对子节点进行递归；</li><li>在默认条件下，当递归 <code>DOM</code> 节点的子元素时，<code>React</code> 会<strong>同时遍历</strong>两个子元素的列表；当产生差异时，生成一个 <code>mutation</code>。</li><li>为了解决匹配过程的性能问题，<code>React</code> 支持 <code>key</code> 属性。当子元素拥有 <code>key</code> 时，<code>React</code> 使用 <code>key</code> 来匹配原有树上的子元素以及最新树上的子元素。这个 <code>key</code> 不需要全局唯一，但在列表中需要保持唯一。</li><li><code>Key</code> 应该具有稳定，可预测，以及列表内唯一的特质。不稳定的 <code>key</code>（比如通过 <code>Math.random()</code> 生成的）会导致许多组件实例和 <code>DOM</code> 节点被不必要地重新创建，这可能导致性能下降和子组件中的状态丢失。</li></ul><p>重新渲染表示在所有组件内调用 <code>render</code> 方法，这不代表 <code>React</code> 会卸载或装载它们。<code>React</code> 只会基于以上提到的规则来决定如何进行差异的合并。</p><h1 id="3-后记"><a href="#3-后记" class="headerlink" title="3. 后记"></a>3. 后记</h1><p>对于React的部分了解的还只是皮毛部分。因为最近还需要写一篇小论文，需要看论文、做实验验证想法，并完成小论文。所以至于在官网提到的静态类型检查、严格模式以及非受控组件等内容，这里就忽略了，之后再补充吧。</p><hr><ul><li><a href="https://blog.csdn.net/qq_26460841/article/details/121046948" target="_blank" rel="noopener">【React Native】从React开始——核心概念</a></li><li><a href="https://blog.csdn.net/qq_26460841/article/details/121099969" target="_blank" rel="noopener">【React Native】从React开始——React Router 基础</a></li><li><a href="https://react.docschina.org/docs/getting-started.html#advanced-concepts" target="_blank" rel="noopener">React 高级指引</a></li><li><a href="https://www.cnblogs.com/hfxm/p/8462159.html" target="_blank" rel="noopener">React项目的打包</a></li><li><a href="https://www.w3school.com.cn/jsref/dom_obj_button.asp" target="_blank" rel="noopener">w3school网站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-107 |  二叉树的层次遍历 II</title>
      <link href="/2021/11/leetcode-107/"/>
      <url>/2021/11/leetcode-107/</url>
      
        <content type="html"><![CDATA[<h2 id="107-二叉树的层次遍历-II"><a href="#107-二叉树的层次遍历-II" class="headerlink" title="107. 二叉树的层次遍历 II"></a>107. 二叉树的层次遍历 II</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。</p><p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,<br><img src="/images/201909/2019-09-13_171509.png" alt><br>返回其自底向上的层次遍历为：：<code>[[15,7],[9,20],[3]]</code></p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>解答了102题，这一题，就相对而言比较简单了。<br>也就是将前面的插入的位置做一个变化，不使用append，而直接插入到列表的首位即可。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrderBottom</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        que <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>que<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            node <span class="token operator">=</span> que<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            root <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            level <span class="token operator">=</span> node<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> level<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>left <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>right <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result</code></pre><p>结果：<br><img src="/images/201909/2019-09-15_125651.png" alt></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>和上面的思想一样，不过修改102的第一种解法。<br>殊途同归。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrderBottom</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        que <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>que<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            size <span class="token operator">=</span> len<span class="token punctuation">(</span>que<span class="token punctuation">)</span>            temp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                root <span class="token operator">=</span> que<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                temp_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">if</span> root<span class="token punctuation">.</span>left <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    que<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> root<span class="token punctuation">.</span>right <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    que<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                size <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span>            result<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> temp_list<span class="token punctuation">)</span>        <span class="token keyword">return</span> result</code></pre><p>结果：<br><img src="/images/201909/2019-09-15_130207.png" alt></p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校招简历</title>
      <link href="/2021/10/resume/"/>
      <url>/2021/10/resume/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>个人简历</title>  <style>  .big-title{font-size: 48px;text-align:center;color: orange;text-shadow: 3px 3px 3px #FF0000;cursor:pointer;}  .code{  background:#F8F8F8;color:#129F56;border-radius:5px;padding:0 3px;  }  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;position:relative;}  .head{width:100%;height:30px;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:1;text-align:left;line-height:30px;}  .time-text,.tag-text{background:#2CAD45;padding:5px;border-radius:15px;color:white;}  .tag{flex:1;text-align:right;line-height:30px;}  .block{background:#EBF8F2;border-left:5px solid #42B983;padding:25px 15px;font-size:18px;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .r-head{display:flex;flex-direction:row;}  .r-head-left{flex: 3;}  .r-head-right{flex: 1;}  .r-head-item-left{flex: 1;font-size: 24px;font-weight:bloder;}  .r-head-item-right{flex: 2;font-size: 24px;font-weight:bloder;}  .r-head-item-item{margin-right: 10px;}  .subtitle{background:#1786F5;padding: 5px 10px;color:white;margin-top: 10px;font-size:19px;}  .hr{margin-top: 8px;height: 8px;background:#1786F5;}  .r-head-item-flex-1{flex:1;}  .r-head-item-flex-2{flex:3;}  .r-head-item-flex-12{flex: 12;}  .dot-big{background:black; width: 10px;height: 10px;margin-top: 10px;border-radius: 5px;margin-left: 10px;}  .font-b{font-weight:bold;font-size: 1rem;}  .font-right{text-align:center;}  .r-final{font-size: 1.2rem; font-weight: bold;line-height:1.5rem;height: 1.5rem;margin-top: 8px;}  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body> <div class="big-title">个人简历</div><div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2021-10-24 20:19:05</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div><!--Block--><div class="block">决定还是记录一笔，记录下以和以后对比。</div><!--Other block--><div class="other"><div class="r-head"><div class="r-head-left">    <div class="r-head">        <div class="r-head-item-left">梦否</div>        <div class="r-head-item-right">求职意向：Android 开发 </div>    </div>    <div class="r-head" style="margin-top: 5px;">        <div class="r-head-item-item">四川南充</div>        <div class="r-head-item-item">|</div>        <div class="r-head-item-item">中共预备党员</div>        <div class="r-head-item-item">|</div>        <div class="r-head-item-item">3999年20月</div>        <div class="r-head-item-item">|</div>        <div class="r-head-item-item">西华大学   &nbsp;&nbsp;硕士二年级</div>    </div>    <div class="r-head">        <div class="r-head-item-item">手机 &#9742;：</div>        <div class="r-head-item-item">(+86)15xxx8989</div>        <div class="r-head-item-item"></div>        <div class="r-head-item-item">邮箱&#9993;：1270563429@qq.com</div>    </div>    <div class="r-head">        <div class="r-head-item-item">个人博客：<a href="https://blog.csdn.net/qq_26460841" target="_blank" rel="noopener">https://blog.csdn.net/qq_26460841</a></div></div><div class="r-head">        <div class="subtitle">教育背景</div></div></div><div class="r-head-right"><img src="/images/avatar.jpg" style="height: 90%;width: 60%;"></div></div><div class="hr"></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-2">西华大学</div>    <div class="r-head-item-flex-2">计算机技术</div>    <div class="r-head-item-flex-2">硕士</div>    <div class="r-head-item-flex-2">2019.09-至今</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-2">防灾科技学院</div>    <div class="r-head-item-flex-2">网络工程</div>    <div class="r-head-item-flex-2">学士</div>    <div class="r-head-item-flex-2">2014.09 - 2018.06</div></div><div class="r-head">    <div class="subtitle">个人技能</div></div><div class="hr"></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">熟悉Java编程语言、数据结构和算法，有良好的编程风格。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">熟悉Android事件分发机制、Handler消息机制。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">熟悉HTTP，TCP/IP协议，对消息推送有一定的认识。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">了解Web前端、微信小程序开发。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">有独立开发客户端程序的经历。</div></div><div class="r-head">    <div class="subtitle">项目经历</div></div><div class="hr"></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1 font-b">        2019.10-2020.05    </div>    <div class="r-head-item-flex-1 font-b">        西华大学信息上报系统    </div>    <div class="r-head-item-flex-1 font-b font-right">        客户端开发    </div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">跟学校宣传部领导确定需求，并设计信息报送逻辑、页面布局、UI设计，协调任务分配，工作进度报告。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">后端采用SpringBoot技术实现后端业务逻辑，并完成部分后台接口开发。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">完成Android客户端布局、及其逻辑功能开发，主要使用了Glide、Okhttp3、HelloChart、JiaoZiVideoPlayer、SwipeMenuListView、SharedPreferences等关键技术。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1 font-b">        2020.05-2020.06    </div>    <div class="r-head-item-flex-1 font-b">        西华大学通识课程评价项目    </div>    <div class="r-head-item-flex-1 font-b font-right">        微信小程序开发    </div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">根据项目需求设计小程序UI、页面布局，实现评教前端页面及逻辑功能。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">使用SpringBoot技术实现后端业务逻辑，负责数据导入和部分数据获取接口编写。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">服务器选型和购买、域名备案、小程序发布与公众号关联等。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">已历经3次测评，目前项目运行良好。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1 font-b">        2020.07-2020.11     </div>    <div class="r-head-item-flex-1 font-b">        西华大学课程评价数据分析项目    </div>    <div class="r-head-item-flex-1 font-b font-right">        Web开发    </div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">该项目是通识课程评价项目的延伸，甲方要分析和可视化评教数据。我们采用echarts做数据可视化，生成散点图、雷达图、盒须图以及词云图。</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">使用SpringBoot技术实现后端业务逻辑。负责前端页面雷达图、盒须图逻辑功能；后端数据导入等相关接口编写。</div></div><div class="r-head">    <div class="subtitle">相关证书</div></div><div class="hr"></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">大学学业奖学金二等、大学院优秀三好学生、研究生学业奖学金三等</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">计算机Office一级、计算机C语言二级</div></div><div class="r-head" style="margin-top:8px;">    <div class="r-head-item-flex-1">        <div class="dot-big"></div>    </div>    <div class="r-head-item-flex-12">英语四级、英语六级</div></div><div class="r-head" style="margin-top:12px;">    <div class="r-head-item-flex-12">部分可供展示项目截图请点击链接查看：<a href="https://baiyazi.github.io/2021/07/xm-01/" target="_blank" rel="noopener">https://baiyazi.github.io/2021/07/xm-01/</a></div></div><div class="hr"></div><div class="r-final">感谢您花时间阅读我的简历，期待能有机会与您共事。</div><div class="hr"></div></div></div><!--Ending--> </body></html>]]></content>
      
      
      <categories>
          
          <category> 研究生日迹本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活备忘录（二）</title>
      <link href="/2021/10/lifes-2/"/>
      <url>/2021/10/lifes-2/</url>
      
        <content type="html"><![CDATA[ <style>    .lifes-row{width:100%;line-height:40px;display:flex;height:40px;margin-top:20px;}    .lifes-col{height:40px;line-height:40px;margin:5px 8px;flex:1;vertical-align:center;display:flex;}    .flag{float:left;width:40px;height:40px;background:red;vertical-align:center;text-align:center;}    .contentst{float:left;height:40px;min-width:144px;line-height:40px;background:blue;padding-left:5px;padding-right:5px;}    .orange{background:#FF763B;color:white;}    .orange-fate{background:#FFD4C2;color:#FF763B;}    .green-fate{background:#B8E09D;color:#1A831A;}    .green{background:#95CEF7;color:white;}    .blue{background:#55ACEE;color:white;}    .blue-fate{background:#9DC9ED;color:#0A62A7;}    .purle{background:#B931B9;color:white;}    .purle-fate{background:#EDA5ED;color:#B931B9;}    .title-h1{font-size: 48px;text-align:center;color: orange;text-shadow: 3px 3px 3px #FF0000;cursor:pointer;} </style> <div class="title-h1">     幸福时刻 </div> <div class="lifes-row">    <div class="lifes-col"><div class="flag orange">✔</div><div class="contentst orange-fate">美美吃顿饭</div></div>    <div class="lifes-col"><div class="flag green">✔</div><div class="contentst green-fate">睡个好觉</div></div>    <div class="lifes-col"><div class="flag blue">✔</div><div class="contentst blue-fate">有事可做</div></div>    <div class="lifes-col"><div class="flag purle">✔</div><div class="contentst purle-fate">生活有奔头</div></div>  </div>  <div class="lifes-row">    <div class="lifes-col"><div class="flag orange">✔</div><div class="contentst orange-fate">付出有回报</div></div>    <div class="lifes-col"><div class="flag green">✔</div><div class="contentst green-fate">紧张而充实</div></div>    <div class="lifes-col"><div class="flag blue">✔</div><div class="contentst blue-fate">不虚度时光</div></div>    <div class="lifes-col"><div class="flag purle">✔</div><div class="contentst purle-fate">能解决温饱</div></div>  </div> ]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 细细碎碎的生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生阶段项目</title>
      <link href="/2021/07/xm-01/"/>
      <url>/2021/07/xm-01/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>Resume</title>  <style>  .code{background:#F7F7F7;color:#CB2D01;border-radius:5px;padding:3px 5px;}  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;position:relative;}  .head{width:100%;font-size: 1.2rem;line-height:2rem;height:2rem;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:1;text-align:center;font-size:1rem;}  .name-text, .tag-text{padding:5px;border-radius:3px;font-weight: bold;}  .name{flex:1;}  .tag{flex:1;text-align:right;}  .post-title{margin-top:10px;margin-bottom:10px;font-size:1.2rem;font-weight: bold;text-align:left;vertical-align:center}  .block{background:#EBF8F2;line-height:1.8rem;border-left:5px solid #42B983;padding:25px 15px;font-size:1rem;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .pages{margin:15px auto;width:888px;padding:15px;background:#EBF8F2;text-align:center;vertical-align:center;}   .pages span{line-height:40px;margin:5px;color:#42B983;width:40px;height:40px;display:inline-block;}   a.link{display:block;text-decoration:none;color:#42B983;width:40px;height:40px;}   a.current-page{color:white; background:#42B983;}   .pages span a:hover{color:white;background:#42B983;}   .xxsb-jt{       display: flex;       flex-direction: row;   }   .xxsb-jt-item{       flex: 1;       margin-left: 5px;       cursor: pointer;   }  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body><div class="container"> <div class="head">    <div class="name"><span class="name-text">项目一：</span>    <span>信息上报系统</span></div>    <div class="time">2019.10-2020.05</div>    <div class="tag"><span class="tag-text">全栈开发</span></div> </div> <div class="post-title">1. 项目介绍</div> <div class="block">     高校舆情事件的及时发现与处理往往是处理校园事件的重点与难点<br>     在该系统中信息层次上报，院辅导员、各部门报送员可以报送信息到上级，在上级宣传部可实现数据统计、预警下发等操作。<br>     具体而言，涉及到以下功能：百度SDK定位、图片和视频上传，视频播放，列表消息侧滑、图片轮播、饼状图、折线图、柱状图、词云、密码重置以及邮箱     找回、自动登录等。     该系统的信息流程如下图所示：    <p style="text-align:center;verticle-align:center;border:8px solid #eee;border-radius:10px;background:#eee;color:#42B983;">    <img src="/images/xiangmu/xxsb-xxl.png" style="width:100%;"><br>    信息上报系统信息流动示意图    </p> </div> <div class="post-title">2. 项目部分截图</div>    <div class="xxsb-jt">        <div class="xxsb-jt-item">            <img src="/images/xiangmu/xxsb-1.jpg" style="width:100%;">        </div>        <div class="xxsb-jt-item">            <img src="/images/xiangmu/xxsb-2.png" style="width:100%;">        </div>        <div class="xxsb-jt-item">            <img src="/images/xiangmu/xxsb-3.png" style="width:100%;">        </div>        <div class="xxsb-jt-item">            <img src="/images/xiangmu/xxsb-4.png" style="width:100%;">        </div>        <div class="xxsb-jt-item">            <img src="/images/xiangmu/xxsb-5.png" style="width:100%;">        </div>    </div>    <div class="xxsb-jt">        <div class="xxsb-jt-item">            <img src="/images/xiangmu/xxsb-6.png" style="width:100%;">        </div>        <div class="xxsb-jt-item">            <img src="/images/xiangmu/xxsb-7.png" style="width:100%;">        </div>        <div class="xxsb-jt-item">            <img src="/images/xiangmu/xxsb-0.png" style="width:100%;">        </div>    </div></div><div class="pages"><span><a href="/2021/07/xm-01/" class="link current-page">1</a></span><span><a href="/2021/07/xm-02/" class="link">2</a></span><span><a href="/2021/07/xm-03/" class="link">3</a></span><span><a href="/2021/07/xm-04/" class="link">4</a></span></div> </body></html>]]></content>
      
      
      
        <tags>
            
            <tag> postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生阶段项目</title>
      <link href="/2021/07/xm-02/"/>
      <url>/2021/07/xm-02/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>Resume</title>  <style>  .code{background:#F7F7F7;color:#CB2D01;border-radius:5px;padding:3px 5px;}  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;position:relative;}  .head{width:100%;font-size: 1.2rem;line-height:2rem;height:2rem;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:1;text-align:center;font-size:1rem;}  .name-text, .tag-text{padding:5px;border-radius:3px;font-weight: bold;}  .name{flex:1;}  .tag{flex:1;text-align:right;}  .post-title{margin-top:10px;margin-bottom:10px;font-size:1.2rem;font-weight: bold;text-align:left;vertical-align:center}  .block{background:#EBF8F2;line-height:1.8rem;border-left:5px solid #42B983;padding:25px 15px;font-size:1rem;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .pages{margin:15px auto;width:888px;padding:15px;background:#EBF8F2;text-align:center;vertical-align:center;}   .pages span{line-height:40px;margin:5px;color:#42B983;width:40px;height:40px;display:inline-block;}   a.link{display:block;text-decoration:none;color:#42B983;width:40px;height:40px;}   a.current-page{color:white; background:#42B983;}   .pages span a:hover{color:white;background:#42B983;}   .xxsb-jt{       display: flex;       flex-direction: row;   }   .xxsb-jt-item{       flex: 1;       margin-left: 5px;       cursor: pointer;   }  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body><div class="container"> <div class="head">    <div class="name"><span class="name-text">项目二：</span>    <span>西华大学通识课程评价</span></div>    <div class="time">2020.05-2020.06</div>    <div class="tag"><span class="tag-text">全栈开发</span></div> </div> <div class="post-title">1. 项目介绍</div> <div class="block">    该项目包括三部分——学生使用的微信小程序、教师使用的 web 管理端、服务器端。教师可以导    入学生选课信息，导出评教信息，学生可以查看自己所选课程并进行评教。<br>    涉及到的技术包括 ： 微信小程序、数据导入导出poi、web 页面（ html+js+css+bootstrap+jQuery ）+ Java后端    （Springboot+mybaits+maven）+mysql 数据库+tomcat。<br><br>    负责项目中的小程序样稿设计、页面开发、图标设计，后台开发（如：数据导入）等。也包括服务器和域名购买、备案、SSL证书配置等。    最终小程序关联在“西华大学教师发展中心”公众号的测评评价栏。<br><br>    该项目开发周期两个月，初次投入使用时有 7000 多名学生，7 门课程，录入20万+数据。现在    西华大学选修通识课程的学生每学期期末评教时都会使用该项目，目前已经有50多门课程，已经经历了三    次评教，未出现重大bug，线上持续运行。<br> </div> <div class="post-title">2. 项目部分截图</div>    <div class="xxsb-jt">        <div class="xxsb-jt-item">            <img src="/images/xiangmu/tskcpj-03.png" style="width:100%;">        </div>    </div>    <div class="xxsb-jt">        <div class="xxsb-jt-item">            <img src="/images/xiangmu/xxkcpj-00.jpg" style="width:100%;">        </div>        <div class="xxsb-jt-item">            <img src="/images/xiangmu/xxkcpj-01.jpg" style="width:100%;">        </div>        <div class="xxsb-jt-item">        </div>        <div class="xxsb-jt-item">        </div>    </div></div><div class="pages"><span><a href="/2021/07/xm-01/" class="link">1</a></span><span><a href="/2021/07/xm-02/" class="link current-page">2</a></span><span><a href="/2021/07/xm-03/" class="link">3</a></span><span><a href="/2021/07/xm-04/" class="link">4</a></span></div> </body></html>]]></content>
      
      
      
        <tags>
            
            <tag> postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生阶段项目</title>
      <link href="/2021/07/xm-03/"/>
      <url>/2021/07/xm-03/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>Resume</title>  <style>  .code{background:#F7F7F7;color:#CB2D01;border-radius:5px;padding:3px 5px;}  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;position:relative;}  .head{width:100%;font-size: 1.2rem;line-height:2rem;height:2rem;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:0.6;text-align:center;font-size:1rem;}  .name-text, .tag-text{padding:5px;border-radius:3px;font-weight: bold;}  .name{flex:1;}  .tag{flex:1;text-align:right;}  .post-title{margin-top:10px;margin-bottom:10px;font-size:1.2rem;font-weight: bold;text-align:left;vertical-align:center}  .block{background:#EBF8F2;line-height:1.8rem;border-left:5px solid #42B983;padding:25px 15px;font-size:1rem;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .pages{margin:15px auto;width:888px;padding:15px;background:#EBF8F2;text-align:center;vertical-align:center;}   .pages span{line-height:40px;margin:5px;color:#42B983;width:40px;height:40px;display:inline-block;}   a.link{display:block;text-decoration:none;color:#42B983;width:40px;height:40px;}   a.current-page{color:white; background:#42B983;}   .pages span a:hover{color:white;background:#42B983;}   .xxsb-jt{       display: flex;       flex-direction: row;   }   .xxsb-jt-item{       flex: 1;       margin-left: 5px;       cursor: pointer;   }  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body><div class="container"> <div class="head">    <div class="name"><span class="name-text">项目三：</span>    <span>西华大学课程评价数据分析项目</span></div>    <div class="time">2020.07-2020.11</div>    <div class="tag"><span class="tag-text">全栈开发</span></div> </div> <div class="post-title">1. 项目介绍</div> <div class="block">    该项目是通识课程评价项目的延伸，甲方需求是分析学生评教数据并可视化呈现出来，涉及两个角色——教师和管理员，可视化主要包括散点图、雷达图、盒须图以及词云图等。教师可以登录系统查看自    己课程的评教结果可视化分析情况、可以修改系统密码；管理者可以查看所有教师的评价结果分析情况，可以设置登录页轮播图、重置教师密码。<br>    本项目系统用Springboot、Mybatis、Maven等进行后端开发    ，前端以 echarts 做数据可视化。<br>    主要完成和甲方沟通、数据批量导入，CRUD数据库查询，以及和上个项目“通识课程评价”的数据进行对接。在页面部分完成雷达图、箱线图、词云等的显示。 </div> <div class="post-title">2. 项目部分截图</div>    <div class="xxsb-jt">        <div class="xxsb-jt-item">            <img src="/images/xiangmu/tssjfx-01.png" style="width:100%;">        </div>    </div></div><div class="pages"><span><a href="/2021/07/xm-01/" class="link">1</a></span><span><a href="/2021/07/xm-02/" class="link">2</a></span><span><a href="/2021/07/xm-03/" class="link current-page">3</a></span><span><a href="/2021/07/xm-04/" class="link">4</a></span></div> </body></html>]]></content>
      
      
      
        <tags>
            
            <tag> postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生阶段项目</title>
      <link href="/2021/07/xm-04/"/>
      <url>/2021/07/xm-04/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>Resume</title>  <style>  .code{background:#F7F7F7;color:#CB2D01;border-radius:5px;padding:3px 5px;}  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;position:relative;}  .head{width:100%;font-size: 1.2rem;line-height:2rem;height:2rem;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:0.6;text-align:center;font-size:1rem;}  .name-text, .tag-text{padding:5px;border-radius:3px;font-weight: bold;}  .name{flex:1;}  .tag{flex:1;text-align:right;}  .post-title{margin-top:10px;margin-bottom:10px;font-size:1.2rem;font-weight: bold;text-align:left;vertical-align:center}  .block{background:#EBF8F2;line-height:1.8rem;border-left:5px solid #42B983;padding:25px 15px;font-size:1rem;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .pages{margin:15px auto;width:888px;padding:15px;background:#EBF8F2;text-align:center;vertical-align:center;}   .pages span{line-height:40px;margin:5px;color:#42B983;width:40px;height:40px;display:inline-block;}   a.link{display:block;text-decoration:none;color:#42B983;width:40px;height:40px;}   a.current-page{color:white; background:#42B983;}   .pages span a:hover{color:white;background:#42B983;}   .xxsb-jt{       display: flex;       flex-direction: row;   }   .xxsb-jt-item{       flex: 1;       margin-left: 5px;       cursor: pointer;   }  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body><div class="container"> <div class="head">    <div class="name"><span class="name-text">项目四：</span>    <span>人机对话测评系统</span></div>    <div class="time">2021.04-2021.05 </div>    <div class="tag"><span class="tag-text">Vue开发</span></div> </div> <div class="post-title">1. 项目介绍</div> <div class="block">    该项目是一个研究课题的结题展示项目，对功能需求没那么大，主要是视频题和文字题的题目展    示以及作答，直接纯前端完成，数据写在 json 里。<br>    涉及到的技术包括：vue+element +express 服务器+pm2+git 控制版本<br> </div> <div class="post-title">2. 项目部分截图</div>    <div class="xxsb-jt">        <div class="xxsb-jt-item">            <img src="/images/xiangmu/rjdh-01.png" style="width:100%;">        </div>    </div>    <div class="xxsb-jt">        <div class="xxsb-jt-item">            <img src="/images/xiangmu/rjdh-02.png" style="width:100%;">        </div>    </div></div><div class="pages"><span><a href="/2021/07/xm-01/" class="link">1</a></span><span><a href="/2021/07/xm-02/" class="link">2</a></span><span><a href="/2021/07/xm-03/" class="link">3</a></span><span><a href="/2021/07/xm-04/" class="link current-page">4</a></span></div> </body></html>]]></content>
      
      
      
        <tags>
            
            <tag> postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生记事本</title>
      <link href="/2021/07/xh-ld-5/"/>
      <url>/2021/07/xh-ld-5/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>日迹记事本（第N周） </title>  <style>  ::selection{background:#000;color:white;font-weight:bolder;}  ::-moz-selection{background:#000;color:white;}  .big-title{text-align:center;vertical-align:center;color:orange;padding-top:20px;font-size:26px;margin-bottom:15px;}  .code{  background:#F8F8F8;color:#129F56;border-radius:5px;padding:0 3px;  }  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;position:relative;}  .head{width:100%;height:30px;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:1;text-align:left;line-height:30px;}  .time-text,.tag-text{background:#2CAD45;padding:5px;border-radius:15px;color:white;}  .tag{flex:1;text-align:right;line-height:30px;}  .post-title{margin-top:10px;margin-bottom:10px;color:#AB3780;font-size:30px;text-align:center;vertical-align:center}  .block{background:#EBF8F2;border-left:5px solid #42B983;padding:25px 15px;font-size:18px;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .pages{margin:20px auto;width:888px;padding:15px;background:#EBF8F2;height:60px;text-align:center;vertical-align:center;}   .pages span{line-height:40px;margin:5px;color:#42B983;   width:40px;height:40px;display:inline-block;border:2px solid #42B983;   }   a.link{display:block;text-decoration:none;color:#42B983;width:40px;height:40px;}   a.current-page{color:white;background:#42B983;}   .pages span a:hover{color:white;background:#42B983;}   .notmore{pointer-events: none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body> <div class="big-title">日迹记事本（第N周）</div><div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2021年7月4日 12:48:06</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">已经不知道过了多少周了</div><div class="block">已经是研二的尾巴了。好久没有来写过这个博客了。感觉确实这两年的时间自己都比较忙。从一开始的无所适从，以及导师的各种嫌弃，最终自己还是挺了过来。研一负责了实验室项目，并顺利完成了该项目的所有工作。指导了两个本科生的毕业设计，从他们什么都不会开始的，一直到最终的论文修改、答辩等。并为十多份本科生毕业设计的论文写了答辩评语，虽然是打白工，但是还是记录下。<br>在这两年里，外接了几个项目，包括小程序、数据分析系统、人机对话系统。也赚了一点钱，确实感觉到原来知识是可以转化为钱的喜悦。但却没有现在带来的冲击大，因为周围的同学有去大厂实习的，确实我也应该冲一波。<br>值的高兴的是，在这两年里，终于加入了中国共产党，称为了其中优秀的一员，以后我会更加努力，积极向党组织靠拢。<br>至于学术上，上个月投了一篇C类的会议，然后期刊导师还在改，虽然4月份就发给他了。其余的两个同门的却已经投了。不管了，现在我的重心在找工作，自己确实最近没怎么弄论文，虽然自己还想再写一篇论文，但是每天为写论文分配的时间确实比较少了。<br>至于找工作，我觉得自己还是需要多尝试看看，先将基础的知识点准备好，现在我的知识储备肯定是不够的。所以接下来的几周，我需要抓紧时间，好好复习，然后再准备把简历写好，就开始投递简历了。<br>希望有大厂要我。加油。<br>再次看到别人的[春招实习经历](https://molunerfinn.com/my-2019-interview-of-summer-internship/)，还是觉得自己挺菜的。加油！<br>确实，和之前的差别，我感觉自己的目标更加明确了，压力也更加大了。</div></div><div class="pages"><span><a href="/2019/10/xh-ld-4/" class="link">上篇</a></span><span><a href="/2021/07/xh-ld-5/" class="link current-page">5/6</a></span><span><a href="/2021/07/xh-ld-6/" class="link">下篇</a></span></div> </body></html>]]></content>
      
      
      <categories>
          
          <category> 研究生日迹本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生记事本</title>
      <link href="/2021/07/xh-ld-6/"/>
      <url>/2021/07/xh-ld-6/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>日迹记事本（研二暑假的尾巴） </title>  <style>  ::selection{background:#000;color:white;font-weight:bolder;}  ::-moz-selection{background:#000;color:white;}  .big-title{text-align:center;vertical-align:center;color:orange;padding-top:20px;font-size:26px;margin-bottom:15px;}  .code{  background:#F8F8F8;color:#129F56;border-radius:5px;padding:0 3px;  }  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;position:relative;}  .head{width:100%;height:30px;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:1;text-align:left;line-height:30px;}  .time-text,.tag-text{background:#2CAD45;padding:5px;border-radius:15px;color:white;}  .tag{flex:1;text-align:right;line-height:30px;}  .post-title{margin-top:10px;margin-bottom:10px;color:#AB3780;font-size:30px;text-align:center;vertical-align:center}  .block{background:#EBF8F2;border-left:5px solid #42B983;padding:25px 15px;font-size:18px;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .pages{margin:20px auto;width:888px;padding:15px;background:#EBF8F2;height:60px;text-align:center;vertical-align:center;}   .pages span{line-height:40px;margin:5px;color:#42B983;   width:40px;height:40px;display:inline-block;border:2px solid #42B983;   }   a.link{display:block;text-decoration:none;color:#42B983;width:40px;height:40px;}   a.current-page{color:white;background:#42B983;}   .pages span a:hover{color:white;background:#42B983;}   .notmore{pointer-events: none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body> <div class="big-title">日迹记事本（研二暑假的尾巴）</div><div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2021年8月25日 16:23:18</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">马上就步入研三了</div><div class="block">时间确实是最不起眼，却又最弥足珍贵的东西。<br>暑假在校准备秋招2个月，大约从6月份就开始准备秋招，到现在差不多快三个月了。但至今还是零Offer。确实比较扎心的，但是生活还是要继续，只能一边舔舐伤口一边强化自己，争取早点有好消息。<br>但这个暑假的学习确实让我沉淀了很多，也磨砺了自己。让自己不再是事件或者任务驱动，变成了自我驱动。让我自己明白了什么事情该去做，更加深刻理解了自己曾经一直知道的那句“想要什么就努力去争取”的含义。<br>生活没有什么是容易的，如果现在你觉得容易，只是因为有人帮你抗下了困难而已。生活终归是需要负重前行，成年人的世界里可不能有那么多矫情。<br>加油！</div></div><!--第二个blog--><div style="height: 10px;">&nbsp;</div><div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2021年10月24日 14:53:39</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">秋招已经接近尾声 </div><div class="block">不知不觉的度过了这近三个月。从8月初开始陆陆续续开始投递简历，大约投递了将近30-40家公司。<br>1. 最终进入面试的共12家，顺利走到最后，确定意向的一共4家。分别是阿里、茄子快传、百度和京东。<br><br>2. 小红书进入三面、小米进入二面，但是都没有通知HR面试，官网进度也没有更新，应该就是凉透了的。<br>3. 对于爱奇艺、顺丰按照流程来说应该还有一轮技术面试，但是也没有通知，官网进度也没有更新，估计也就是凉透了。<br>4. 一面后没通知的有两家公司，分别是度小满和金山办公，同样还在流程中，但是一样没有通知后续的面试。<br>5. 有两家公司明确挂了，那就是网易互娱（二面后挂）和三七互娱（一面后挂），但这两家却是问的最多的，也学到了很多。面试时间也是最久的，都在一个小时或之上。<br>6. 至于涂鸦智能，确实比较迷。因为就一轮技术面试就到了HR面试。。<br></div>说实话，面试到后期自己确实有些懈怠了。激情也远远不如刚开始的时候那么饱满，所以任何东西都需要坚持和长足的规划。<br>自己也很感谢这次秋招，其实自己也学到了很多。包括技术层面上的一些细节的把握和一些学习上的建议等。同样的其实也收获了一些信心！<br>因为阿里和茄子快传在前段时间开奖了，月薪其实超出了自己找工作时候的预期。其实还是挺满足的。<div class="post-title">阿里巴巴录用喜报</div><div class="block">Hi 亲爱的 王xx 同学（其它：5xxx） ：<p>恭喜您顺利通过了阿里巴巴2022届应届生校园招聘的面试，你的学识和素养给我们留下了深刻的印象。我们很高兴的通知您，您已被阿里巴巴录用。</p><p>2021年9月11日（星期六）上午9 : 24</p></div><div class="post-title">来自SHAREit的录用通知</div><div class="block">王xx同学，您好：<p>我谨代表SHAREit，在此荣幸地通知您，您已被我司正式录用。<br>附件为您的录用通知书，请于2021-10-25前确认是否接受该录用通知书，否则将视为放弃。真诚欢迎您的加入。</p><img src="/images/xhld/qz_ly.png" style="width:60%;"></div>至于百度和京东还要等下周。<br><p>但是总的来说，这个月自己确实懈怠了。从下面<a href="https://blog.csdn.net/qq_26460841" target="_blank" rel="noopener">我的CSDN博客</a>每月发文数量可以看出。<br><img src="/images/xhld/csdn_1024.png" style="width:40%;border:1px solid gray;cursor:pointer;"><br>当然有部分原因是放国庆，一部分原因是因为开奖比较高兴。但这确实不应该是自己在学习上懈怠的理由。所以还需要自己下来认真反省。</p></div><div class="pages"><span><a href="/2021/07/xh-ld-5/" class="link">上篇</a></span><span><a href="/2021/07/xh-ld-6/" class="link current-page">6/6</a></span><span><a href="/2019/09/xh-ld-7/" class="link notmore">下篇</a></span></div> </body></html>]]></content>
      
      
      <categories>
          
          <category> 研究生日迹本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K-近邻算法(二)</title>
      <link href="/2019/10/ml-2/"/>
      <url>/2019/10/ml-2/</url>
      
        <content type="html"><![CDATA[<h2 id="海伦约会案例"><a href="#海伦约会案例" class="headerlink" title="海伦约会案例"></a>海伦约会案例</h2><p>数据集可以在：<a href>Jack-Cherish</a>的GIthub上下载，数据格式是这样的：<br><img src="/images/201910/2019-10-04_200811.png"><br>刚刚在百度的时候，看见了这本书的英文原文，居然是免费的！！！<br>地址：<a href="https://www.manning.com/books/machine-learning-in-action" target="_blank" rel="noopener">《Machine Learning in Action》</a><br>在上图中，结果分三类：不喜欢的人、魅力一般的人、极具魅力的人<br>海伦希望自己的约会对象，周一到周五是魅力一般的人，周末是极具魅力的人。<br>故而我们的分类软件，就需要根据她收集的这些数据，将相亲对象归类。</p><h3 id="K-近邻算法步骤"><a href="#K-近邻算法步骤" class="headerlink" title="K-近邻算法步骤"></a>K-近邻算法步骤</h3><p>①收集数据：这里就是上面的文本<br>②准备数据：使用Python解析我们的文本文件<br>③分析数据：使用功能Matplotlib画二维扩散图<br>④训练算法：不适用与k-近邻算法<br>⑤测试算法：使用上面的数据，部分作为测试样本<br>⑥使用算法：输入一些特征数据以判断对方是否是自己喜欢的类型</p><h4 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h4><p>也就是将文本文件中的数据，处理成我们需要的格式的数据。<br>前一个案例中，我们的数据分两个部分：数据样本、数据样本对应标签<br>这里，我们还是这样分。</p><h5 id="下面涉及的Numpy方法"><a href="#下面涉及的Numpy方法" class="headerlink" title="下面涉及的Numpy方法"></a>下面涉及的Numpy方法</h5><ol><li><code>zeros</code>函数，返回来一个给定形状和类型的用0填充的数组<br>案例：<a href="https://www.jianshu.com/p/18ff98f7126b" target="_blank" rel="noopener">numpy.zeros</a><br>①只指定长度<br>如：<code>a = np.zeros(5)</code>， 创建的是一维数组，数据类型是浮点型<br>结果：<code>[ 0.  0.  0.  0.  0.]</code><br>②指定长度和数据类型<br>如：<code>a = np.zeros(5, dtype=int)</code>，创建一维数组，数据类型指定为整形<br>结果：<code>[0 0 0 0 0]</code><br>③创建多维数组，不指定数据类型<br>如：<code>a = np.zeros([1,3])</code>   # 创建一个一行三列的矩阵，默认数据类型是浮点型<br>结果：<code>[[ 0.  0.  0.]]</code><br>④创建多维数组，指定数据类型<code>int</code><br>如：<code>a = np.zeros([1,3], dtype=int)</code><br>结果：<code>[[0 0 0]]</code></li></ol><p>准备数据的代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 创建数据集</span><span class="token keyword">def</span> <span class="token function">createDataset</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 打开文件</span>    file <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取数据</span>    datalines <span class="token operator">=</span> file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 根据数据的行数，创建对应行数和特征值列数的矩阵</span>    returnMat <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>datalines<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3个特征值，对应三列</span>    index <span class="token operator">=</span> <span class="token number">0</span>    classLabelVector <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 每行读取，填装进矩阵returnMat</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> datalines<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 去除首位两端的空格</span>        listFromLine <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span>        returnMat<span class="token punctuation">[</span>index<span class="token punctuation">:</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> listFromLine<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># [index:index+1]只放该index行数据</span>        classLabelVector<span class="token punctuation">.</span>append<span class="token punctuation">(</span>listFromLine<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 我这里存放文本标签</span>        index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> returnMat<span class="token punctuation">,</span> classLabelVector<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    filename <span class="token operator">=</span> <span class="token string">"datingTestSet.txt"</span>    returnMat<span class="token punctuation">,</span> classLabelVector <span class="token operator">=</span> createDataset<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>returnMat<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>classLabelVector<span class="token punctuation">)</span></code></pre><p>测试一下：<br><img src="/images/201910/2019-10-04_205105.png"></p><h4 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h4><p>使用功能Matplotlib画二维扩散图，也即是数据的可视化。<br>这里简单使用，找到<a href="https://www.matplotlib.org.cn/" target="_blank" rel="noopener">官方文档</a></p><h5 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h5><p>Matplotlib是一个Python 2D绘图库，下面就实用 Matplotlib 创建散点图。</p><hr><p><a href="https://www.manning.com/books/machine-learning-in-action" target="_blank" rel="noopener">《Machine Learning in Action》</a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K-近邻算法(一)</title>
      <link href="/2019/10/ml-1/"/>
      <url>/2019/10/ml-1/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>作为本博客的第一篇机器学习的博文，还是比较老套的谈谈“什么是机器学习”<br>在回答这个问题之前，不妨看看在使用机器学习算法开发应用程序的流程：<br>①收集数据<br>②准备输入数据（可理解为处理数据格式）<br>③分析输入数据（确保数据集中没有无效数据）<br>④训练算法<br>⑤测试算法<br>⑥使用算法<br>从上面的简单流程可以看出，机器学习研究的对象是数据，训练算法为基于这些数据产生模型，而使用算法可看做是预测。<br>我的简单理解就是：通过数据集的处理，构造适合该数据集的模型，基于该模型预测数据的类别。</p><h2 id="k-nearest-neighbor-K-NN"><a href="#k-nearest-neighbor-K-NN" class="headerlink" title="k-nearest neighbor, K-NN"></a>k-nearest neighbor, K-NN</h2><p>由Cover和Hart提出；是一种基本分类和回归方法。原理：<br>假设给定一个训练数据集，其中的实例类别已定；<br>对于新的实例（不知道类别），将新数据的每个特征值与训练集中对应的特征进行比较；<br>然后，取前K个最相似的数据，根据其K个最邻近的训练集中的类别，通过投票表决法进行预测。<br>注：通常K不大于20<br>不难看出：k近邻法不具有显示的学习过程，而是利用训练数据集对特征向量空间进行划分，并作为其分类的模型。<br>特点：简单、直观</p><h2 id="怎么判定相似"><a href="#怎么判定相似" class="headerlink" title="怎么判定相似"></a>怎么判定相似</h2><p>待测数据和训练集中的数据如何比较？<br>在这里使用的是距离度量，k近邻模型的特征空间一般是n维实数向量空间，使用的距离是欧氏距离。（当然，也可以是其他的距离度量公式）</p><style>p.mathp{font-family:,Verdana,Sans-serif;font-weight:bolder;}.test{margin-left:-8px;}.biggerq{font-size:26px;}</style><blockquote><p>更一般的有Lp距离：</p></blockquote><p class="mathp">设特征向量X是n维实数向量空间R<sup>n</sup>，x<sub>i</sub>，x<sub>j</sub>∈X，x<sub>i</sub>=(x<sub>i</sub><sup>(1)</sup>，x<sub>i</sub><sup>(2)</sup>，...，x<sub>i</sub><sup>(n)</sup>)<sup>T</sup>，x<sub>j</sub>=(x<sub>j</sub><sup>(1)</sup>,x<sub>j</sub><sup>(2)</sup>，...，x<sub>j</sub><sup>(n)</sup>)<sup>T</sup><br>x<sub>i</sub>，x<sub>j</sub>的L<sub>p</sub>距离定义为L<sub>p</sub>(x<sub>i</sub>，x<sub>j</sub>)=<span class="biggerq">(</span>∑<sup>n</sup><sub class="test">k=1</sub>|x<sub>i</sub><sup>(k)</sup>-x<sub>j</sub><sup>(k)</sup>|<sup>p</sup><span class="biggerq">)</span><sup>1/p</sup>&nbsp;(p≥1)</p><p>当p=1时，称为曼哈顿距离；<br>当p=2时，称为欧氏距离；<br><img src="/images/201910/2019-10-04_162650.png"></p><p>而机器学习实战书中所使用的就是欧氏距离。</p><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>根据已有电影的数据和类别，判断未知电影类别：<br><img src="/images/201910/2019-10-04_163129.png"><br>这里数据集刚好，可以看做是：<br>①点(18，90)到点爱情片(3，104)的距离，计算结果：20.5<br>②点(18，90)到点爱情片(2，100)的距离，计算结果：18.7<br>③点(18，90)到点爱情片(1，81)的距离，计算结果：19.2<br>④点(18，90)到点爱情片(101，10)的距离，计算结果：115.3<br>⑤点(18，90)到点爱情片(99，5)的距离，计算结果：117.4<br>⑥点(18，90)到点爱情片(98，2)的距离，计算结果：118.9<br><img src="/images/201910/2019-10-04_163905.png"><br>排个序：②③①④⑤⑥<br>假定k=3，取三个最相似的数据，也即是②③①对应的类别为：爱情片<br>故而判定未知电影是爱情片。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h4><p>在机器学习中用到线性代数，是为了简化不同的数据点上执行的相同数学运算。将数据表示为矩阵形式，只需要执行简单的矩阵运算而不需要复杂的循环操作。<br>而Numpy就是用来处理矩阵数组的库函数。<br>方法比较多，这里就列出下面用到的一些：</p><ol><li><p>shape函数，查看矩阵或者数组的行数和列数；<br>案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># (2, 2)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>np<span class="token punctuation">.</span>shape<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'tuple'></span></code></pre></li><li><p>tile函数，重复某元素，生成指定行数和列数的矩阵<br>案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npb <span class="token operator">=</span> np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 以[1,2]为重复元素，生成2行3列的矩阵</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#[[1 2 1 2 1 2]</span><span class="token comment" spellcheck="true"># [1 2 1 2 1 2]]</span></code></pre></li><li><p>sum函数，矩阵所有行求和，或者所有列求和，得到一个求和向量<br>案例：</p><pre class=" language-Python"><code class="language-Python">import numpy as npa = np.array([[2, 3, 5], [3, 4, 9]])print(a.sum(axis=0)) # [ 5  7 14]  列相加print(a.sum(axis=1)) # [10 16]     行相加print(a.sum(axis=2)) # Error</code></pre></li><li><p>argsort函数，返回的是数组值从小到大的排列后，对应的索引值（下标）<br>案例：</p></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 直接从小到大排序</span><span class="token comment" spellcheck="true"># 输出值                  排序情况</span><span class="token comment" spellcheck="true"># [5 4 0 1 2 3]  对应值：[-1, 0, 2, 3, 5, 9]</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 按列排 </span><span class="token comment" spellcheck="true"># [[1 0 0]    对应值：[[4, 0, 3]</span><span class="token comment" spellcheck="true">#  [0 1 1]]           [6, 5, 6]]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 按行排</span><span class="token comment" spellcheck="true"># [[1 2 0]    对应值：[[0, 3, 6]</span><span class="token comment" spellcheck="true">#  [0 1 2]]           [4, 5, 6]]</span></code></pre><ol start="5"><li>字典排序，可以用lambda函数，也可以用operator<br>案例：<pre class=" language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># dic.items()   # [('a', 1), ('b', 2), ('f', 5), ('d', 1)]</span><span class="token comment" spellcheck="true"># 按照键进行升序排列</span>a <span class="token operator">=</span> sorted<span class="token punctuation">(</span>dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 正序</span>b <span class="token operator">=</span> sorted<span class="token punctuation">(</span>dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 反序</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [('a', 1), ('b', 2), ('d', 1), ('f', 5)] [('f', 5), ('d', 1), ('b', 2), ('a', 1)]</span><span class="token comment" spellcheck="true"># 按照键进行降序排列</span>a <span class="token operator">=</span> sorted<span class="token punctuation">(</span>dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span>operator<span class="token punctuation">.</span>itemgetter<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 正序</span>b <span class="token operator">=</span> sorted<span class="token punctuation">(</span>dic<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 反序</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [('a', 1), ('d', 1), ('b', 2), ('f', 5)] [('f', 5), ('b', 2), ('a', 1), ('d', 1)]</span></code></pre></li></ol><p>不要忘记传入的是dic.items()。而不是dic。</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><pre class=" language-Python"><code class="language-Python">import numpy as np# 创建数据集def createDataset():    trainSet = np.array([[3,104],[2,100],[1,81],[101,10],[99,5],[98,2]])    # print(trainSet) [[  3 104]    #  [  2 100]    #  [  1  81]    #  [101  10]    #  [ 99   5]    #  [ 98   2]]    # print(type(trainSet)) # numpy.ndarray    labels = ['爱情片','爱情片','爱情片','动作片','动作片','动作片']    return trainSet, labels# 计算欧氏距离def classify(inX, dataSet, labels, k):    """    :param inX:  待判别的数据    :param dataSet:  已有的归类的数据集    :param labels: 归类数据集的标签    :param k: 最后选几个相似的判断    :return: 判断后的类别    """    # 将待判别数据生成和数据集一样的维度，方便统一计算;    # 然后和dataSet做差    diffMat = np.tile(inX, (dataSet.shape[0], 1)) - dataSet    # 根据欧氏距离公式，d^2 = (△x)^2 + (△y)^2计算    # 先各个差平方, 即：(△x)^2  和 (△y)^2    sqDiffMat = diffMat ** 2    # 然后在对应每行相加，即(△x)^2+(△y)^2    sqDistances = sqDiffMat.sum(axis=1) # 0为列，1为行  返回结果向量    # 距离的平方开根号，得到距离    distances = sqDistances ** 0.5    # 距离算完了，按照前面的模拟，就需要排序，记录下标    sortedDisIndicies = np.argsort(distances)  # distances是一个向量，故而这里不指定列还是行    # 下面就是根据K值，取我们排序后的元素，然后用投票表决法，找出元素个数最多的类别    # 字典，统计个数很方便    classCount = {}    for i in range(k):        voteLabel = labels[sortedDisIndicies[i]]        classCount[voteLabel] = classCount.get(voteLabel, 0) + 1    # 统计完成后，根据字典中值的大小，按照从大到小排序    sortedClassCount = sorted(classCount.items(), key=lambda s:s[1], reverse=True)    # 得到的sortedClassCount的数据格式是：[()]    return sortedClassCount[0][0]if __name__ == '__main__':    # 创建数据集    trainSet, labels = createDataset()    # 欲判断的数据    test = [18,90]    # K-近邻算法计算    test_class = classify(test, trainSet, labels, 3)    print(test_class)  # 爱情片</code></pre><p>运行后的结果是爱情片，和我们简单手动计算的一致。<br><img src="/images/201910/2019-10-04_180739.png"></p><p>最后，我做了一个PPT，来简单的说明这个问题。把PPT录屏做成了gif的，如下：<br><img src="/images/201910/wfea2-2zfzy.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生记事本</title>
      <link href="/2019/10/xh-ld-4/"/>
      <url>/2019/10/xh-ld-4/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>日迹记事本（第四周） </title>  <style>  ::selection{background:#000;color:white;font-weight:bolder;}  ::-moz-selection{background:#000;color:white;}  .big-title{text-align:center;vertical-align:center;color:orange;padding-top:20px;font-size:26px;margin-bottom:15px;}  .code{  background:#F8F8F8;color:#129F56;border-radius:5px;padding:0 3px;  }  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;position:relative;}  .head{width:100%;height:30px;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:1;text-align:left;line-height:30px;}  .time-text,.tag-text{background:#2CAD45;padding:5px;border-radius:15px;color:white;}  .tag{flex:1;text-align:right;line-height:30px;}  .post-title{margin-top:10px;margin-bottom:10px;color:#AB3780;font-size:30px;text-align:center;vertical-align:center}  .block{background:#EBF8F2;border-left:5px solid #42B983;padding:25px 15px;font-size:18px;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .pages{margin:20px auto;width:888px;padding:15px;background:#EBF8F2;height:60px;text-align:center;vertical-align:center;}   .pages span{line-height:40px;margin:5px;color:#42B983;   width:40px;height:40px;display:inline-block;border:2px solid #42B983;   }   a.link{display:block;text-decoration:none;color:#42B983;width:40px;height:40px;}   a.current-page{color:white;background:#42B983;}   .pages span a:hover{color:white;background:#42B983;}   .notmore{pointer-events: none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body> <div class="big-title">日迹记事本（第四周）</div><div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-28 08:08:30</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">生活第四周，学期第五周。</div><div class="block">今天是10月2号，昨天是国庆70周年，然后有幸也参加了学校党员代表的集会（PS：有些党员回家了，就替补去的）。<br>还是挺可以的，最后在一个报告厅中观看的阅兵典礼。<br><p style="text-align:center;verticle-align:center;border:8px solid #eee;border-radius:10px;background:#eee;color:#42B983;"><img src="/images/201910/IMG_20191001_100840.jpg" style="width:100%;"><br>奢侈的生活（2019年10月1日）</p><p style="text-align:center;verticle-align:center;border:8px solid #eee;border-radius:10px;background:#eee;color:#42B983;"><img src="/images/201910/IMG_20191001_100844.jpg" style="width:100%;"><br>奢侈的生活（2019年10月1日）</p><p>说说今天吧：<br><br>刚刚看了一个博客，感觉很迷茫了。博客地址：<a href="https://molunerfinn.com/about/" target="_blank" rel="noopener">Blog</a><br><br>还有别人的<a href="https://molunerfinn.com/my-2019-interview-of-summer-internship/" target="_blank" rel="noopener">春招实习经历</a>，别人才研二，就已经找到很好的工作了。<br><br>突然想了想自己，发现自己的发展方向都没有正式确定！<br><br>而，我自己却还想在一个自主的年龄里，过着非自主的生活！！！<br></p></div><div class="other"></div></div><div class="pages"><span><a href="/2019/09/xh-ld-3/" class="link">上篇</a></span><span><a href="/2019/10/xh-ld-4/" class="link current-page">4/6</a></span><span><a href="/2021/07/xh-ld-5/" class="link">下篇</a></span></div> </body></html>]]></content>
      
      
      <categories>
          
          <category> 研究生日迹本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pygame图形贪吃蛇1.0</title>
      <link href="/2019/10/pygame-6/"/>
      <url>/2019/10/pygame-6/</url>
      
        <content type="html"><![CDATA[<pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pygame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pygame图像绘制</title>
      <link href="/2019/10/pygame-5/"/>
      <url>/2019/10/pygame-5/</url>
      
        <content type="html"><![CDATA[<p>pygame使用功能pygame.draw模块来绘制形状。</p><h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h3><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect    <span class="token comment" spellcheck="true"># draw a rectangle</span></code></pre><p>有下面两种用法：</p><pre class=" language-python"><code class="language-python">rect<span class="token punctuation">(</span>surface<span class="token punctuation">,</span> color<span class="token punctuation">,</span> rect<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Rectrect<span class="token punctuation">(</span>surface<span class="token punctuation">,</span> color<span class="token punctuation">,</span> rect<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Rect</code></pre><p>surface：绘图的画布surface对象；<br>color：颜色，三元组形式即可；<br>rect：矩形类，这里给出简单使用，其他的看文档，<a href="https://www.pygame.org/docs/ref/rect.html#pygame.Rect" target="_blank" rel="noopener">传送门</a>。</p><pre class=" language-python"><code class="language-python">Rect<span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> RectRect<span class="token punctuation">(</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> top<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Rect</code></pre><p>也即是，用左边距离，顶部距离，宽度和高度四个属性就可以创建一个矩形框。</p><p>width=0：可选参数width，当取值为0表示填充这个矩形，当取值大于0表示使用边框的厚度，当取值小于0不绘制矩形。<br>这里不妨测试一下，循环中的代码涉及测试部分：</p><pre class=" language-python"><code class="language-python">screen<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>rect<span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>修改width的值，就可以发现当width大于0的时候，该值即为边框的大小。</p><h3 id="绘制多边形"><a href="#绘制多边形" class="headerlink" title="绘制多边形"></a>绘制多边形</h3><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>polygon            <span class="token comment" spellcheck="true">#draw a polygon</span></code></pre><p>它有两种方式实现：</p><pre class=" language-python"><code class="language-python">polygon<span class="token punctuation">(</span>surface<span class="token punctuation">,</span> color<span class="token punctuation">,</span> points<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Rectpolygon<span class="token punctuation">(</span>surface<span class="token punctuation">,</span> color<span class="token punctuation">,</span> points<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Rect</code></pre><p>相信看了上面的画矩形，下面的也就容易理解了。这里就说说points<br>在文档中给了一个例子：[(x1, y1), (x2, y2), (x3, y3)]<br>这里不妨编程看看，同样还是改循环中的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pygame<span class="token keyword">from</span> pygame<span class="token punctuation">.</span>locals <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化</span>    pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>    screen <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pygame<span class="token punctuation">.</span>RESIZABLE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">'Basic Pygame program'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> pygame<span class="token punctuation">.</span>QUIT<span class="token punctuation">:</span>                <span class="token keyword">return</span>        screen<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>polygon<span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：<br><img src="/images/201910/2019-10-01_143446.png"></p><h3 id="绘制圆圈"><a href="#绘制圆圈" class="headerlink" title="绘制圆圈"></a>绘制圆圈</h3><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>circle    <span class="token comment" spellcheck="true"># draw a circle</span></code></pre><p>实现的方法：</p><pre class=" language-python"><code class="language-python">circle<span class="token punctuation">(</span>surface<span class="token punctuation">,</span> color<span class="token punctuation">,</span> center<span class="token punctuation">,</span> radius<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Rectcircle<span class="token punctuation">(</span>surface<span class="token punctuation">,</span> color<span class="token punctuation">,</span> center<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Rect</code></pre><p>字面意思翻译一下，就知道了是中心点和半径参数。<br>比较简单，这里就测试了。</p><h3 id="椭圆"><a href="#椭圆" class="headerlink" title="椭圆"></a>椭圆</h3><p>其实这个单词ellipse我也是不认识的，翻译了一下是椭圆。</p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>ellipse    <span class="token comment" spellcheck="true"># draw an ellipse</span></code></pre><p>它有两种实现：</p><pre class=" language-python"><code class="language-python">ellipse<span class="token punctuation">(</span>surface<span class="token punctuation">,</span> color<span class="token punctuation">,</span> rect<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Rectellipse<span class="token punctuation">(</span>surface<span class="token punctuation">,</span> color<span class="token punctuation">,</span> rect<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Rect</code></pre><p>对于rect参数，这里我就摘取原文的内容：</p><blockquote><p>rect (Rect) – rectangle to indicate the position and dimensions of the ellipse, the ellipse will be centered inside the rectangle and bounded by it</p></blockquote><p>大致意思就是使用矩形来表示椭圆的位置和尺寸，它会画在这个矩形的内部，居中并且以这个矩形为边界。</p><p>不妨用代码测试一下：</p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>ellipse<span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>显示：<br><img src="/images/201910/2019-10-01_144428.png"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>arc    <span class="token comment" spellcheck="true"># draw an elliptical arc</span></code></pre><p>arc –&gt;弧形</p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>line     <span class="token comment" spellcheck="true"># draw a straight line</span></code></pre><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>draw<span class="token punctuation">.</span>lines    <span class="token comment" spellcheck="true"># draw multiple contiguous straight line segments</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pygame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pygame中的Display Modes</title>
      <link href="/2019/10/pygame-3/"/>
      <url>/2019/10/pygame-3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.pygame.org/docs/tut/DisplayModes.html" target="_blank" rel="noopener">原文地址</a></p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>这句话比较意思：</p><blockquote><p>Setting the display mode in pygame creates a visible image surface on the monitor. This surface can either cover the full screen, or be windowed on platforms that support a window manager. The display surface is nothing more than a standard pygame surface object. There are special functions needed in the pygame.display pygame module to control the display window and screen module to keep the image surface contents updated on the monitor.</p></blockquote><p>意思是：在<code>pygame</code>中设置显示模式，会在监视器上创建一个可视的图像<code>surface</code>。<br>这个<code>surface</code>要么是覆盖这个屏幕，要么是一个支持窗口管理平台上以窗口形式显示。<br>这个显示<code>surface</code>也仅仅只是一个标准的<code>pygame</code>  <code>surface</code>对象。<br>在<code>pygame.display</code>  <code>pygame</code>模块中需要有一些特殊的方法去控制显示屏幕和窗口模块，来保持图像<code>surface</code>内容更新在监视器上。</p><h3 id="该如何设置"><a href="#该如何设置" class="headerlink" title="该如何设置"></a>该如何设置</h3><p><code>pygame.display.set_mode((width, height), flags, depth)</code><br>这个显示模式可以在<code>pygame.display</code>模块已经初始化后的任意时刻，以前已经设置过了，再设置一次会改变当前的模式。<br>前面也说过，<code>(width, height)</code>这个元组是必须的；<br><code>depth</code>是这个<code>surface</code>每个像素的请求位，如果<code>depth=8</code>，<code>pygame</code>将会创建一个颜色映射的<code>surface</code>。（我这里百度了一下<a href="https://baike.baidu.com/item/%E4%BD%8D%E6%B7%B1%E5%BA%A6/9676686?fr=aladdin" target="_blank" rel="noopener">位深度</a>）</p><blockquote><p>位深度<br>计算机之所以能够显示颜色，是采用了一种称作“位”( bit ) 的记数单位来记录所表示颜色的数据。当这些数据按照一定的编排方式被记录在计算机中，就构成了一个数字图像的计算机文件。“位”( bit )是计算机存储器里的最小单元，它用来记录每一个像素颜色的值。图像的色彩越丰富，“位”就越多。每一个像素在计算机中所使用的这种位数就是“位深度”。<br>黑白二色的图像是数字图像中最简单的一种，它的每个像素只有1位颜色，位深度是1， 用2的1次幂，两种颜色；<br>8位颜色的图，位深度就是8，用2的8次幂表示，它含有256种颜色 ( 或256种灰度等级 )；</p></blockquote><p><code>depth</code>默认值是<code>0</code>，当设置为<code>0</code>的时候，<code>pygame</code>会选择使用最合适的位深度，通常是和系统当前的位深度一样。<br><code>flags</code>前面也提到过，是控制显示模式的。这里就不说了。</p><h3 id="这些数值是如何确定的"><a href="#这些数值是如何确定的" class="headerlink" title="这些数值是如何确定的"></a>这些数值是如何确定的</h3><p>下面提供了一些方法来收集一些关于屏幕设备的信息，这些方法都必须在<code>display</code>模块初始化完成后调用。<br><code>pygame.display.Info()</code>；<br><code>pygame.display.list_modes(depth, flags)</code> 可以用来找到系统支持的图像模式；<br><code>pygame.display.mode_ok((width, height), flags, depth)</code> 返回最接近你请求的位深度；</p><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><p>由于没有必要持续保持窗口的在线，故而这里没有用到循环来一直保持：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pygame<span class="token keyword">from</span> pygame<span class="token punctuation">.</span>locals <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化</span>    pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>    screen <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">'Basic Pygame program'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>Info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># info</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>mode_ok<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 32</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>list_modes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-text"><code class="language-text">&lt;VideoInfo(hw = 0, wm = 1,video_mem = 0         blit_hw = 0, blit_hw_CC = 0, blit_hw_A = 0,         blit_sw = 0, blit_sw_CC = 0, blit_sw_A = 0,         bitsize  = 32, bytesize = 4,         masks =  (16711680, 65280, 255, 0),         shifts = (16, 8, 0, 0),         losses =  (0, 0, 0, 8),         current_w = 200, current_h = 100>32   # 当前模式最好的位深度[(1366, 768), (1360, 768), (1280, 768), (1280, 720), (1024, 768), (800, 600), (640, 480), (640, 400), (512, 384), (400, 300), (320, 240), (320, 200)]  # 我这里理解为默认全屏状态下，应用可以设置的分辨率列表</code></pre><p>很有意思的是，返回的<code>mode</code>列表，就是我电脑的屏幕的可以调的分辨率。最大是<code>(1366, 768)</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Pygame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pygame中的Color和显示器display</title>
      <link href="/2019/10/pygame-4/"/>
      <url>/2019/10/pygame-4/</url>
      
        <content type="html"><![CDATA[<h2 id="Pygame中的Color"><a href="#Pygame中的Color" class="headerlink" title="Pygame中的Color"></a>Pygame中的Color</h2><p>有下面三种生成<code>Color</code>颜色对象的方式：</p><pre class=" language-python"><code class="language-python">Color<span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ColorColor<span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ColorColor<span class="token punctuation">(</span>color_value<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Color</code></pre><p>也就是常见的<code>RGB</code>、<code>GRBA</code>、<code>Hex number str</code>。<br>下面是得到或者设置值得一些方法：</p><pre class=" language-python"><code class="language-python">pygame<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>r   <span class="token comment" spellcheck="true"># Gets or sets the red value of the Color.</span>pygame<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>g   <span class="token comment" spellcheck="true"># Gets or sets the green value of the Color.</span>pygame<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>b   <span class="token comment" spellcheck="true"># Gets or sets the blue value of the Color.</span>pygame<span class="token punctuation">.</span>Color<span class="token punctuation">.</span>a   <span class="token comment" spellcheck="true"># Gets or sets the alpha value of the Color.</span><span class="token comment" spellcheck="true"># 三个值得取值范围都是0到255</span></code></pre><h2 id="Pygame中的显示器display"><a href="#Pygame中的显示器display" class="headerlink" title="Pygame中的显示器display"></a>Pygame中的显示器display</h2><p>pygame.display模块，用来控制显示窗口和屏幕。<br>下面是一些常见的方法：<br>方法具体的具体解释：<a href="https://www.pygame.org/docs/ref/display.html" target="_blank" rel="noopener">文档地址</a></p><table>  <tr><td>pygame.display.init</td><td>Initialize the display module</td></tr><tr><td>pygame.display.quit</td><td>Uninitialize the display module</td></tr><tr><td>pygame.display.get_init</td><td>Returns True if the display module has been initialized</td></tr><tr><td>pygame.display.set_mode</td><td>Initialize a window or screen for display</td></tr><tr><td>pygame.display.get_surface</td><td>Get a reference to the currently set display surface</td></tr><tr><td>pygame.display.flip</td><td>Update the full display Surface to the screen</td></tr><tr><td>pygame.display.update</td><td>Update portions of the screen for software displays</td></tr><tr><td>pygame.display.get_driver</td><td>Get the name of the pygame display backend</td></tr><tr><td>pygame.display.Info</td><td>Create a video display information object</td></tr><tr><td>pygame.display.get_wm_info</td><td>Get information about the current windowing system</td></tr><tr><td>pygame.display.list_modes</td><td>Get list of available fullscreen modes</td></tr><tr><td>pygame.display.mode_ok</td><td>Pick the best color depth for a display mode</td></tr><tr><td>pygame.display.get_active</td><td>Returns True when the display is active on the display</td></tr><tr><td>pygame.display.set_icon</td><td>Change the system image for the display window</td></tr><tr><td>pygame.display.set_caption</td><td>Set the current window caption</td></tr><tr><td>pygame.display.get_caption</td><td>Get the current window caption</td></tr><tr><td>pygame.display.get_window_size</td><td>Return the size of the window or screen</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> Pygame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pygame中的convert()</title>
      <link href="/2019/10/pygame-2/"/>
      <url>/2019/10/pygame-2/</url>
      
        <content type="html"><![CDATA[<h2 id="convert"><a href="#convert" class="headerlink" title="convert()"></a>convert()</h2><p>还是从案例开始：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pygame<span class="token keyword">from</span> pygame<span class="token punctuation">.</span>locals <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 初始化</span>    pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>    screen <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">'Basic Pygame program'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 填充背景</span>    background <span class="token operator">=</span> pygame<span class="token punctuation">.</span>Surface<span class="token punctuation">(</span>screen<span class="token punctuation">.</span>get_size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    background <span class="token operator">=</span> background<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token punctuation">)</span>      background<span class="token punctuation">.</span>fill<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># RGB</span>    <span class="token comment" spellcheck="true"># 创建文本文本</span>    font <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>Font<span class="token punctuation">(</span>None<span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> font<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">"Hello There"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置字体要放置的矩形框的位置</span>    textpos <span class="token operator">=</span> text<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>    textpos<span class="token punctuation">.</span>centerx <span class="token operator">=</span> background<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>centerx    textpos<span class="token punctuation">.</span>centery <span class="token operator">=</span> background<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>centery    <span class="token comment" spellcheck="true"># 绘制文本到指定位置,画布对象是backgorund, 位置(centerx, centery)</span>    background<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>text<span class="token punctuation">,</span> textpos<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 绘制画布对象background到窗口screen,位置(0,0)</span>    screen<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>background<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 循环，使窗口一直存在，直到发生退出事件</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> pygame<span class="token punctuation">.</span>QUIT<span class="token punctuation">:</span>                <span class="token keyword">return</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上面用到了<code>convert()</code>这个方法，这里解释：<br>直面意思：转变，转换，转化<br>这里转化的是“像素格式”。这是指<code>surface</code>在特定像素中记录各个颜色的特定方式。<br>如果<code>surface</code>格式与显示格式不同，则<code>SDL</code>将不得不在每次转换时即时对其进行转换，这是一个非常耗时的过程。<br>故而在加载图像的时候，应该注意这一点， 不仅仅是这样做：</p><pre class=" language-python"><code class="language-python">surface <span class="token operator">=</span> pygame<span class="token punctuation">.</span>image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'foo.png'</span><span class="token punctuation">)</span></code></pre><p>而应该：</p><pre class=" language-python"><code class="language-python">surface <span class="token operator">=</span> pygame<span class="token punctuation">.</span>image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'foo.png'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>也就是<code>convert()</code>的加入是为了渲染的速度的考虑。那什么又是我们前面提到的<code>surface</code>?</p><h3 id="什么又是surface"><a href="#什么又是surface" class="headerlink" title="什么又是surface"></a>什么又是surface</h3><p>是<code>pygame</code>中最重要的一部分。可以将<code>surface</code>理解为一张空白的纸，也就是一张画布。而且大小任意。</p><ol><li>使用<code>pygame.display.set_mode()</code>创建的<code>surface</code>是特殊的一类，它代表了屏幕对象，无论你在做了什么它都会出现在用户<code>surface</code>上。</li><li>使用<code>image.load()</code>来创建一个包含图像的<code>surface</code>。</li><li>使用<code>font.render()</code>来创建一个包含文本的<code>surface</code>。</li><li>也可以使用<code>Surface()</code>来创建一个不包含任何内容的<code>surface</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Pygame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pygame初探</title>
      <link href="/2019/09/pygame-1/"/>
      <url>/2019/09/pygame-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：<br>为什么上了研究生才开始试着系统学习Pygame?<br>以前总觉得知道上哪去找就好，也就没那么多的追求。在做小游戏的时候，也是遇到不会的就百度，然后用一点时间就简单解决了，感觉良好。<br>但是实际上是，到了如今阶段还是什么都靠百度。可能到 了某个面试的时刻，然后给别人说“Wait a few minutes for me.”。谁他妈会等你。<br>这个世界虽不能说效率至上，时间至高，但却不是每个人都愿意等，不是每个人都等得起。<br>至少，我知道，我自己可能浪费了太多的时间，可能等不起了。</p></blockquote><p>官方文档：<a href="https://www.pygame.org/docs/tut/PygameIntro.html" target="_blank" rel="noopener">Pygame文档</a></p><h2 id="Pygame简介"><a href="#Pygame简介" class="headerlink" title="Pygame简介"></a>Pygame简介</h2><p><code>PyGame</code>是一个用<code>Python</code>写的<code>SDL</code>库。<br><code>SDL（Simple DirectMedia Layer）</code>是一套开放源代码的跨平台多媒体开发库，使用<code>C</code>语言写成。<code>SDL</code>提供了数种控制图像、声音、输出入的函数，让开发者只要用相同或是相似的代码就可以开发出跨多个平台（<code>Linux</code>、<code>Windows</code>、<code>Mac OS X</code>等）的应用软件。目前<code>SDL</code>多用于开发游戏、模拟器、媒体播放器等多媒体应用领域。<br>广泛的用于许多著名的游戏。<br><code>SDL</code>也有其他语言的包装。由于<code>SDL</code>用<code>C</code>语言写成，而且可以很容易在<code>C++</code>下面工作，并且SDL绑定了许多其它的语言，这其中就包括<code>C#</code>,  <code>Java</code>,<code>Objective C</code>,<code>Pascal</code>, <code>Perl</code>, <code>PHP</code>,  <code>Python</code>,<code>Ruby</code>等。<br>包装得比较好的是<code>python</code>语言的<code>pygame</code>。</p><h2 id="从案例学习"><a href="#从案例学习" class="headerlink" title="从案例学习"></a>从案例学习</h2><p>从官网的第一个案例开始，是一个弹球的案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> pygame<span class="token comment" spellcheck="true"># 初始化</span>pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>width<span class="token punctuation">,</span> height <span class="token operator">=</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">240</span>speed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>black <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个图形窗口</span>screen <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> pygame<span class="token punctuation">.</span>RESIZABLE<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 载入图像</span>ball <span class="token operator">=</span> pygame<span class="token punctuation">.</span>image<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"intro_ball.gif"</span><span class="token punctuation">)</span>ballrect <span class="token operator">=</span> ball<span class="token punctuation">.</span>get_rect<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 表示得到一个矩形位置区域。</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 检查是否发生了QUIT事件。</span>    <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> pygame<span class="token punctuation">.</span>QUIT<span class="token punctuation">:</span> sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 球移动，记录新的矩形位置区域</span>    ballrect <span class="token operator">=</span> ballrect<span class="token punctuation">.</span>move<span class="token punctuation">(</span>speed<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果球已移到屏幕外，我们将沿该方向反转速度。</span>    <span class="token keyword">if</span> ballrect<span class="token punctuation">.</span>left <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> ballrect<span class="token punctuation">.</span>right <span class="token operator">></span> width<span class="token punctuation">:</span>        speed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>speed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> ballrect<span class="token punctuation">.</span>top <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">or</span> ballrect<span class="token punctuation">.</span>bottom <span class="token operator">></span> height<span class="token punctuation">:</span>        speed<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>speed<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 通过用黑色RGB颜色填充屏幕来擦除屏幕。</span>    screen<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>black<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 绘制img  ball源文件  ， ballrect目标位置</span>    screen<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>ball<span class="token punctuation">,</span> ballrect<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 更新可见显示</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>init()</code>：在使用<code>pygame</code>做很多事情之前，您需要初始化它。<br><code>quit()</code>：初始化的模块通常还有一个将要清理的<code>quit()</code>函数。 没有必要显式调用这些，因为<code>pygame</code>将在<code>python</code>完成时干净地退出所有初始化的模块。<br><code>display.set_mode(size)</code>：<code>Pygame</code>将图像表示为<code>Surface</code>对象。该<code>display.set_mode()</code>函数创建一个新的<code>Surface</code> 对象，代表了在桌面上出现的那个窗口。您对此<code>Surface</code>所做的任何绘图都将在监视器上显示。它有三个参数：<br>第一个为元祖，代表分 辨率（必须）；<br>第二个显示窗口的设置，有<code>FULLSCREEN</code>（全屏）、<code>RESIZABLE</code>（可变大小）、<code>NOFRAME</code>（无边框）等，其他的略。<br>第三个为色深。<br><code>image.load(&quot;intro_ball.gif&quot;)</code>：加载球图像。<code>Pygame</code>通过<code>SDL_image</code>库支持多种图像格式，包括<code>BMP</code>，<code>JPG</code>，<code>PNG</code>，<code>TGA</code>和<code>GIF</code>。该<code>pygame.image.load()</code>函数返回一个包含球数据的<code>Surface</code>。<code>Surface</code>将保留文件中的所有<code>colorkey</code>或<code>alpha</code>透明度。<br><code>get_rect()</code>：绘制矩形<br><code>while True</code>：如果程序不加循环，那么也就是只载入首次的界面，然后退出。故而在程序中需要有动态或者持久效果，就需要一直循环绘制它。在这个主循环里做的事情就是不停地画背景和更新光标位置，虽然背景是不动的，我们还是需要每次都画它。<br><code>blit(ball, ballrect)</code>：该方法处理图像的绘制 。从根本上说，<code>blit</code>意味着将像素颜色从一个图像复制到另一个图像。我们通过<code>blit</code>方法传递<code>Surface</code> <strong>要复制的源</strong>（<code>ball</code>），以及将源<strong>要放置到目标的位置</strong>（<code>ballrect</code>）。<br><code>display.flip()</code>：更新可见显示。<code>Pygame</code>使用双缓冲区管理显示。完成绘制后，将整个显示曲面更新为屏幕，这使我们在屏幕“曲面”上绘制的所有内容均可见。这种缓冲确保了我们只能在屏幕上看到完全绘制的帧。没有它，用户将在创建时看到屏幕的一半完成部分。</p><p><a href="/images/201909/intro_ball.gif" alt="intro_ball.gif">intro_ball.gif</a></p><hr><p>最后还是给出运行的截图：<br><img src="/images/201909/jfcb8-0f8nv.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Pygame </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪吃蛇</title>
      <link href="/2019/09/game-1/"/>
      <url>/2019/09/game-1/</url>
      
        <content type="html"><![CDATA[<p>暑假就看见了贪吃蛇吃满屏的图片。如下图：<br><img src="/images/201909/20140228083107155.gif"><br>以前写过，然后没成功。<br>昨天用了一个下午写了一个简单的自动判断路径的贪吃蛇，姑且命名为1.0版本。<br>这里简单记录一下。</p><h2 id="计算每个点到食物的距离"><a href="#计算每个点到食物的距离" class="headerlink" title="计算每个点到食物的距离"></a>计算每个点到食物的距离</h2><h3 id="思考1-用轴计算每个格子的代价"><a href="#思考1-用轴计算每个格子的代价" class="headerlink" title="思考1-用轴计算每个格子的代价"></a>思考1-用轴计算每个格子的代价</h3><p>当然，蛇身体节点就不用计算到食物的距离，因为蛇不允许走自己的身体节点位置。<br>下面是简易的图示：<br><img src="/images/201909/2019-09-29_142915.png"><br>如上图，计算了关于食物点的横向和纵向的每个格子到食物的代价。<br>然后，无论是左上角、左下角还是右上角、右下角的计算都是在其前一个格子的代价的基础上加1即可。<br>这里简单举个例子，计算右下角的部分：<br><img src="/images/201909/2019-09-29_150556.png"><br>当然这种情况是比较好的，此时无论是什么方向上的计算，都是一致的。<br>即基于我们的十字轴，从上往下，以及从右往左，每个节点的代价是一样的。<br>我们接下来看看比较极端的情况：<br><img src="/images/201909/2019-09-29_152615.png"><br>在这种情况下，十字轴没有拉通，被蛇给阻挡住了。导致了红色区域节点值得二义性。<br>如何计算红色方框中的面积成为了焦点。因为可以从上往下加一，亦可以从下往上加一或者减一。</p><blockquote><p>假设：<br>我们不妨反过来思考一下，既然红色方框中的难以计算，那么不妨不计算。<br>因为蛇是走最佳路径，总不可能红色方框是最优的（图中直观感觉），假设红色方框在本次中不可达。</p></blockquote><p>画图验证假设，如下图：<br><img src="/images/201909/2019929182108.png"><br>通过上图，最后产生的新的食物节点，但是由于假设不计算红色方框的节点代价，故而此时蛇是找不到该如何走的。故而上面的假设不成立。<br>也就是说用”轴”的方式来计算每个格子的代价是行不通的。<br><strong>Fail</strong></p><h3 id="绘制地图"><a href="#绘制地图" class="headerlink" title="绘制地图"></a>绘制地图</h3><p>到了这里其实我还是没有想出来该如何表示代价格子。<br>为了不在这上面浪费比较多的时间，这里还是用昨天晚上直接坐标计算的方式，忽略二义性，直接计算某个点到食物的距离。这里就不妨绘制出来，姑且叫做地图。<br>计算方式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc_ele</span><span class="token punctuation">(</span>globa<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>globa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>globa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            globa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>abs<span class="token punctuation">(</span>food<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>food<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="详细代码"><a href="#详细代码" class="headerlink" title="详细代码"></a>详细代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">printG</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> g<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%2s"</span> <span class="token operator">%</span> <span class="token string">'■'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%2s"</span> <span class="token operator">%</span> <span class="token string">'●'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%2s"</span> <span class="token operator">%</span> <span class="token string">"□"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># print("%4s" % j, end="")</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">calc_ele</span><span class="token punctuation">(</span>globa<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>globa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>globa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            globa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>abs<span class="token punctuation">(</span>food<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>food<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">load_sanke</span><span class="token punctuation">(</span>globa<span class="token punctuation">,</span> snake<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> snake<span class="token punctuation">:</span>        globa<span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"*"</span><span class="token keyword">def</span> <span class="token function">snake_move</span><span class="token punctuation">(</span>globa<span class="token punctuation">,</span> snake<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> eatfood<span class="token punctuation">(</span>snake<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>        food<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> random_food<span class="token punctuation">(</span>globa<span class="token punctuation">,</span> snake<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        food<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> random_food<span class="token punctuation">(</span>globa<span class="token punctuation">,</span> snake<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        snake<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    head <span class="token operator">=</span> snake<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> head<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> head<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        x1 <span class="token operator">=</span> x<span class="token number">-1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        x1 <span class="token operator">=</span> len<span class="token punctuation">(</span>globa<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">if</span> x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>globa<span class="token punctuation">)</span><span class="token punctuation">:</span>        x2 <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        x2 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> y <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>        y1 <span class="token operator">=</span> y <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        y1 <span class="token operator">=</span> len<span class="token punctuation">(</span>globa<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">if</span> y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>globa<span class="token punctuation">)</span><span class="token punctuation">:</span>        y2 <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        y2 <span class="token operator">=</span> <span class="token number">0</span>    min_cost <span class="token operator">=</span> <span class="token number">99</span>    <span class="token keyword">if</span> <span class="token operator">not</span> globa<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> min_cost <span class="token operator">></span> globa<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>            min_cost <span class="token operator">=</span> globa<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>            point <span class="token operator">=</span> <span class="token punctuation">[</span>x1<span class="token punctuation">,</span> y<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">not</span> globa<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> min_cost <span class="token operator">></span> globa<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">:</span>            min_cost <span class="token operator">=</span> globa<span class="token punctuation">[</span>x2<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>            point <span class="token operator">=</span> <span class="token punctuation">[</span>x2<span class="token punctuation">,</span> y<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">not</span> globa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> min_cost <span class="token operator">></span> globa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token punctuation">:</span>            min_cost <span class="token operator">=</span> globa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span>            point <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y1<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">not</span> globa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> min_cost <span class="token operator">></span> globa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span><span class="token punctuation">:</span>            min_cost <span class="token operator">=</span> globa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y2<span class="token punctuation">]</span>            point <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y2<span class="token punctuation">]</span>    snake<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">eatfood</span><span class="token punctuation">(</span>snake<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> snake<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> food<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">random_food</span><span class="token punctuation">(</span>globa<span class="token punctuation">,</span> snake<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> random    x <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>globa<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>globa<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> node <span class="token keyword">in</span> snake<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">==</span> node<span class="token punctuation">:</span>            x <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>globa<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            y <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>globa<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">eatself</span><span class="token punctuation">(</span>snake<span class="token punctuation">)</span><span class="token punctuation">:</span>    body <span class="token operator">=</span> snake<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> node <span class="token keyword">in</span> body<span class="token punctuation">:</span>        <span class="token keyword">if</span> node <span class="token operator">==</span> snake<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    globa <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    food <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 食物的下标</span>    <span class="token comment" spellcheck="true"># 假定:食物Food,头部Head,尾部Tail</span>    snake <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 计算每个元素的距离,可以以食物为中心，</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> time<span class="token punctuation">,</span>os        calc_ele<span class="token punctuation">(</span>globa<span class="token punctuation">,</span> food<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Score:"</span> <span class="token punctuation">,</span> len<span class="token punctuation">(</span>snake<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span>        load_sanke<span class="token punctuation">(</span>globa<span class="token punctuation">,</span> snake<span class="token punctuation">)</span>        snake_move<span class="token punctuation">(</span>globa<span class="token punctuation">,</span> snake<span class="token punctuation">,</span> food<span class="token punctuation">)</span>        printG<span class="token punctuation">(</span>globa<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.11</span><span class="token punctuation">)</span>        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'cls'</span><span class="token punctuation">)</span></code></pre><p>在命令行输入：python a.py就可以运行成功了。<br>运行算是成功了吧，大致可以吃50个左右的食物。</p><hr><p>后记：<br>本来是想今天优化一下的，但是现在都没有解决如何绘制在蛇存在时候每个格子的代价问题。<br>主要想的是表示了地图，然后用A*、BFS或者DFS任意一种算法来计算，得到最优的前进路线。<br>但是，地图都没有表示出来！！！</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪吃蛇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2019/09/algorithms-2/"/>
      <url>/2019/09/algorithms-2/</url>
      
        <content type="html"><![CDATA[<h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="找最短路径问题"><a href="#找最短路径问题" class="headerlink" title="找最短路径问题"></a>找最短路径问题</h3><p>求<code>A-&gt;G</code>的最短代价路径。<br><img src="/images/201909/2019-09-28_094012.png" style="width:100%;"><br>简单举个例子，从<code>A</code>到<code>B</code>，我们选择不同的路径，就会有不同的代价。这个选择过程叫做决策。<br>这整个问题是一个前后关联具有链状结构的多阶段过程，称为多决策过程。<br>在多决策问题中，各个阶段所采取的决策，依赖于当前状态。一个决策序列就是在变化的状态中产生出来的。<br>将这种解决多阶段决策最优化的过程称之为动态规划。</p><h3 id="动态规划VS分治"><a href="#动态规划VS分治" class="headerlink" title="动态规划VS分治"></a>动态规划VS分治</h3><p>分治算法：将问题划分成互不相交的子问题，递归的求解子问题，然后将他们的解组合起来，以求出原问题的解。<br>动态规划：从上面的图片不难看出，前一阶段的终点是后一阶段的起点，前一阶段的决策变量是后一阶段的状态变量。也就是动态规划应用于子问题重叠的情况，即不同的子问题具有公共的子子问题。子问题的求解是递归，将其划分成更小的子子问题。<br>动态规划一般用来求解最优解的问题。动态规划的最优化概念是在一定条件下，找到一种途径，在各个阶段的效益经过按问题具体性质所确定的运算以后，使得全过程的总效益达到最优。</p><h3 id="动态规划重要特性"><a href="#动态规划重要特性" class="headerlink" title="动态规划重要特性"></a>动态规划重要特性</h3><p>如果说<code>A-&gt;B-&gt;C-&gt;D</code>是<code>A</code>到<code>D</code>最短路线，那么从<code>A</code>到<code>C</code>的最短路线一定是<code>A-&gt;B-&gt;C</code>。<br>也就是说我们可以从终点逐段向始点方向寻找最短路线。<br><img src="/images/201909/2019-09-28_102309.png" style="width:100%;"><br>计算的时候是计算如：<code>f(A,G) = min{d(A, B1) + f(B1, G), d(A, B2) + f(B2, G)}</code><br>的式子，显然<code>f(G, G) = 0</code>， <code>f(F1, G) = 4</code>, <code>f(F2, G) = 3</code><br>不难看出这里最后的计算是从后往前计算，也就是所谓的<strong>逆推解法</strong>。</p><h3 id="逆推求解"><a href="#逆推求解" class="headerlink" title="逆推求解"></a>逆推求解</h3><p>下面就来讲上面的<code>A-&gt;G</code>的最短代价路径问题逆推求解。<br>我们用邻接表结构来存储数据，为了方便对状态表示，我们这里就将A-G编码。</p><style>    .tab-div{border-top:2px solid #000;border-bottom:2px solid #000;}    .tab-div-p{line-height:24px;height:24px;vertical-align:center;text-align:center;}    .tab-div-p span{width:40px;display:inline-block;border-bottom:1px solid #000;}</style><div class="tab-div">    <p class="tab-div-p">    <span>状态</span><span>A</span><span>B1</span><span>B2</span><span>C1</span><span>C2</span><span>C3</span><span>C4</span>    <span>D1</span><span>D2</span><span>D3</span><span>E1</span><span>E2</span><span>E3</span><span>F1</span><span>F2</span><span>G</span>    </p>    <p class="tab-div-p">    <span>编码</span><span>0</span><span>1</span><span>2</span><span>3</span><span>4</span><span>5</span><span>6</span>    <span>7</span><span>8</span><span>9</span><span>10</span><span>11</span><span>12</span><span>13</span><span>14</span><span>15</span>    </p></div><img src="/images/201909/2019-09-28_160327.png" style="width:100%;"><h4 id="首先生成邻接表表示"><a href="#首先生成邻接表表示" class="headerlink" title="首先生成邻接表表示"></a>首先生成邻接表表示</h4><pre class=" language-C"><code class="language-C">#include <iostream>using namespace std;typedef struct Node{    int index; //节点的下标    int value; // 节点的值    struct Node * next; //指向下一个节点的指针 }Node;struct ev{    int value1, value2, weight;}; // 边类型 ev values[] = {    {0,1,5},{0,2,3},    {1,3,1},{1,4,3},    {1,5,6},{2,4,8},    {2,5,7},{2,6,6},    {3,7,6},{3,8,8},    {4,8,5},{4,7,3},{5,8,3},{5,9,3},{6,8,8},    {6,9,4},{7,10,2},{7,11,2},{8,10,1},{8,11,2},{9,11,3},{9,12,3},    {10,13,3},{10,14,5},{11,13,5},{11,14,2},{12,13,6},{12,14,6},{13,15,4},    {14,15,3}};//打印所有节点void testData(Node list[16]){    Node *p = NULL;     int count = 0;    for(int i=0; i<16; i++){        p = list[i].next;        while(p){            count += 1;            cout<<"("<<i<<","<<p->index<<","<<p->value<<")";            p = p->next;        }    }    cout<<"\n一共"<<count<<"个边表节点。"<<endl; }int main(void){    Node *plist[16]; // 指针数组    Node list[16];    for(int i=0; i<16; i++){        list[i].index = 0;        list[i].value = 0;         list[i].next = NULL;        plist[i] = & list[i]; //指针数组初始化     }    //一共30个边表节点    for(int i=0; i<30; i++){        int preNode = values[i].value1, nextNode = values[i].value2, weight = values[i].weight;        //创建边表节点         Node *s = new Node;        s->index = nextNode;        s->value = weight;        //指针连接        s->next = plist[preNode]->next;          plist[preNode]->next = s;     }     //测试一下    testData(list);    return 0;}</code></pre><p>测试结果截图：<br><img src="/images/201909/2019-09-28_182010.png" style="width:100%;"></p><h4 id="然后计算最小代价路径"><a href="#然后计算最小代价路径" class="headerlink" title="然后计算最小代价路径"></a>然后计算最小代价路径</h4><p>接下来就是操作这个数据，求出最小的代价路径。</p><pre class=" language-text"><code class="language-text">#include <iostream>using namespace std;typedef struct Node{    int index; //节点的下标    int value; // 节点的值    struct Node * next; //指向下一个节点的指针 }Node;struct ev{    int value1, value2, weight;}; // 边类型 ev values[] = {    {0,1,5},{0,2,3},    {1,3,1},{1,4,3},    {1,5,6},{2,4,8},    {2,5,7},{2,6,6},    {3,7,6},{3,8,8},    {4,8,5},{4,7,3},{5,8,3},{5,9,3},{6,8,8},    {6,9,4},{7,10,2},{7,11,2},{8,10,1},{8,11,2},{9,11,3},{9,12,3},    {10,13,3},{10,14,5},{11,13,5},{11,14,2},{12,13,6},{12,14,6},{13,15,4},    {14,15,3}};void testData(Node list[16]){    Node *p = NULL;     int count = 0;    for(int i=0; i<16; i++){        p = list[i].next;        while(p){            count += 1;            cout<<"("<<i<<","<<p->index<<","<<p->value<<")";            p = p->next;        }    }    cout<<"\n一共"<<count<<"个边表节点。"<<endl; }int main(void){    Node *plist[16]; // 指针数组    Node list[16];    for(int i=0; i<16; i++){        list[i].index = 0;        list[i].value = 0;         list[i].next = NULL;        plist[i] = & list[i]; //指针数组初始化     }    //一共30个边表节点    for(int i=0; i<30; i++){        int preNode = values[i].value1, nextNode = values[i].value2, weight = values[i].weight;        //创建边表节点         Node *s = new Node;        s->index = nextNode;        s->value = weight;        //指针连接        s->next = plist[preNode]->next;          plist[preNode]->next = s;     } //    testData(list);    //下面就是动态规划求最小代价的路径问题    // f(0,15) = min(d(0,1) + f(1, 15) + d(0, 2) + f(2, 15))     // 由于f(x, 15)，后面的都是15，故而用数组表示即可    int F[16], x[16];    for(int i=0;i<16;i++){        F[i] = 999;    }    F[15] = 0;     for(int i=14; i>=0; i--){        Node* p = plist[i]->next;        // 求i这个节点到G点的最小代价值，得到的结果存入F[i]         int min_val = 999;        // 求i这个节点在最小代价的时候，的下一个节点是哪个？，记录到数组x中x[i]         int min_index = p->index;        while(p){            int nextNode = p->index;            int weight = p->value;            if(weight + F[nextNode] < min_val){                min_val = weight + F[nextNode];                min_index = nextNode;            }            p = p->next;        }        F[i] = min_val;        x[i] = min_index;    }    int i = 0;    cout<&lt;"路径是："<&lt;i;    while(i<15){        cout<&lt;" "<&lt;x[i];        i = x[i];    }    cout<&lt;"\n总代价是："<&lt;F[0]<&lt;endl;    return 0;}</code></pre><p>结果：<br><img src="/images/201909/2019-09-28_182902.png" style="width:100%;"></p><p>这里比较难理解的是关于代价路径。<br>提示一下，因为我们每一次在跟新F[i]的时候，就记录了该节点到G的最优的下一个节点是x[i]。<br>但是，在A-&gt;G的路径中不是所有的节点都用到的，也就是如13号节点，它到G点，毫无疑问在本轮中得出最小的代价为4，此时记录该节点的下一个节点（即15，将15存入x[13]）和代价值4。但是在计算11号节点的时候，遍历所有边表，找到最小代价节点是14，记录14，即x[11] = 14，F[11]=5。<br>同理，计算下面的节点的最小代价路径上的下一个节点：<br>x[11] = 14，x[14] = 15 , x[13] = 15, x[12] = 14<br>故而从11号节点到15号节点是：11-&gt;14-&gt;15<br>可以从我们上面记录的x数组得出：11-&gt;x[11]-&gt;x[x[11]]<br>而12和13节点这里就多余了。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生记事本</title>
      <link href="/2019/09/xh-ld-3/"/>
      <url>/2019/09/xh-ld-3/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>日迹记事本（第三周） </title>  <style>  ::selection{background:#000;color:white;font-weight:bolder;}  ::-moz-selection{background:#000;color:white;}  .big-title{text-align:center;vertical-align:center;color:orange;padding-top:20px;font-size:26px;margin-bottom:15px;}  .code{  background:#F8F8F8;color:#129F56;border-radius:5px;padding:0 3px;  }  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;position:relative;}  .head{width:100%;height:30px;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:1;text-align:left;line-height:30px;}  .time-text,.tag-text{background:#2CAD45;padding:5px;border-radius:15px;color:white;}  .tag{flex:1;text-align:right;line-height:30px;}  .post-title{margin-top:10px;margin-bottom:10px;color:#AB3780;font-size:30px;text-align:center;vertical-align:center}  .block{background:#EBF8F2;border-left:5px solid #42B983;padding:25px 15px;font-size:18px;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .pages{margin:20px auto;width:888px;padding:15px;background:#EBF8F2;height:60px;text-align:center;vertical-align:center;}   .pages span{line-height:40px;margin:5px;color:#42B983;   width:40px;height:40px;display:inline-block;border:2px solid #42B983;   }   a.link{display:block;text-decoration:none;color:#42B983;width:40px;height:40px;}   a.current-page{color:white;background:#42B983;}   .pages span a:hover{color:white;background:#42B983;}   .notmore{pointer-events: none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body> <div class="big-title">日迹记事本（第三周）</div><div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-28 08:08:30</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">生活第三周，学期第四周。</div>过得很快，要不是今天来图书馆，我都没有要写日迹的想法。<br>这几天，感觉自己没必要像个怨妇一样的记录自己的生活，因为我所知道的每个人都是很不容易的生活，都是用自己的努力去改变自己的命运。<br>他们没有抱怨，也不会去抱怨什么。<br>而我，一个马上快24岁的人了，却还是在像一个小学生一样。<br>总想着躲在避风港中，心安理得的享受那些舒适的一切。<br>当然，这是不可能的。因为最近的日子，我已经深刻认识到了自己的错误。<br>不能把别人的施舍或者对你的疼爱，当做你自己放纵的资本。<br>人，始终都是一个独立的个体，要学会自己去处理一些事情，学会自己去面对一些事情，学会自己去调节一些事情，学会自己去思考一些问题。学会独处，也要学会群居。<br><div class="block">感觉自己需要一个计划，无论是现在的生活还是学习的过程。<br>因为在和实验室中同学聊天的时候，通过他们对自己未来的思考，我感觉到了自己一天到晚摸鱼的颓然。<br>以前的确做了比较多的计划，但是都失败告终。也没有很清晰的思考过自己的未来的模样，总是觉得自己是一双破鞋，有人要就可以了。<br>确实不应该这样，尤其是在自己还有一点点的上进心的状态下。<br>所以还是决定给自己制定一个计划，因为如果我还不能很好的执行自己的计划，那么我不知道自己是否还会有未来可言。<br>因为一个从没有思考过未来的人，一个永远也不愿意为自己的未来付出汗水与智慧的人，在我的感觉中是一个永远也谈不上成功的人，是一个永远也不可能成功的人。</div><div class="other">前天偶然在实验室百度资料的时候，看见了Arduino的成果展示。<br>突然有了兴趣，不过还要权衡一下，看看买这个开发板是否合适。也就是看看你最终是否能够做出一些有意义的开发。<br>本来是想把记事本删除了的，看了看前面的两个，觉得还是留着吧。<br>不为别的，有些事情总能给自己教训；写着写着自己心情也能得到释放。</div></div><div class="pages"><span><a href="/2019/09/xh-ld-2/" class="link">上篇</a></span><span><a href="/2019/09/xh-ld-3/" class="link current-page">3/6</a></span><span><a href="/2019/10/xh-ld-4/" class="link">下篇</a></span></div> </body></html>]]></content>
      
      
      <categories>
          
          <category> 研究生日迹本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二项式定理</title>
      <link href="/2019/09/mathematics-1/"/>
      <url>/2019/09/mathematics-1/</url>
      
        <content type="html"><![CDATA[<h2 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h2><blockquote><p>二项式定理（英语：binomial theorem），又称牛顿二项式定理，由艾萨克·牛顿于1664年、1665年间提出。该定理给出两个数之和的整数次幂诸如展开为类似项之和的恒等式。二项式定理可以推广到任意实数次幂，即广义二项式定理。</p></blockquote><img src="/images/201909/2019-09-23_091040.png"><img src="/images/201909/2019-09-23_091124.png"><img src="/images/201909/2019-09-23_091201.png">注：以上图片均来自<a href="https://www.cnblogs.com/wanghai0666/p/10429916.html" target="_blank" rel="noopener">cnblogs-静雅斋数学</a><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>计算二项式系数<span style="font-weight:bolder;font-size:24px;">C<sub>n</sub><sup style="margin-left:-10px;margin-bottom:-2px;">k</sup></span></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calc_bin</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> k <span class="token operator">==</span> n <span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> calc_bin<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">+</span> calc_bin<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>calc_bin<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>calc_bin<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 10</span></code></pre><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>那么，该如何使用动态规划？</p>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-240. 搜索二维矩阵 II</title>
      <link href="/2019/09/leetcode-240/"/>
      <url>/2019/09/leetcode-240/</url>
      
        <content type="html"><![CDATA[<h2 id="240-搜索二维矩阵-II"><a href="#240-搜索二维矩阵-II" class="headerlink" title="240. 搜索二维矩阵 II"></a>240. 搜索二维矩阵 II</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p><p>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。<br>示例:</p><p>现有矩阵 matrix 如下：</p><blockquote><p>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p></blockquote><p>给定 target = 5，返回 true。<br>给定 target = 20，返回 false。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h3><p>思路也就是每次遍历首行和首列，如果矩阵为空或者矩阵首个元素大于target就返回False，如果在首行或者首列中找到了，就返回True。<br>当然，边界条件比较多，我是提交了几次，然后处理的边界。代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type matrix: List[List[int]]        :type target: int        :rtype: bool        """</span>        <span class="token comment" spellcheck="true"># 暴力法</span>        <span class="token comment" spellcheck="true"># 预防[[]]这种情况</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true"># [[],[1,2,3]] 预防这种情况的矩阵</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            subMatrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 不包括首行</span>                temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                    subMatrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>searchMatrix<span class="token punctuation">(</span>subMatrix<span class="token punctuation">,</span> target<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 找顶部的一行和最左边的一列</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span>            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token comment" spellcheck="true"># 截取矩阵，也就是去掉第一行、第一列后的矩阵</span>        subMatrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 不包括首行</span>            temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                subMatrix<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 边界条件 ①矩阵为空，没找到，就返回False</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>subMatrix<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true"># 边界条件 ②矩阵的第一个元素大于target，必然返回False</span>        <span class="token keyword">elif</span> subMatrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>searchMatrix<span class="token punctuation">(</span>subMatrix<span class="token punctuation">,</span> target<span class="token punctuation">)</span></code></pre><p>结果：<br><img src="/images/201909/2019-09-21_153026.png" alt></p><h3 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h3><p>当然还有更加暴力的解法，因为是矩阵，不妨一个元素一个元素的取出来，然后判断。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type matrix: List[List[int]]        :type target: int        :rtype: bool        """</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> matrix<span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># row</span>            <span class="token keyword">for</span> ele <span class="token keyword">in</span> row<span class="token punctuation">:</span>                <span class="token keyword">if</span> ele <span class="token operator">==</span> target<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p>我们看结果：<br><img src="/images/201909/2019-09-21_153451.png" alt></p><h4 id="两种方法对比"><a href="#两种方法对比" class="headerlink" title="两种方法对比"></a>两种方法对比</h4><p><img src="/images/201909/2019-09-21_153540.png" alt><br>虽然前一种暴力法，使用了数据本身有序的特点，做了边界处理，避免了额外的计算。<br>但是，由于使用的是递归的访问方式，也就导致了对内存消耗的加剧。<br>这里也不难记起，以前数据结构中学过的：“递归调用，最好用栈来改进。能用循环解决的就不要用递归。”</p><h3 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h3><p>由于这个题目所处的位置是“分治法”，故而也企图找到一种思路用分治来解决。<br>这里我画了一个简略的图来解释这个过程：<br><img src="/images/201909/2019-09-21_154536.png" alt><br>但是实现比较复杂，这里就不写代码实现了。</p><h3 id="思路四"><a href="#思路四" class="headerlink" title="思路四"></a>思路四</h3><p>在leetcode网站的解答区，看见了这么一个思路，如下图：<br><img src="/images/201909/2019921 160525.gif"></p><img src="/images/201909/2019921 160535.gif"><p>相信，看图也就明白了这个思路的巧妙之处！<br>代码实现也比较简单：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type matrix: List[List[int]]        :type target: int        :rtype: bool        """</span>        <span class="token comment" spellcheck="true"># 以左下角开始</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        row <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        col <span class="token operator">=</span> len<span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        finded <span class="token operator">=</span> <span class="token boolean">False</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token operator">not</span> finded <span class="token operator">and</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">and</span> j <span class="token operator">&lt;</span> col<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">elif</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span>                i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">elif</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p>结果：<br><img src="/images/201909/2019-09-21_161547.png"></p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/search-a-2d-matrix-ii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/search-a-2d-matrix-ii</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-169. 求众数</title>
      <link href="/2019/09/leetcode-169/"/>
      <url>/2019/09/leetcode-169/</url>
      
        <content type="html"><![CDATA[<h2 id="169-求众数"><a href="#169-求众数" class="headerlink" title="169. 求众数"></a>169. 求众数</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于<code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在众数。</p><p>示例 1:</p><blockquote><p>输入: [3,2,3]<br>输出: 3</p></blockquote><p>示例 2:</p><blockquote><p>输入: [2,2,1,1,1,2,2]<br>输出: 2</p></blockquote><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>我的确靠着分治，是没有想出来该如何解决这个问题，主要是最后的基本的比较该如何写。<br>然后看了网上的，比较厉害就是。在进入函数的列表，即使有递归调用，但是函数返回后其本身的数组，在此时是一个东西，也就是可以用遍历比较左右两边哪个众数出现的次数更多。<br>给出博客地址：<a href="https://blog.csdn.net/qq_38595487/article/details/79435799" target="_blank" rel="noopener">地址</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            mid <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            u <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span>            v <span class="token operator">=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span>            left <span class="token operator">=</span> self<span class="token punctuation">.</span>majorityElement<span class="token punctuation">(</span>u<span class="token punctuation">)</span>            right <span class="token operator">=</span> self<span class="token punctuation">.</span>majorityElement<span class="token punctuation">(</span>v<span class="token punctuation">)</span>            <span class="token keyword">if</span> left <span class="token operator">==</span> right<span class="token punctuation">:</span>                <span class="token keyword">return</span> left            <span class="token keyword">else</span><span class="token punctuation">:</span>                left_count <span class="token operator">=</span> right_count <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                    <span class="token keyword">if</span> i <span class="token operator">==</span> left<span class="token punctuation">:</span>                        left_count <span class="token operator">=</span> left_count <span class="token operator">+</span> <span class="token number">1</span>                    <span class="token keyword">elif</span> i <span class="token operator">==</span> right<span class="token punctuation">:</span>                        right_count <span class="token operator">=</span> right_count <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">if</span> left_count <span class="token operator">></span> right_count<span class="token punctuation">:</span>                    <span class="token keyword">return</span> left                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> right</code></pre><p>结果：<br><img src="/images/201909/2019-09-18_202929.png" alt></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>提交后，可以查看别人提交过得代码。这里我随便看了一个。<br>比较好，就是使用python的集合来封装，然后判断出现的次数是否过半。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 封装</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dic<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment" spellcheck="true"># 如果没有，返回次数value=0，否则返回value</span>            <span class="token comment" spellcheck="true"># 求次数最多的</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> dic<span class="token punctuation">:</span>                <span class="token keyword">if</span> dic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> i            <span class="token keyword">return</span> None</code></pre><p>结果：<br><img src="/images/201909/2019-09-18_203632.png" alt></p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/majority-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/majority-element</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 分治法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-23. 合并K个排序链表</title>
      <link href="/2019/09/leetcode-23/"/>
      <url>/2019/09/leetcode-23/</url>
      
        <content type="html"><![CDATA[<h2 id="23-合并K个排序链表"><a href="#23-合并K个排序链表" class="headerlink" title="23. 合并K个排序链表"></a>23. 合并K个排序链表</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p>示例:</p><blockquote><p>输入:<br>[<br>  1-&gt;4-&gt;5,<br>  1-&gt;3-&gt;4,<br>  2-&gt;6<br>]<br>输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</p></blockquote><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>先看看分治法解决问题：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># lists: List[ListNode]</span>        <span class="token comment" spellcheck="true"># rtype: ListNode</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token keyword">elif</span> len<span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            mid <span class="token operator">=</span> len<span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            u<span class="token punctuation">,</span> v <span class="token operator">=</span> lists<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">,</span> lists<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span>            left <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeKLists<span class="token punctuation">(</span>u<span class="token punctuation">)</span>            right <span class="token operator">=</span> self<span class="token punctuation">.</span>mergeKLists<span class="token punctuation">(</span>v<span class="token punctuation">)</span>            <span class="token keyword">if</span> left  <span class="token keyword">is</span> None<span class="token punctuation">:</span>                <span class="token keyword">return</span> right            <span class="token keyword">if</span> right <span class="token keyword">is</span> None<span class="token punctuation">:</span>                <span class="token keyword">return</span> left            <span class="token keyword">return</span> self<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> left_list <span class="token operator">=</span> a        j <span class="token operator">=</span> right_list <span class="token operator">=</span> b        temp_node <span class="token operator">=</span> ptr <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">and</span> j<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> j<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                ptr<span class="token punctuation">.</span>next <span class="token operator">=</span> i                i <span class="token operator">=</span> i<span class="token punctuation">.</span>next                ptr <span class="token operator">=</span> ptr<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                ptr<span class="token punctuation">.</span>next <span class="token operator">=</span> j                j <span class="token operator">=</span> j<span class="token punctuation">.</span>next                ptr <span class="token operator">=</span> ptr<span class="token punctuation">.</span>next        <span class="token keyword">while</span> i <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            ptr<span class="token punctuation">.</span>next <span class="token operator">=</span> i            i <span class="token operator">=</span> i<span class="token punctuation">.</span>next            ptr <span class="token operator">=</span> ptr<span class="token punctuation">.</span>next        <span class="token keyword">while</span> j <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            ptr<span class="token punctuation">.</span>next <span class="token operator">=</span> j            j <span class="token operator">=</span> j<span class="token punctuation">.</span>next            ptr <span class="token operator">=</span> ptr<span class="token punctuation">.</span>next        <span class="token keyword">return</span> temp_node<span class="token punctuation">.</span>next    <span class="token keyword">def</span> <span class="token function">printNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> node        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> i<span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            i <span class="token operator">=</span> i<span class="token punctuation">.</span>next        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    d <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    g <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    h <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    list <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Solution().printNode(Solution().mergeKLists(list))</span>    Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>printNode<span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>merge<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果：<br><img src="/images/201909/2019-09-16_194338.png" alt></p><h3 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h3><p>看了分治法解决问题，这里也可以使用暴力法来解决问题。<br>先将所有的数据读取到一个列表中，然后排序该列表，最后分装成需要的形式。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lists<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># test</span>        node_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> node <span class="token keyword">in</span> lists<span class="token punctuation">:</span>            <span class="token keyword">while</span> node<span class="token punctuation">:</span>                node_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>next        node_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        dummy_head <span class="token operator">=</span> ptr <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> node_list<span class="token punctuation">:</span>            a <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            ptr<span class="token punctuation">.</span>next <span class="token operator">=</span> a            ptr <span class="token operator">=</span> ptr<span class="token punctuation">.</span>next        <span class="token keyword">return</span> dummy_head<span class="token punctuation">.</span>next</code></pre><p>结果：<br><img src="/images/201909/2019-09-16_200113.png" alt></p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-k-sorted-lists</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 困难难度 </tag>
            
            <tag> 分治法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分而治之(divide-and-conquer)</title>
      <link href="/2019/09/algorithms-1/"/>
      <url>/2019/09/algorithms-1/</url>
      
        <content type="html"><![CDATA[<h2 id="分而治之-divide-and-conquer"><a href="#分而治之-divide-and-conquer" class="headerlink" title="分而治之(divide-and-conquer)"></a>分而治之(divide-and-conquer)</h2><h3 id="简单了解"><a href="#简单了解" class="headerlink" title="简单了解"></a>简单了解</h3><p>算法分析与设计：</p><ol><li><strong>分治法的设计思想</strong>：<br> 将一个难以直接解决的大问题，分割成一些规模比较小的相同问题，以便各个击破，分而治之。</li><li><strong>分治策略</strong>是：<br> 对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n比较小则直接解决，否则将其分解为k个规模较小的子问题，<span style="color:red;font-weight:bolder;">这些子问题相互独立且与原问题形式相同</span>，递归地解决这些子问题，然后将各个子问题的解合并得到原问题的解。</li><li>分治法所能解决的问题一般具有以下几个<strong>特征</strong>：<br>①该问题的规模缩小到一定的程度就可以容易地解决；<br>②<strong>该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质；</strong>【能用分治法解决问题的前提】<br>③<strong>利用该问题分解出的子问题的解可以合并为该问题的解</strong>；【能用分治法解决问题的关键】<br>④该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。<br>具备了第一条和第二条特征，而且不具备第三条特征，考虑使用贪心法或动态规划。<br>具备了第一条、第二条特征和第三特征，而不具备第四条特征，一般考虑动态规划。</li><li>三个步骤<br>①分解：<span style="color:blue;font-weight:bolder;">将原问题分解成为若干个规模较小、相互独立、与原问题形式相同的子问题</span>；<br>②解决：<span style="color:orange;font-weight:bolder;">若子问题的规模较小而容易被直接解决则直接解，否则递归地解各个子问题</span>；<br>③合并：将各个子问题的解<span style="color:red;font-weight:bolder;">合并</span>为原问题的解。</li></ol><p>算法基础（第五版）：<br>将一个问题的实例划分为两个或者更多个较小的实例。这些较小的实例通常也是原问题的实例。如果可以轻松获取小问题实例的答案，那么通过合并这些答案，就能得出原实例的答案。如果这些较小的实例还是太大，难以轻松解决，可以将它们划分为再小一些的实例。一直持续这一实例划分过程，直到其规模小的可以轻松获取得到答案为止。</p><p>分而治之是一种<strong>自顶向下(top-down)</strong>的方法。<br>通过向下获得较小的实例的答案，以获得一个问题的答案。不难发现<strong>递归</strong>就是使用这种方法。</p><h3 id="从案例开始"><a href="#从案例开始" class="headerlink" title="从案例开始"></a>从案例开始</h3><p>二分法查找的递归案例，给定数列<code>[5,12,23,36,39,50,62,73,80,99]</code>，查找<code>23</code>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> list<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>list <span class="token operator">=</span> list        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x    <span class="token keyword">def</span> <span class="token function">divide</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>list<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> low <span class="token operator">></span> high<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>x <span class="token operator">==</span> self<span class="token punctuation">.</span>list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> mid        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>x <span class="token operator">></span> self<span class="token punctuation">.</span>list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">.</span>divide<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>这个案例中我遇到的问题：关于<code>if-else</code>分支中的<code>return</code><br>顺这思路写代码的过程中，我就写成了这样：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> self<span class="token punctuation">.</span>x <span class="token operator">==</span> self<span class="token punctuation">.</span>list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> mid<span class="token keyword">elif</span> self<span class="token punctuation">.</span>x <span class="token operator">></span> self<span class="token punctuation">.</span>list<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>low<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>而主观的认为在分支<code>if</code>中我已经清晰的表达了我所需要的意思，也就是我那里是可以返回最终的<code>mid</code>的。<br>但是，却忘记了<strong>函数的自调用，也是函数的调用</strong>，而返回值是返回在函数的额调用处。<br>也就是最终的结果是在<code>elif</code>分支中得到值，但是我并没有接收，也没有返回。<br>故而需要加上<code>return</code></p><h3 id="LeetCode-53题"><a href="#LeetCode-53题" class="headerlink" title="LeetCode 53题"></a>LeetCode 53题</h3><p>最大子段和问题：<br>输入:<code>[-2,1,-3,4,-1,2,1,-5,4]</code>,<br>输出: <code>6</code><br>解释: 连续子数组 <code>[4,-1,2,1]</code> 的和最大，为 <code>6</code>。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>（1）划分：按照平衡子问题的原则，将序列<code>(a1, a2, a3, ... , an)</code>划分成长度相同的两个子序列<code>(a1, a2, a3, ... , a(n/2))</code>和<code>(a(n/2)+1, ... , an)</code>，则会出现下面三种情况：<br>①<code>a1, a2, a3, ... , an</code>的最大子段和 = <code>a1, a2, a3, ... , a(n/2)</code>的最大字段和；<br>②<code>a1, a2, a3, ... , an</code>的最大子段和 = <code>a(n/2)+1, ... , an</code> 的最大字段和；<br>③<code>a1, a2, a3, ... , an</code>的最大子段和 = <code>ai+a(i+1)+ ... + a(j-1)+a(j)，[1≤i≤n/2， n/2+1≤j≤n]</code>的最大字段和；<br>（2）求解子问题：情况①和②递归求解，情况③分别计算：<br><code>s1=max(ai+a(i+1)+ ... + n/2) ， 1≤i≤n/2</code><br><code>s2=max(a(n/2+1)+ ... + an) ，n/2+1≤j≤n</code><br>也就是说必含有两端断口的序列项。<br>（3）合并：取三者之中较大者为原问题的解。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#序列长度为1，直接计算</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#递归计算左半边最大子序和</span>            max_left <span class="token operator">=</span> self<span class="token punctuation">.</span>maxSubArray<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#递归计算右半边最大子序和</span>            max_right <span class="token operator">=</span> self<span class="token punctuation">.</span>maxSubArray<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 对应情况三</span>            <span class="token comment" spellcheck="true">#计算中间的最大子序和，从右到左计算左边的最大子序和，从左到右计算右边的最大子序和，再相加</span>            max_l <span class="token operator">=</span> nums<span class="token punctuation">[</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            tmp <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                max_l <span class="token operator">=</span> max<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> max_l<span class="token punctuation">)</span>            max_r <span class="token operator">=</span> nums<span class="token punctuation">[</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span>            tmp <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                max_r <span class="token operator">=</span> max<span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> max_r<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回三个中的最大值</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>max_right<span class="token punctuation">,</span>max_left<span class="token punctuation">,</span>max_l<span class="token operator">+</span>max_r<span class="token punctuation">)</span></code></pre><p>结果：<br><img src="/images/201909/2019-09-15_201758.png" alt></p><p>这里需要注意的是，递归的效率本来就不高，如果不截取列表，而直接传入原列表到调用，并定义<code>left</code>和<code>right</code>的下表指向，会超时。<br>在<code>leetcode</code>中，我测试了一下，参数用的列表,<code>left</code>下表,<code>right</code>下表，最后两个没通过，超时。</p><h3 id="两路合并-Two-Way-Merging"><a href="#两路合并-Two-Way-Merging" class="headerlink" title="两路合并(Two-Way-Merging)"></a>两路合并(Two-Way-Merging)</h3><p>和上一题的思路类似，过程如下：<br>①划分：将数组划分成两个各自包含<code>n/2</code>个数据项的子数组<br>②求解子问题：解决每个子数组，对其排序。除非数组足够小，否则以递推的方式完成此任务。<br>③合并：将子数组合并为单个有序数组，以合并这些子数组的答案。</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>待排序数组：<code>[27,10,12,20,25,13,15,22]</code>，过程分析<br><img src="/images/201909/2019-09-15_204458.png" alt></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">TwoWayMerging</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"nums into:"</span> <span class="token punctuation">,</span> nums<span class="token punctuation">)</span>        a <span class="token operator">=</span> nums<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 小规模问题，直接求解</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> len<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> a        <span class="token keyword">else</span><span class="token punctuation">:</span>            mid <span class="token operator">=</span> len<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            u <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span>            v <span class="token operator">=</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"U:"</span> <span class="token punctuation">,</span> u<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>TwoWayMerging<span class="token punctuation">(</span>u<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"V:"</span> <span class="token punctuation">,</span> v<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>TwoWayMerging<span class="token punctuation">(</span>v<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 情况三</span>            i <span class="token operator">=</span> j <span class="token operator">=</span> k <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># print("k is :" , k)</span>                <span class="token keyword">if</span> u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                k <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>                k <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>                k <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"nums out:"</span> <span class="token punctuation">,</span> nums<span class="token punctuation">)</span>        <span class="token keyword">return</span> nums<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>TwoWayMerging<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    a  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>    test<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p>观察前面两个案例的代码，不难发现共同点，第三步的合并，其实也是作用在小规模中的，只是在处理的时候，我们就看做是两个整体列表的排序。<br>为了观察效果，不妨把案例代码中的<code>print</code>前面的注释去除掉。<br>然后自己画一个栈，自己模拟一下代码是如何运行的。<br>比如<code>[14,5,6,23]</code>进入，<br><code>u1=[14,5], v1=[6,23]</code><br>然后<code>u1</code>作为下一次的<code>nums</code>，进入<br><code>u2=[14]，v2=[5]</code><br>满足退出条件，然后将<code>v2，u2</code>进行排序，排序完成，记录到<code>nums</code>中，也就是<code>u1</code>，<br>此时<code>u1=[5,14]</code>。<br>同理<code>v1</code>，入栈，进入进行相同的操作，得到<code>v1=[6,23]</code><br>此时完成了对<code>u1,v1</code>的两部分的排序，然后进行这两个的整体排序，记录到初始传入的列表<code>[14,5,6,23]</code>中。<br>最后饭后的也是这个列表的排序结果，即：<code>[5,6,14,23]</code></p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>分治法求一个数组中最大的元素的位置。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>nums <span class="token operator">=</span> nums    <span class="token keyword">def</span> <span class="token function">FindMaxPos</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 小规模直接得结果</span>        <span class="token keyword">if</span> low <span class="token operator">==</span> high<span class="token punctuation">:</span>            <span class="token keyword">return</span> low        <span class="token keyword">else</span><span class="token punctuation">:</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            left_index <span class="token operator">=</span> self<span class="token punctuation">.</span>FindMaxPos<span class="token punctuation">(</span>low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>            right_index <span class="token operator">=</span> self<span class="token punctuation">.</span>FindMaxPos<span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>nums<span class="token punctuation">[</span>left_index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>nums<span class="token punctuation">[</span>right_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> right_index            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> left_index<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">205</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>Solution<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>FindMaxPos<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 4</span></code></pre><p>上面的案例比较简单，不妨看看LeetCode中的分治题目。<br><a href="/2019/09/leetcode-23/">leetcode 23题</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分而治之 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-103 | 二叉树的锯齿形层次遍历</title>
      <link href="/2019/09/leetcode-103/"/>
      <url>/2019/09/leetcode-103/</url>
      
        <content type="html"><![CDATA[<h2 id="103-二叉树的锯齿形层次遍历"><a href="#103-二叉树的锯齿形层次遍历" class="headerlink" title="103. 二叉树的锯齿形层次遍历"></a>103. 二叉树的锯齿形层次遍历</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。<br>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,<br><img src="/images/201909/2019-09-13_171509.png" alt><br>返回其自底向上的层次遍历为：：<code>[[3],[20,9],[15,7]]</code></p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>解答了102题和107题，这一题，思路就来了。<br>还是位置变化。我们需要一个标记，确定是头插还是尾插。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        que <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>que<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            size <span class="token operator">=</span> len<span class="token punctuation">(</span>que<span class="token punctuation">)</span>            temp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            flag <span class="token operator">=</span> <span class="token operator">not</span> flag            <span class="token keyword">while</span> size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                root <span class="token operator">=</span> que<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                    temp_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    temp_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">if</span> root<span class="token punctuation">.</span>left <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    que<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> root<span class="token punctuation">.</span>right <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    que<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                size <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_list<span class="token punctuation">)</span>        <span class="token keyword">return</span> result</code></pre><p>结果：<br><img src="/images/201909/2019-09-15_131248.png" alt></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>和上面的思想一样，殊途同归。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        que <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>que<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            ele <span class="token operator">=</span> que<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            root <span class="token operator">=</span> ele<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            level <span class="token operator">=</span> ele<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> level<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                flag <span class="token operator">=</span> <span class="token operator">not</span> flag            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                result<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>left <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>right <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result</code></pre><p>结果：<br><img src="/images/201909/2019-09-15_132101.png" alt></p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/submissions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/submissions/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活备忘录（一）</title>
      <link href="/2019/09/lifes-1/"/>
      <url>/2019/09/lifes-1/</url>
      
        <content type="html"><![CDATA[ <style>    .lifes-row{width:100%;line-height:40px;display:flex;height:40px;margin-top:20px;}    .lifes-col{height:40px;line-height:40px;margin:5px 8px;flex:1;vertical-align:center;display:flex;}    .flag{float:left;width:40px;height:40px;background:red;vertical-align:center;text-align:center;}    .contentst{float:left;height:40px;min-width:144px;line-height:40px;background:blue;padding-left:5px;padding-right:5px;}    .orange{background:#FF763B;color:white;}    .orange-fate{background:#FFD4C2;color:#FF763B;}    .green-fate{background:#B8E09D;color:#1A831A;}    .green{background:#95CEF7;color:white;}    .blue{background:#55ACEE;color:white;}    .blue-fate{background:#9DC9ED;color:#0A62A7;}    .purle{background:#B931B9;color:white;}    .purle-fate{background:#EDA5ED;color:#B931B9;}    .title-h1{font-size: 48px;text-align:center;color: orange;text-shadow: 3px 3px 3px #FF0000;cursor:pointer;} </style>  <div class="title-h1">     幸福时刻 </div> <div class="lifes-row">    <div class="lifes-col"><div class="flag orange">✔</div><div class="contentst orange-fate">美美吃顿饭</div></div>    <div class="lifes-col"><div class="flag green">✔</div><div class="contentst green-fate">睡个好觉</div></div>    <div class="lifes-col"><div class="flag blue">✔</div><div class="contentst blue-fate">有事可做</div></div>    <div class="lifes-col"><div class="flag purle">✔</div><div class="contentst purle-fate">生活有奔头</div></div>  </div>  <div class="lifes-row">    <div class="lifes-col"><div class="flag orange">✔</div><div class="contentst orange-fate">付出有回报</div></div>    <div class="lifes-col"><div class="flag green">✔</div><div class="contentst green-fate">紧张而充实</div></div>    <div class="lifes-col"><div class="flag blue">✔</div><div class="contentst blue-fate">不虚度时光</div></div>    <div class="lifes-col"><div class="flag purle">✔</div><div class="contentst purle-fate">能解决温饱</div></div>  </div> ]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 细细碎碎的生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-102 | 二叉树的层次遍历</title>
      <link href="/2019/09/leetcode-102/"/>
      <url>/2019/09/leetcode-102/</url>
      
        <content type="html"><![CDATA[<h2 id="102-二叉树的层次遍历"><a href="#102-二叉树的层次遍历" class="headerlink" title="102 . 二叉树的层次遍历"></a>102 . 二叉树的层次遍历</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。</p><p>例如:<br>给定二叉树: [3,9,20,null,null,15,7],<br><img src="/images/201909/2019-09-13_171509.png" alt><br>返回其层次遍历结果：<code>[[3],[9,20],[15,7]]</code></p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>数据结构中也学过，用到队列这种数据结构来处理。<br>其过程就是访问根，将左右节点加入队列，然后直到队列为空。<br>由于每一层的节点需要封装到一个列表，故而我们需要有一个标记，来判断当前层是否遍历完毕，然后再开启下一层。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        que <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>que<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            size <span class="token operator">=</span> len<span class="token punctuation">(</span>que<span class="token punctuation">)</span>            temp_que <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> size<span class="token punctuation">:</span>                root <span class="token operator">=</span> que<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                temp_que<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                <span class="token keyword">if</span> root<span class="token punctuation">.</span>left <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    que<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>                <span class="token keyword">if</span> root<span class="token punctuation">.</span>right <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                    que<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>                size <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_que<span class="token punctuation">)</span>        <span class="token keyword">return</span> result</code></pre><p>结果：<br><img src="/images/201909/2019-09-14_162221.png" alt></p><h3 id="自定义一个新函数"><a href="#自定义一个新函数" class="headerlink" title="自定义一个新函数"></a>自定义一个新函数</h3><p>做题的时候，总是局限于给定的函数，觉得就该在这个方法内完成。<br>的确，在处理层数的时候，用递归，并且传入level，层数是来自父节点，也就是递归的前一次调用。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        levels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> levels        <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span>level<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>levels<span class="token punctuation">)</span><span class="token operator">==</span>level<span class="token punctuation">:</span>                levels<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            levels<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                helper<span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> node<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                helper<span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>level<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        helper<span class="token punctuation">(</span>root<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> levels</code></pre><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>也是记录层数信息，但是充分利用列表下标的特性</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode:</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">:</span> TreeNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        levels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> levels        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        que <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 第0层</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>que<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            el <span class="token operator">=</span> que<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            root <span class="token operator">=</span> el<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            level <span class="token operator">=</span> el<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> level<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            result<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>left <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>right <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                que<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result</code></pre><p>上面不仅下标处理很好，对于level的处理也是很妙。<br>类似临时变量level<br>结果：<br><img src="/images/201909/2019-09-15_093029.png" alt></p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-level-order-traversal</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生记事本</title>
      <link href="/2019/09/xh-ld-2/"/>
      <url>/2019/09/xh-ld-2/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>日迹记事本（第二周）</title>  <style>  .big-title{text-align:center;vertical-align:center;color:orange;padding-top:20px;font-size:26px;margin-bottom:15px;}  .code{  background:#F8F8F8;color:#129F56;border-radius:5px;padding:0 3px;  }  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;position:relative;}  .head{width:100%;height:30px;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:1;text-align:left;line-height:30px;}  .time-text,.tag-text{background:#2CAD45;padding:5px;border-radius:15px;color:white;}  .tag{flex:1;text-align:right;line-height:30px;}  .post-title{margin-top:10px;margin-bottom:10px;color:#AB3780;font-size:30px;text-align:center;vertical-align:center}  .block{background:#EBF8F2;border-left:5px solid #42B983;padding:25px 15px;font-size:18px;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .pages{margin:20px auto;width:888px;padding:15px;background:#EBF8F2;height:60px;text-align:center;vertical-align:center;}   .pages span{line-height:40px;margin:5px;color:#42B983;   width:40px;height:40px;display:inline-block;border:2px solid #42B983;   }   a.link{display:block;text-decoration:none;color:#42B983;width:40px;height:40px;}   a.current-page{color:white;background:#42B983;}   .pages span a:hover{color:white;background:#42B983;}   .notmore{pointer-events: none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body> <div class="big-title">日迹记事本（第二周）</div><div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-20 19:55:00</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">周五了</div>这段时间都没有记录，并不是说没有什么值得记录的。也不是很忙。<br>而是自己找不到勇气来记录。<br>感觉最近的一段时间都过得比较糟糕。<br>。。。<br>至于糟糕的经历就没必要记录了，因为不是所有的“失败”都有价值。<br>或者说，糟糕的东西是需要被提醒，但不需要时刻记起。<br><div class="block">这几天的经历，让自己感觉对自己的未来充满了忧虑与茫然。<br>这几天，我N多次问自己，或许也是心里问上帝。问我的路又在何方？<br>很焦虑吗？我不知道，但是心里很难受。不知道自己以后又可以干什么。<br>几个周二的时候，参加的学校的助学活动（观众），看了节目中的VCR和领导的介绍，以及社会各大公司的参与。当时我的确热血沸腾了，我当时就决定了以后自己又能力了也帮助像我这样的人，给他们一个好的学习平台，尽自己的努力，为那些充满激情、斗志的花朵添一点自己的力量。<br><p style="text-align:center;verticle-align:center;border:8px solid #eee;border-radius:10px;background:#eee;color:#42B983;"><img src="/images/201909/IMG_20190917_151341.jpg" style="width:100%;"><br>学校助学会议（2019-09-17）</p><br>但是，接下了的几天，发现我连目前的日子都过不好，我对自己的前途也感到迷茫，对于未来，我不知道，对于现在，我似乎又没把握住。<br>我是一个无趣的人，或者叫做“伪学习者”，我不喜欢学习和思考，但是父母把我送到了研究生，也就注定了，我却不能像他们那一辈那样北朝黄土面朝天的生活，因为那样会让他们脸上抹黑。当然，自己也不愿意回到那样的生活。因为体验过、生活过，那样的生活让我局促不安，很惶恐。看不到我想要的未来。<br>也就注定了自己需要找一个“体面”的工作。<br>说实话，我对于什么是一个体面的工作，是没有任何的概念的。<br>。。。。。。。。<br>都不知道自己在说些什么了。<br></div><div class="other">总之，无论接下来的日子如何，都要坚定自己的方向，努力学习专业技能。<br>毕业了，却再也不能像本科那样，中规中矩的毕业。<br>那样的人生和没来到这个世界却是没有差别的。<br>当然，既然决定了未来当一个助人者，就应该好好规划自己的未来，至少要能找个好工作，有稳定的收入，然后才有能力，有精力去组织大家一起为贫困地区添砖加瓦。<br></div></div><div class="pages"><span><a href="/2019/09/xh-ld-1/" class="link">上篇</a></span><span><a href="/2019/09/xh-ld-2/" class="link current-page">2/6</a></span><span><a href="/2019/09/xh-ld-3/" class="link">下篇</a></span></div> </body></html>]]></content>
      
      
      <categories>
          
          <category> 研究生日迹本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-70 | 爬楼梯</title>
      <link href="/2019/09/leetcode-70/"/>
      <url>/2019/09/leetcode-70/</url>
      
        <content type="html"><![CDATA[<h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a>70. 爬楼梯</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br>注意：给定 n 是一个正整数。</p><blockquote><p>示例 1：<br>输入： 2<br>输出： 2<br>解释： 有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶</li></ol></blockquote><blockquote><p>示例 2：<br>输入： 3<br>输出： 3<br>解释： 有三种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ol></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p><a href="https://blog.csdn.net/qq_38595487/article/details/79686081" target="_blank" rel="noopener">原文地址</a>。先来张图：<br><img src="/images/201909/2019-09-12_211949.png" alt><br>也就是总体可以是由每一个重复的单元构成的。<br>观察也不难看出这个情况类似于斐波拉契数列，下面就来代码实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>climbStairs<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>climbStairs<span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span>     </code></pre><p>由于是递归的原因，这里超时了。<br><img src="/images/201909/2019-09-13_145016.png" alt></p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>也就是根据这个数列的特性，只需要两个指针来保存数据值。如下图：<br><img src="/images/201909/2019-09-13_150125.png" alt></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># f(n) = f(n-1) + f(n-2)</span>        <span class="token comment" spellcheck="true"># f(1) = 1, f(2) = 2 , f(3) = 3, f(4)=5, f(5)=8</span>        a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> b            b <span class="token operator">=</span> a <span class="token operator">+</span> b            a <span class="token operator">=</span> temp        <span class="token keyword">return</span> b</code></pre><p>结果：<br><img src="/images/201909/2019-09-13_150307.png" alt></p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/climbing-stairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/climbing-stairs</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-69 | x的平方根</title>
      <link href="/2019/09/leetcode-69/"/>
      <url>/2019/09/leetcode-69/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>实现 <code>int sqrt(int x)</code> 函数。<br>计算并返回 <code>x</code> 的平方根，其中<code>x</code> 是非负整数。<br>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><blockquote><p>示例 1:<br>输入: 4<br>输出: 2</p></blockquote><blockquote><p>示例 2:<br>输入: 8<br>输出: 2<br>说明: 8 的平方根是 2.82842…,<br>     由于返回类型是整数，小数部分将被舍去。</p></blockquote><h2 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h2><h3 id="暴力解决问题"><a href="#暴力解决问题" class="headerlink" title="暴力解决问题"></a>暴力解决问题</h3><p>暴力解决，遍历一遍<code>[1,x]</code>，然后计算<code>i*i==x?</code>，当然由于是整除，故而需要记录前一个位置的i值，当<code>i*i&gt;x</code>时，返回<code>i-1</code>。<br>当然，这种方法不可取。会超时。</p><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>很巧妙，网上别个用了二分法，就把数据从O(n)级别降到了O(log2(n))级别。具体的实现如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x        left <span class="token operator">=</span> <span class="token number">1</span>        right <span class="token operator">=</span> x        mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> mid <span class="token operator">==</span> x <span class="token operator">//</span> mid<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 整除，而不是乘</span>                <span class="token keyword">return</span> mid            <span class="token keyword">elif</span> mid <span class="token operator">></span> x <span class="token operator">//</span> mid<span class="token punctuation">:</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">return</span> mid</code></pre><p>至于为什么用整除，而不是用乘法运算，其实也不难理解，这里用两个案例说话：<br><code>5</code>  <code>sqrt</code>  <code>=&gt;</code>  <code>2</code>  而  <code>2 * 2  =  4</code>，还需要进一步判断(<code>2*2&lt;5  &amp;&amp; 3*3&gt;5</code>)才能确定是2<br><code>2 = 5 // 2</code>  完美成立。<br>故而用整除还是比较完美。</p><p>结果：<br><img src="/images/201909/2019-09-12_112231.png" alt></p><h3 id="牛顿迭代法"><a href="#牛顿迭代法" class="headerlink" title="牛顿迭代法"></a>牛顿迭代法</h3><p>我这里给出<a href="https://blog.csdn.net/weixin_42130471/article/details/82730562" target="_blank" rel="noopener">原文博客链接</a>，下面我弄成了图片的，方便理解：<br><img src="/images/201909/2019-09-12_192406.png" alt></p><p>思路很清晰，这里不妨就来实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 取x0 = x</span>        <span class="token comment" spellcheck="true"># X[i]=X[i-1]/2 + t/(2 * X[i-1])</span>        x0 <span class="token operator">=</span> t <span class="token operator">=</span> x        <span class="token keyword">while</span> abs<span class="token punctuation">(</span>x0<span class="token operator">*</span>x0 <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.000001</span><span class="token punctuation">:</span>            x0 <span class="token operator">=</span> x0 <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> t <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> x0<span class="token punctuation">)</span>        <span class="token keyword">return</span> int<span class="token punctuation">(</span>x0<span class="token punctuation">)</span></code></pre><p>结果：<br><img src="/images/201909/2019-09-12_193337.png" alt></p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/sqrtx" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sqrtx</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 二分法 </tag>
            
            <tag> 牛顿迭代法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-53 | 最大子序和</title>
      <link href="/2019/09/leetcode-53/"/>
      <url>/2019/09/leetcode-53/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><blockquote><p><span>示例：</span><br>输入: [-2,1,-3,4,-1,2,1,-5,4],<br>输出: 6<br>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</p></blockquote><blockquote><blockquote><p><span>进阶：</span><br>如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。</p></blockquote></blockquote><h2 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h2><p>我没有思路，然后百度了一下，看见<a href="https://blog.csdn.net/weixin_42130471/article/details/81037849" target="_blank" rel="noopener">这篇博客</a>中用的动态规划和分治法解决问题。这里就看动态规划法，思想这里就拷贝过来了，如下：</p><blockquote><p>动态规划：很简单，定义一个数组，dp[]，dp[i]以第i个元素为结尾的一段最大子序和。求dp[i]时，假设前面dp[0]~dp[i-1]都已经求出来了，dp[i-1]表示的是以i-1为结尾的最大子序和，若dp[i-1]小于0，则dp[i]加上前面的任意长度的序列和都会小于不加前面的序列（即自己本身一个元素是以自己为结尾的最大自序和）。举个例子：如-2，1，-3，4数组，dp[0]=-2；dp[1]=1(因为前一个dp[0]=-2&lt;0，即（-2，1）子序和为-1，一个元素（1）子序和为1）；dp[2]=dp[1]+nums[2]=1+(-3)=-2；dp[3]=4，因为dp[2]&lt;0；</p></blockquote><p>然后用了python来实现，如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        current <span class="token operator">=</span> before <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        maxsum <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> before <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                before <span class="token operator">=</span> current <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 置于同一位置</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                current <span class="token operator">=</span> before <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                before <span class="token operator">=</span> current  <span class="token comment" spellcheck="true"># 下一次判断的before</span>            maxsum <span class="token operator">=</span> max<span class="token punctuation">(</span>current<span class="token punctuation">,</span> maxsum<span class="token punctuation">)</span>        <span class="token keyword">return</span> maxsum</code></pre><p>结果：<br><img src="/images/201909/2019-09-12_103922.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 分治法 </tag>
            
            <tag> 动态规划法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程入门</title>
      <link href="/2019/09/python-base-1/"/>
      <url>/2019/09/python-base-1/</url>
      
        <content type="html"><![CDATA[<p>由于如何安装网上教程一大堆，这里就不说了。</p><h2 id="字符串的常见操作"><a href="#字符串的常见操作" class="headerlink" title="字符串的常见操作"></a>字符串的常见操作</h2><ol><li>修改字符串的大小写</li></ol><ul><li><code>title()</code>以首字母大写的方式显示每个单词，即将每个单词的首字母都改为大写。<br>如：<code>&quot;good morning&quot;.title()</code>   <code>=&gt;</code> <code>Good Morning</code></li><li><code>upper()</code>全部大写，如：<code>&quot;good morning&quot;.upper()</code>   <code>=&gt;</code> <code>GOOD MORNING</code></li><li><code>lower()</code>全部小写，如：<code>&quot;GOOD MORNING&quot;.lower()</code>   <code>=&gt;</code> <code>good morning</code></li></ul><ol start="2"><li>合并（拼接）字符串<br>使用加号（+）来合并字符串。</li><li>使用制表符或换行符来添加空白<br>如：<code>&quot;Languages:\nPython\nC\nJavaScript&quot;</code></li><li>删除空白<br><code>Python</code>能够找出字符串开头和末尾多余的空白。要确保字符串末尾没有空白，可使用方法<br><code>rstrip()</code>；开头没有空白，可使用方法<code>lstrip()</code>；还有一个去除两端的<code>strip()</code>。<br>由于字符串是不可变变量，故而生成新字符串，而不是修改原有字符串。</li></ol><h2 id="列表的常见操作"><a href="#列表的常见操作" class="headerlink" title="列表的常见操作"></a>列表的常见操作</h2><ol><li><p>修改列表元素<br>列表是可变类型，故而直接用等号赋值修改值即可。<br>如： </p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"str"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"good"</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#['good', 'str', 3]</span></code></pre></li><li><p>在列表中添加元素</p></li></ol><ul><li><code>append(obj)</code>在列表末尾添加元素。<br>如：<code>[&#39;good&#39;, &#39;str&#39;, 3].append(5)</code> <code>=&gt;</code>  <code>[&#39;good&#39;, &#39;str&#39;, 3, 5]</code></li><li><code>insert(index, obj)</code>可在列表的任何位置添加新元素。<br>如：<code>[&#39;good&#39;, &#39;str&#39;, 3].insert(0, &quot;first&quot;)</code>  <code>=&gt;</code>  <code>[&#39;first&#39;, good&#39;, &#39;str&#39;, 3]</code></li></ul><ol start="3"><li>从列表中删除元素</li></ol><ul><li><p>使用<code>del(index)</code>语句删除元素。<br>如：</p><pre class=" language-python"><code class="language-python">motorcycles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'honda'</span><span class="token punctuation">,</span> <span class="token string">'yamaha'</span><span class="token punctuation">,</span> <span class="token string">'suzuki'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['honda', 'yamaha', 'suzuki']</span><span class="token keyword">del</span> motorcycles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>motorcycles<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ['yamaha', 'suzuki']</span></code></pre></li><li><p>使用方法<code>pop()</code>删除末尾的元素，并返回被删除元素。</p></li><li><p><code>pop(index)</code>可以删除列表中任何位置的元素，并返回被删除元素。</p></li><li><p><code>remove(value)</code>根据值删除元素。<br>如：<code>[&#39;good&#39;, &#39;str&#39;, 3, 5].remove(&quot;str&quot;)</code>  <code>=&gt;</code>  <code>[&#39;good&#39;, 3, 5]</code></p></li></ul><ol start="4"><li>排序</li></ol><ul><li><code>sort()</code>对列表进行永久性排序<br>列表值可修改，故而可以将排序的结果覆盖到原列表中。<br>还可以按与字母顺序相反的顺序排列列表元素，为此，只需向<code>sort()</code>方法传递参数<br><code>sort(reverse=True)</code>。</li><li><code>sorted()</code>对列表进行临时排序<br>它保留列表元素原来的排列顺序，同时以特定的顺序呈现它们（返回排序的结果）。<br>如果你要按与字母顺序相反的顺序显示列表，也可向函数<code>sorted()</code>传递参数<code>reverse=True</code>。</li></ul><ol start="5"><li><p>反转<br>reverse()可以反转列表元素的排列顺序，永久性的。<br>如：<br><code>[&#39;bmw&#39;, &#39;audi&#39;, &#39;toyota&#39;, &#39;subaru&#39;]</code>  <code>=&gt;</code>  <code>[&#39;subaru&#39;, &#39;toyota&#39;, &#39;audi&#39;, &#39;bmw&#39;]</code></p></li><li><p>列表的长度<br><code>len()</code>可快速获悉列表的长度。</p></li><li><p>遍历列表</p></li></ol><ul><li><p><code>for-in</code>循环，直接操作<br>如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> ele <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token keyword">pass</span></code></pre></li><li><p><code>for-in</code>循环，取小标操作<br>如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">for</span> ele <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">pass</span></code></pre></li></ul><blockquote><p>range()创建数字列表，案例如下：<br>print(type(range(3))) # &lt;class ‘range’&gt;<br>print(range(3)) # range(0, 3)<br>print(type(list(range(3))))  # &lt;class ‘list’&gt;<br>print(list(range(3)))  # [0, 1, 2]</p></blockquote><ol start="8"><li><p>列表解析<br>将<code>for</code>循环和创建新元素的代码合并成一行，并自动附加新元素。<br>如：[x*2 for x in [1, 2, 3, 4]]    =&gt;  [2, 4, 6, 8]</p></li><li><p>切片<br>首先，列表和字符串的下标从前到后从0开始，依次是<code>0, 1, 2, 3...</code>；从后到前从-1开始，依次是<code>-1, -2, -3,...</code>。<br><code>[a:b]</code>，起始位置是<code>a</code>，不包括<code>b</code>的区间，即：<code>[a, b)</code>。如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [1, 2, 3]</span></code></pre></li></ol><p>如果你没有指定第一个索引，<code>Python</code>将自动从列表开头开始，如<code>[:3]</code>，即区间是<code>[0:3)</code>。<br>同理，如果你没有指定最后一个索引，<code>Python</code>将自动从列表的表尾的所有元素。</p><ol start="10"><li>复制列表<br>结合前面的切片，我们可以截取整个列表，也就是复制了列表。就可以同时省略起始索引和终止索引。如：<pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [1,2,3,4,5,6]</span></code></pre></li></ol><p>我们来看一个失败的案例：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>copy_a <span class="token operator">=</span> aa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Error"</span><span class="token keyword">print</span><span class="token punctuation">(</span>copy_a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># ['Error', 2, 3, 4, 5, 6]</span></code></pre><p>也不难理解，因为列表是可变类型，也就相当于指针，故而修改是作用在本身的内存中。<br>当然，也有相应的<code>copy()</code>函数，如下：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>copy_a <span class="token operator">=</span> a<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Error"</span><span class="token keyword">print</span><span class="token punctuation">(</span>copy_a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># [1, 2, 3, 4, 5, 6]</span></code></pre><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>和列表类似，但是是不可变的类型。可以看成是不可变的列表。用圆括号来标识。<br>虽然不能修改元组的元素，但可以给存储元组的变量赋值。如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#&lt;class 'tuple'></span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># (1, 2)</span></code></pre><p>但貌似没有什么意义。</p><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典是一系列键—值对。如：<code>a = {&quot;color&quot;:&quot;red&quot;, &quot;age&quot;:&quot;24&quot;}</code></p><ol><li><p>添加元素<br>如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'dict'></span>a<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'age': 24}</span></code></pre></li><li><p>删除元素<br>如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'dict'></span>a<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {}</span></code></pre></li><li><p>遍历字典</p></li></ol><ul><li><p><code>for-in</code>循环，结合<code>items()</code><br>如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">}</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> a<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># age 24</span><span class="token comment" spellcheck="true"># name Tom</span></code></pre></li><li><p><code>for-in</code>循环，结合<code>keys()</code><br>如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">}</span><span class="token keyword">for</span> key <span class="token keyword">in</span> a<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token punctuation">,</span> a<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># age 24</span><span class="token comment" spellcheck="true"># name Tom</span></code></pre></li><li><p>当然，也可以直接遍历所有的值</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Tom'</span><span class="token punctuation">}</span><span class="token keyword">for</span> v <span class="token keyword">in</span> a<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 24</span><span class="token comment" spellcheck="true"># Tom</span></code></pre></li></ul><h2 id="类编码风格"><a href="#类编码风格" class="headerlink" title="类编码风格"></a>类编码风格</h2><p>类名应采用驼峰命名法，即将类名中的每个单词的首字母都大写，而不使用下划线。实例名和模块名都采用小写格式，并在单词之间加上下划线。<br>对于每个类，都应紧跟在类定义后面包含一个文档字符串。这种文档字符串简要地描述类的<br>功能，并遵循编写函数的文档字符串时采用的格式约定。每个模块也都应包含一个文档字符串，<br>对其中的类可用于做什么进行描述。可使用空行来组织代码，但不要滥用。在类中，可使用一个空行来分隔方法；而在模块中，可使用两个空行来分隔类。</p><h2 id="文件和异常"><a href="#文件和异常" class="headerlink" title="文件和异常"></a>文件和异常</h2><h3 id="读取文件操作"><a href="#读取文件操作" class="headerlink" title="读取文件操作"></a>读取文件操作</h3><ol><li><p>读取整个文件<br>如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"f:/a.text"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> contents <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.234</span><span class="token comment" spellcheck="true"># 4565656</span><span class="token comment" spellcheck="true"># 12.23</span></code></pre></li><li><p>逐行读取</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"f:/a.text"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.234</span><span class="token comment" spellcheck="true"># 4565656</span><span class="token comment" spellcheck="true"># 12.23</span></code></pre></li></ol><p>加入<code>strip()</code>，主要是去除尾部文件的换行。不加会出现空白行。<br>为何会出现空白行呢？因为在这个文件中，每行的末尾都有一个看不见的换行符，而<code>print</code>语句也会加上一个换行符，因此每行末尾都有两个换行符：一个来自文件，另一个来自<code>print</code>语句。</p><ol start="3"><li>使用readlines读取所有的行到一个列表中<pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"f:/a.text"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.234</span><span class="token comment" spellcheck="true"># 4565656</span><span class="token comment" spellcheck="true"># 12.23</span></code></pre></li></ol><h3 id="写入文件操作"><a href="#写入文件操作" class="headerlink" title="写入文件操作"></a>写入文件操作</h3><ol><li>写入空文件（对应模式：<code>w  -&gt;  write</code>）<pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"f:/b.text"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"I'm so tired."</span><span class="token punctuation">)</span></code></pre></li></ol><p>然后在F盘中就可以看见相应的文件以及其内容。</p><ol start="2"><li>追加到已经存在的文件（对应模式：<code>a  -&gt;  append</code>）<pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"f:/b.text"</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\nAre you ok?"</span><span class="token punctuation">)</span></code></pre></li></ol><p>文件原来的内容还在，它们后面是我们刚添加的内容。</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><code>Python</code>不知所措的错误时，它都会创建一个异常对象。如果你编写了处理该异常的代码，程序将继续运行；如果你未对异常进行处理，程序将停止，并显示一个<code>traceback</code>，其中包含有关异常的报告。<br>异常是使用<code>try-except</code>代码块处理的。<code>try-except</code>代码块让<code>Python</code>执行指定的操作，同时告<br>诉<code>Python</code>发生异常时怎么办。</p><ol><li><p>处理<code>ZeroDivisionError</code> 异常</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token keyword">except</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error:can't divide by zero!"</span><span class="token punctuation">)</span></code></pre></li><li><p><code>else</code>代码块<br>通过将可能引发错误的代码放在<code>try-except</code>代码块中，可提高这个程序抵御错误的能力。<br>错误是执行除法运算的代码行导致的，因此我们需要将它放到<code>try-except</code>代码块中。依赖于<code>try</code>代码块成功执行的代码都应放到<code>else</code>代码块中。看看下面的具体的用法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">except</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error:can't division zero!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre></li></ol><p>结果：2.5</p><p>其余的异常就不介绍了。</p>]]></content>
      
      
      <categories>
          
          <category> 《Python编程从入门到实践》读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程入门</title>
      <link href="/2019/09/python-base-2/"/>
      <url>/2019/09/python-base-2/</url>
      
        <content type="html"><![CDATA[<h2 id="创建一个空的Pygame窗口"><a href="#创建一个空的Pygame窗口" class="headerlink" title="创建一个空的Pygame窗口"></a>创建一个空的Pygame窗口</h2><p>代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pygame<span class="token punctuation">,</span> sys<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>    screen <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 设置背景色</span>    bg_color <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 监视键盘和鼠标事件</span>        <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> event<span class="token punctuation">.</span>type <span class="token operator">==</span> pygame<span class="token punctuation">.</span>QUIT<span class="token punctuation">:</span>                sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 每次循环时都重绘屏幕</span>        screen<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>bg_color<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 绘制屏幕</span>        pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>玩家单击游戏窗口的关闭按钮时，将检测到<code>pygame.QUIT</code>事件，而我们调用<code>sys.exit()</code>来退出游戏。<br>了<code>pygame.display.flip()</code>，命令<code>Pygame</code>让最近绘制的屏幕可见。在这里，它在每次执行<code>while</code>循环时都绘制一个空屏幕，并擦去旧屏幕，使得只有新屏幕可见。在我们移动游戏元素时，<code>pygame.display.flip()</code>将不断更新屏幕，以显示元素的新位置，并在原来的位置隐藏元素，从而营造平滑移动的效果。</p><p>```</p>]]></content>
      
      
      <categories>
          
          <category> 《Python编程从入门到实践》读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-341 | 扁平化嵌套列表迭代器</title>
      <link href="/2019/09/leetcode-341/"/>
      <url>/2019/09/leetcode-341/</url>
      
        <content type="html"><![CDATA[<h2 id="341-扁平化嵌套列表迭代器"><a href="#341-扁平化嵌套列表迭代器" class="headerlink" title="341. 扁平化嵌套列表迭代器"></a>341. 扁平化嵌套列表迭代器</h2><p>给定一个嵌套的整型列表。设计一个迭代器，使其能够遍历这个整型列表中的所有整数。<br>列表中的项或者为一个整数，或者是另一个列表。</p><blockquote><p>示例 1:<br>输入: [[1,1],2,[1,1]]<br>输出: [1,1,2,1,1]<br>解释: 通过重复调用 next 直到 hasNext 返回false，next 返回的元素的顺序应该是: [1,1,2,1,1]。</p></blockquote><blockquote><p>示例 2:<br>输入: [1,[4,[6]]]<br>输出: [1,4,6]<br>解释: 通过重复调用 next 直到 hasNext 返回false，next 返回的元素的顺序应该是: [1,4,6]。</p></blockquote><p>看看说明：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">"""# This is the interface that allows for creating nested lists.# You should not implement it, or speculate about its implementation# """</span><span class="token comment" spellcheck="true">#class NestedInteger(object):</span><span class="token comment" spellcheck="true">#    def isInteger(self):</span><span class="token comment" spellcheck="true">#        </span><span class="token triple-quoted-string string">"""#        @return True if this NestedInteger holds a single integer, rather than a nested list.#        :rtype bool#        """</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#    def getInteger(self):</span><span class="token comment" spellcheck="true">#        </span><span class="token triple-quoted-string string">"""#        @return the single integer that this NestedInteger holds, if it holds a single integer#        Return None if this NestedInteger holds a nested list#        :rtype int#        """</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#    def getList(self):</span><span class="token comment" spellcheck="true">#        </span><span class="token triple-quoted-string string">"""#        @return the nested list that this NestedInteger holds, if it holds a nested list#        Return None if this NestedInteger holds a single integer#        :rtype List[NestedInteger]#        """</span><span class="token keyword">class</span> <span class="token class-name">NestedIterator</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nestedList<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize your data structure here.        :type nestedList: List[NestedInteger]        """</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: int        """</span>    <span class="token keyword">def</span> <span class="token function">hasNext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: bool        """</span><span class="token comment" spellcheck="true"># Your NestedIterator object will be instantiated and called as such:</span><span class="token comment" spellcheck="true"># i, v = NestedIterator(nestedList), []</span><span class="token comment" spellcheck="true"># while i.hasNext(): v.append(i.next())</span></code></pre><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法思考一"><a href="#方法思考一" class="headerlink" title="方法思考一"></a>方法思考一</h3><p>由于列表的深度不确定，故而也就不能简单的考虑循环来解决。<br>在二叉树的遍历过程中也是类似的，不能简单的确定末节点，但是其遍历却很简单，也就是只考虑单步，而将问题用栈的数据结构来细化。<br>这里也可以使用栈来解决问题。不妨来个案例，看看示意图：<br><img src="/images/201909/2019-09-10_145526.png" alt></p><p>结合提示，调用需要用i.hasNext()判断循环是否继续，用i.next()来取元素。<br>故而我们可以初始化一个栈，由于hasNext()一次，就要next()取值一次，故而不能简单的用栈空来判断。但是前提是把列表转换成字符串。转换的方式如下：</p><pre class=" language-Python"><code class="language-Python">a = [str(i) for i in [[2,[-1],-3],[-4,-1],-2,-1,-5,-4]]print("["+",".join(a)+"]")</code></pre><p>简单思考不难发现，这种方式只适用于小规模数据，如果是大量数据，转换成字符串的操作已经是相当耗时的操作了，得不偿失。</p><h3 id="方法思考二"><a href="#方法思考二" class="headerlink" title="方法思考二"></a>方法思考二</h3><p>不妨就来适用列表的特性，传入的列表的数据类型是：<code>List[NestedInteger]</code><br>故而，我们需要使用到<code>NestedInteger</code>这个类提供的三个方法：<br><code>getList():return List[NestedInteger]</code><br><code>getInteger():return int</code><br><code>isInteger():return bool</code></p><p>我没有思考出来，然后百度了一下。看了看。<br>就是将列表中所有的元素用递归的方式提取元素，然后装载在队列中，然后在next和hasNext中就是元素出队问题。代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NestedIterator</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nestedList<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize your data structure here.        :type nestedList: List[NestedInteger]        """</span>        self<span class="token punctuation">.</span>vecotr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>load<span class="token punctuation">(</span>nestedList<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nestedList<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nestedList<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token punctuation">.</span>isInteger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>vecotr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">.</span>getInteger<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>load<span class="token punctuation">(</span>i<span class="token punctuation">.</span>getList<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: int        """</span>        front <span class="token operator">=</span> self<span class="token punctuation">.</span>vecotr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>vecotr<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>front<span class="token punctuation">)</span>        <span class="token keyword">return</span> front    <span class="token keyword">def</span> <span class="token function">hasNext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :rtype: bool        """</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>vecotr<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span></code></pre><p>结果：<br><img src="/images/201909/2019-09-11_180510.png" alt></p><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/flatten-nested-list-iterator" target="_blank" rel="noopener">https://leetcode-cn.com/problems/flatten-nested-list-iterator</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | wifi</title>
      <link href="/2019/09/android-18/"/>
      <url>/2019/09/android-18/</url>
      
        <content type="html"><![CDATA[<pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>研究生记事本</title>
      <link href="/2019/09/xh-ld-1/"/>
      <url>/2019/09/xh-ld-1/</url>
      
        <content type="html"><![CDATA[<!doctype html><html lang="en"> <head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>日迹记事本</title>  <style>  .big-title{text-align:center;vertical-align:center;color:orange;padding-top:20px;font-size:26px;margin-bottom:15px;}  .code{  background:#F8F8F8;color:#129F56;border-radius:5px;padding:0 3px;  }  .container{margin:10px auto;width:888px;border:1px solid #eee;border-radius:30px;box-shadow:#eee 0 0 50px;padding:15px;}  .head{width:100%;height:30px;display:flex;border-bottom:1px solid #eee;padding-bottom:15px;}  .time{flex:1;text-align:left;line-height:30px;}  .time-text,.tag-text{background:#2CAD45;padding:5px;border-radius:15px;color:white;}  .tag{flex:1;text-align:right;line-height:30px;}  .post-title{margin-top:10px;margin-bottom:10px;color:#AB3780;font-size:30px;text-align:center;vertical-align:center}  .block{background:#EBF8F2;border-left:5px solid #42B983;padding:25px 15px;font-size:18px;margin-top:20px;margin-bottom:25px;}  .other{font-size:18px;padding-bottom:20px;}  .pages{margin:20px auto;width:888px;padding:15px;background:#EBF8F2;height:60px;text-align:center;vertical-align:center;}   .pages span{line-height:40px;margin:5px;color:#42B983;   width:40px;height:40px;display:inline-block;border:2px solid #42B983;   }   a.link{display:block;text-decoration:none;color:#42B983;width:40px;height:40px;}   a.current-page{color:white;background:#42B983;}   .pages span a:hover{color:white;background:#42B983;}   .notmore{pointer-events: none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}  </style> <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head> <body> <div class="big-title">日迹记事本</div> <div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-5 21:48:50</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">报道日</div><div class="block">今天报道，学费（学费8000、住宿费1200、体检+医疗保险330）是9530元。<br>地铁卡充值20、校园卡一卡通充值120、生活用品（毛巾、洗衣粉、洗发水、垃圾桶、等）92、办了一张移动校园卡（为了用内网）110。<br>可怕：共计9872元。<br>第一天，开始新的生活。<br>不过今天还是再颓一颓，不知道为啥。<br>其他的就不说了，也没有什么别的感想。<br></div><div class="other">来自寄生虫的一丝感叹。</div></div><!--day 2---> <div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-6 22:07:02</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">随笔</div><div class="block">今天，访问研究生管理系统，初步选课。<br>要根据自己的考研英语成绩选课，突然忘记了考研成绩。<br>慌得一比<br>还好，最后在手机中找到了，这里记录一下<br>政治：53<br>英语：63<br>数学二：125<br>数据结构：108<br></div><div class="other">大概是太粗心，很多事都不上心！需要改！！！</div></div><!---3--> <div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-7 19:03:26</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">记事本改版</div><div class="block">今天，访问研究生管理系统，初步选课。<br>要根据自己的考研英语成绩选课，突然忘记了考研成绩。<br>慌得一比<br>还好，最后在手机中找到了，这里记录一下<br>政治：53<br>英语：63<br>数学二：125<br>数据结构：108<br></div><div class="other">感觉我的这个是日记，故而就自己排版。所以接下来就自己排版。<br>以前是直接发博客，太浪费资源了！<br>还是这样好。<br>至于如何做的，就是<span class="code">CSS</span>标签。而且还是原封不动的仿制的这个博客的样式！毫无原创，心累。<br></div><div style="font-size:18px;padding-bottom:20px;">另：今天体检，导师却还是没有着落。难道是等下周统一分配？？？<br>我不知道，感觉很废！<br>虽然这两天在学校无时无刻不处于焦虑当中，总在思考自己的人生和思考该怎样学习才对得起父母那辛劳的汗水所换来的钱。<br>大概是无知吧，还没有概念！<br>对了，突然记起昨天的废:（到姐那去拿耳机）<br>昨天坐公交，从犀浦坐反了，最后还不好赶车的很，搞了半天才到学校。<br>我不管做什么事情都是很粗心，哎，心累。<br><div class="block">昨天又充了20到公交卡中。<br>买纸16元<br>买刷厕所的14元<br>1.5米的网线10元<br>胶棒4元<br>吃饭的就不记录了，因为记录了充一卡通的。</div>今晚不想想其他的了，来找个电影看。<br><hr>时间：2019-9-7 22:34:21刚刚都准备睡下了，然后习惯性的打开手机，然后就脑袋里灵光一闪：搜一搜<span class="code">研究生的忠告</span>、<span class="code">研究生期间该如何度过</span><br>然后，很扎心，的确需要一个计划，也需要一个交代！<br>人，尤其是成年人，不能太放纵自己了。</div></div><!--4--> <div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-8 09:18:23</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">第一个周末</div><div class="block">还没有正式接触研究生的生活，就到了周末了。<br>昨天晚上给刘兴伟导师发的短信消息，然后说是明天见一面看看。<br>然后，我就兴冲冲的早起到图书馆，希望来了解一下<span class="code">大数据与移动互联网</span>方向<br>但是，能了解到的并不多。<br>目前就知道，移动互联网就是特指手机、平板等可移动设备的网络，是在2010年正式落地。<br>互联网是万物互联为宗旨。也就是物物之间的互联。移动互联网是互联网的补充。<br>而大数据+移动互联网就人人之间、人物之间、物物之间、人与服务之间的互联。<br>网上说：现在和未来是移动互联网+大数据并存的时代。<br>移动互联网时代的支撑是大数据，而移动互联网又促进了大数据的发展。<br>大数据的核心就在于“预测”，它基于数据的关联性。<br></div><div class="other">不知道怎么回事，总感觉<span class="code">大数据和移动互联网</span>就像是书名，而不是一个计算机技术的研究方向，大概是错觉吧。也可能是由于眼界为题，就像井中望天。</div></div> <div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-9 15:53:49</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">导师初见</div><div class="block">今天见了刘兴伟导师，摆了一会儿龙门阵。<br>其实也就是一堂关于未来、关于人生的哲学讲堂。<br>分两点：<br>①确定你自己想要什么？了解你自己所希望的专业？<br>②自己想要什么就要主动去争取，而不是一味的考虑外部环境、考虑竞争压力，其实这都不是你该关心的，需要关心的是面对一些直击内心的问题能不能不要那一层遮羞布？<br>③人都因该主动，人首先是独立的个体，需要主动的追求自己想要的，而不是被动的填鸭式的。<br></div><div class="other">想想：<br>我都感觉自己无欲无求了，而实际上怎么可能，我的无欲无求其实是建立在爸妈每个月按时的供给上！如果没有的资金来源，我的无欲无求该怎么立足？<br>我不想谈朋友，其实也就是内心的自卑，而导致内心的自卑的本质原因还是因为经济条件，其实内心也是向往的，怎么会没有荷尔蒙的激增？而是在大多数情况下那种自卑的心态盖过了荷尔蒙带来的冲动，在盖不住的时候，就会自己想一些其他的糟糕的事情辅助盖过。<br>所以，即是是清新寡淡的我，都有自己的想要的（或许算得上是追求吧）：<br>①不想另一半或者下一代过我这样的生活，即使是现在父母已经给了我他们最好的了，而实际上自己却还是掩盖不了内心的孤寂和自卑。故而，需要培养自己的是高逼格、良好的经济条件、还有最重要的性格。<br><div style="background:#FF4550;border-radius:5px;color:white;padding:4px;">从小干农活，妈就告诉我们什么应该做，什么不应该做。即使你想做别的，也会把你打到不敢再犯。但是，也就基本上20年都没有过反抗，也就是逆来顺受，养成了无论好的坏的安排自己都可以接受的心态；也养成了一种适应安排的心态，导致了自己从小到大都没有什么主见！现阶段都还是这样！！！</div>②眼界，我没有眼界。<br><hr>是该有一个好的心态来拥抱未来，用科技广告中的一句话：未来无限可能。<br>我想我该想想接下来的研究生规划，想想自己的未来。<br>不过我想先看看当幸福来敲门，虽然看了不下五遍了。</div></div><div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-10 16:07:50</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">惰性大约是再次回归</div><div class="block">简单的记事：<br>今天开了大一和研一的开学典礼，一共一万三千人次。<br>在研究生新生代表以及大一新生代表的上台发表讲话的时候，我自己当时在内心问了自己一个问题：<br>你有能力上台发表自己的演讲吗？<br>当时，我的思绪中也没有给自己答案，大概是沉默吧，也就是不敢。<br>是的，不敢！<br></div><div class="other">然后，我又想到了昨天的导师见面。<br>结合周围同学们勤劳的跑实验室，不难发现，昨天的大概是婉拒吧。<br>昨天其实自己也猜测过，但是还是不愿意承认罢了。总有一些事还是不能直观面对，以后也会积极改正。<br>不想吐槽了，自己的负能量太多了，大概我就是海贼王中的乌索普，区别只在于我不太爱说话，更不喜欢吹牛。<br><div class="block">无论如何，生活要向前看，还是应该磨砺前行。</div></div></div><div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-11 15:06:01</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">大概能算起航了</div><div class="block">写前天的日迹吧。<br>前天在图书馆借了两本书，是两本算法的书籍。<br>准备现阶段：<br>①刷LeetCode的题，然后学习算法。在学算法的过程中不用写博客，但是看完了还是要写博客。<br>②按照机器学习路线，学习好Python语言工具。<br></div><div class="other">做了什么大概也忘记了。</div></div><div class="container"> <div class="head">    <div class="time"><span class="time-text">时间：</span>    <span style="color:#42B983;">2019-9-12 15:06:01</span></div>    <div class="tag"><span class="tag-text">PostGraduate</span></div> </div> <div class="post-title">导师确定</div><div class="block">写昨天的日迹吧。<br>昨天开了一个院的开学典礼。<br>反正也就是勉励。然后印象深刻的还是新生代表的发言。菜鸡的人生似乎永远都是在台下鼓掌。反正鼓掌就对了。<br>还有就是下午导师的双选会。<br>其实很多的导师已经名额完了，故而说明不管是什么情况，也不管是通知的什么情况，自己不去争取机会就会溜走。辅导员说选导师不用急，然后，一半的人都选完了，自己的路要自己走。<br>晚上双选会完成后，然后就去了525实验室，见了陈导师。<br>人很好，很好说话，很积极，感觉是个不错的选择。<br>然后他给了我这次机会，能在他的团队中一起学习，很nice。<br>希望不要辜负自己。<br></div><div class="other">明白了一件事：<br>社会是人驱动的，故而，不管什么事情，都要具体到人。<br>如果想着要进步，就不要想着“自闭症发作”之类的，人就是在社会交际中进步，在社会交际中体现你自己的价值。<br>导师说的发表论文时的一句话很对：你一个双非的，想去大公司，人家凭什么就决定要你，不看你的项目、论文的质量看什么？<br>的确，人需要一些头衔，需要交际和交际圈。<br>经常听到“欲戴其冠必承其重”，但是反过来，你就算有能力去承其重，而没有其冠，必然言不顺、名不正。而社会的生存法则就是交际、在什么样的圈子做什么样的事情，名不正则必然孤寂。<br>算了，还是不扯淡了，感觉是这个意思，但是写出来就弱了一筹。等有更加深刻的思考的时候再记录。<br>感觉该分页了，就分页吧。一个页面记录一周的。</div></div><div class="pages"><span><a href="/2019/09/xh-ld-0/" class="link notmore">上篇</a></span><span><a href="/2019/09/xh-ld-1/" class="link current-page">1/6</a></span><span><a href="/2019/09/xh-ld-2/" class="link">下篇</a></span></div> </body></html>]]></content>
      
      
      <categories>
          
          <category> 研究生日迹本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgraduate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | 广播</title>
      <link href="/2019/09/android-17/"/>
      <url>/2019/09/android-17/</url>
      
        <content type="html"><![CDATA[<p>直接说案例：<br>布局文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/vaild_code<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>内容<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发送消息给Receiver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>然后就是在manifest.xml文件中注册接收短信和阅读短信的权限：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.RECEIVE_SMS<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.READ_SMS<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>接着就是编写对应的广播处理类myBroadcast.java：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>broadcast<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Locale<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>BroadcastReceiver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>telephony<span class="token punctuation">.</span>SmsMessage<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>EditText<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">myBroadcast</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> EditText text<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> codeLength <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//空构造是必须的</span>    <span class="token keyword">public</span> <span class="token function">myBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//含参构造，传入自己需要的参数</span>    <span class="token keyword">public</span> <span class="token function">myBroadcast</span><span class="token punctuation">(</span>EditText text<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context arg0<span class="token punctuation">,</span> Intent intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bundle bundle <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bundle <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                     Object<span class="token punctuation">[</span><span class="token punctuation">]</span> datas <span class="token operator">=</span> <span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> bundle<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"pdus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Object data <span class="token operator">:</span> datas<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sms <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> data<span class="token punctuation">;</span>                SmsMessage message <span class="token operator">=</span> SmsMessage<span class="token punctuation">.</span><span class="token function">createFromPdu</span><span class="token punctuation">(</span>sms<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 发送人号码  </span>                String number <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getOriginatingAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 短信内容  </span>                String content <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 发送时间  </span>                Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getTimestampMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  String time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>                  Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"Receiver"</span><span class="token punctuation">,</span> <span class="token string">"发送号码："</span> <span class="token operator">+</span> number <span class="token operator">+</span>                         <span class="token string">" 发送内容："</span> <span class="token operator">+</span> content <span class="token operator">+</span>                         <span class="token string">" 发送时间"</span> <span class="token operator">+</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkCodeAndSend</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkCodeAndSend</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 正则表达式验证</span>        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\d{"</span> <span class="token operator">+</span> codeLength <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String code <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//直接设置</span>            text<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"sms"</span><span class="token punctuation">,</span> <span class="token string">"短信中没有找到符合规则的验证码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接着就是在mainActivity.java文件中，为按钮添加监听，然后就是注册我们的广播监听：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>broadcast<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>IntentFilter<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>EditText<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button btn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> codeLength <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> EditText text<span class="token punctuation">;</span>    <span class="token keyword">private</span> myBroadcast receiver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        text <span class="token operator">=</span> <span class="token punctuation">(</span>EditText<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>vaild_code<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myBroadcast</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>                IntentFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                filter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token string">"android.provider.Telephony.SMS_RECEIVED"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">registerReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果：<br><img src="/images/201909/smsReceiver.gif" alt></p><p>这个案例和上一个案例的不同之处就在与这里使用的是系统的广播，而是不用户自己的行为广播。那么Intent对象有哪些广播呢，我们在文档中看看：</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | 广播</title>
      <link href="/2019/08/android-16/"/>
      <url>/2019/08/android-16/</url>
      
        <content type="html"><![CDATA[<blockquote><p>BroadcastReceiver</p></blockquote><p>广播：<code>Android 组件（安卓有四大组件</code>Activity<code>、</code>ContentProvider<code>、</code>BroadcastReceiver<code>、</code>Service`）之间的通信方式。<br>使用了观察者模式，基于消息的发布/订阅事件模型。（解耦，易扩展）<br>流程：<a href="https://www.cnblogs.com/lwbqqyumidi/p/4168017.html" target="_blank" rel="noopener">原文地址</a></p><ol><li>广播接收者<code>BroadcastReceiver</code>通过<code>Binder</code>机制向<code>AMS(Activity Manager Service)</code>进行注册；</li><li>广播发送者通过<code>binder</code>机制向<code>AMS</code>发送广播；</li><li><code>AMS</code>查找符合相应条件（<code>IntentFilter/Permission</code>等）的<code>BroadcastReceiver</code>，将广播发送到<code>BroadcastReceiver</code>（一般情况下是<code>Activity</code>）相应的消息循环队列中；</li><li>消息循环执行拿到此广播，回调<code>BroadcastReceiver</code>中的<code>onReceive()</code>方法。</li></ol><h2 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h2><p>文档地址：<a href="https://developer.android.google.cn/reference/kotlin/android/content/BroadcastReceiver?hl=en" target="_blank" rel="noopener">广播接收器</a><br>首先是抽象类，其抽象方法只有一个就是<code>onReceive(Context context, Intent intent)</code>方法（当<code>BroadcastReceiver</code>接收<code>Intent</code>广播时调用此方法。<code>context</code>是上下文，<code>intent</code>是广播携带的数据）</p><h2 id="分步骤实现"><a href="#分步骤实现" class="headerlink" title="分步骤实现"></a>分步骤实现</h2><h3 id="编写对应事件的BroadCastReveicer"><a href="#编写对应事件的BroadCastReveicer" class="headerlink" title="编写对应事件的BroadCastReveicer"></a>编写对应事件的BroadCastReveicer</h3><p>继承<code>BroadCastReveicer</code>，复写<code>onReceive</code>方法。</p><h3 id="注册到安卓系统"><a href="#注册到安卓系统" class="headerlink" title="注册到安卓系统"></a>注册到安卓系统</h3><p>作为四大组件之一，就需要注册。有两种注册方式：</p><ol><li>静态注册（AndroidManifest.xml中）<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.myReceiver<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">android:</span>permission</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>如果设置，具有相应权限的广播发送方发送的广播才能被此broadcastReceiver所接收；<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>       //要监听的广播类型        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.ACTION_SCREEN_OFF<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.ACTION_SCREEN_ON<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--下面是检测应用首次启动，就开始广播--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.BOOT_COMPLETED<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">></span></span></code></pre></li></ol><p>使用<code>Intent</code>对象启动广播，在<code>intent</code>过滤器中过滤，符合标准才调用。</p><ol start="2"><li><p>动态注册（代码中）<br>在代码中通过调用<code>Context</code>的<code>registerReceiver</code>函数，可以在程序中动态注册BroadcastReceiver。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> MyBroadcastReceiver receiver <span class="token punctuation">;</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">registerMyReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerMyReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBroadcastReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     IntentFilter filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntentFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建IntentFilter对象        </span>     <span class="token comment" spellcheck="true">//IntentFilter对象中添加要接收的关屏广播。对应Manifest.xml中的action</span>     filter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_SCREEN_OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//IntentFilter对象中添加要接收的点亮屏幕广播。对应Manifest.xml中的action</span>     filter<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_SCREEN_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">registerReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>receiver <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">unregisterReceiver</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Android中所有与观察者模式有关的设计中，一旦涉及到register，必定在相应的时机需要unregister。</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h3><p>看看这两种方式有什么不同：</p><ol><li><p>静态注册<br>静态注册依附于清单文件，只要<code>APP</code>启动过一次，所静态注册的广播就会生效，无论当前的<code>APP</code>处于停止使用还是正在使用状态。<br>只要相应的广播事件发生，系统就会遍历所有的清单文件，通知相应的广播接收者接收广播，然后调用广播接收者的<code>onReceiver</code>方法。<br>也就是无论你的程序是否关闭，都会接收到广播事件。这很好，像电量监听等。但是，也无疑很耗电、耗<code>CPU</code>等，故而在有些场合就不合适了。<br>手机的电量等资源是有限的，有些情况并不需要一直接收广播，故而我们也需要动态注册。</p></li><li><p>动态注册<br>动态注册方式依赖于所注册的组件，当<code>APP</code>关闭后，组件对象都不在了，动态注册的代码都不存在了，所动态注册监听的<code>action</code>自然不在生效。<br>如果一个<code>BroadcastReceiver</code>用于更新<code>UI</code>，那么通常会使用这种方法进行注册，建议在<code>Activity</code>启动时注册，在<code>Activity</code>不可见的时候取消注册。</p></li><li><p>静态注册的广播传播速度要远远慢于动态注册的广播。</p></li><li><p>动态注册的广播的优先级大于静态注册的广播。</p></li><li><p>可同时注册。. </p></li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>接下来一个简单的案例来理解广播。<br>先看布局文件，是一个按钮：<br>activity_main.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerHorizontal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerVertical</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发送消息给Receiver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>然后看看自定义的myBroadcast.java文件：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>broadcast<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>BroadcastReceiver<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">myBroadcast</span> <span class="token keyword">extends</span> <span class="token class-name">BroadcastReceiver</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//系统自调用，需要无参的构造函数</span>    <span class="token keyword">public</span> <span class="token function">myBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//接收广播</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onReceive</span><span class="token punctuation">(</span>Context arg0<span class="token punctuation">,</span> Intent arg1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"onReceive"</span><span class="token punctuation">,</span> <span class="token string">"调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再然后就是在manifest.xml文件中注册一下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>receiver</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.myBroadcast<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.EDIT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>receiver</span><span class="token punctuation">></span></span></code></pre><p>由于是四大组件之一，故而和<code>activity</code>平级放置。</p><p>最后就是我们的MainActivity.java文件：</p><pre class=" language-java"><code class="language-java">btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//发送广播</span>            Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            intent<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_EDIT<span class="token punctuation">)</span><span class="token punctuation">;</span>            MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendBroadcast</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：<br>在出现的按钮上点击，然后用LogCat可以看到输出的日志。<br><img src="/images/201909/2019-09-07_094613.png" alt></p><p>到此，也就简单完成了一个广播案例。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深思与反省</title>
      <link href="/2019/08/introspection-2/"/>
      <url>/2019/08/introspection-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>哎，看上篇反省就是上个月的明天，突然自己又很想写一篇来记录此时的感受。</p></blockquote><p>买菜的时候，翻了翻好几个月都不曾碰的微信朋友圈，然后就刷了一个月的动态。感觉很方，落寞感一下子就涌上了心头，看着别个的梦想和生活，谈不上羡慕和佩服，但是想想自己现在的日子，觉得自己真的活的毫无价值和意义。好像感受到了来自世界的鄙视和恶意。</p><p>不过，回想这个月，除了写上一个反思后的几天的日子比较努力以外，自己就真的是一直都在看小说，一本看完了，觉得自己很落寞和彷徨，然后又寻寻觅觅找了另一个小说，就这样一直灌醉自己。也许腐败和堕落真的是首先从思想开始的吧。</p><p>我自己也知道，如果在现实和虚幻之间做一个选择，我自己九层会选择虚幻世界里面生活吧，而且是那种整天什么都不用干，甚至于只需要光合作用生长。但，这种思想很可怕，也无法言说。也许这就是网瘾少年，也许这就是死宅男。</p><p>好久都没锻炼了，好久都没有好好学习过了，好久都没有早点睡过觉了。整天不是看小说，就是耍着寻找人机般技术的和平精英，偶尔写写博客，都不知道自己还能怎样面对生活。</p><p>我喜欢看设计，无论是建筑还是传单；我喜欢看动漫，特别是喜欢它特效和场景的制作；我也喜欢看小说，喜欢它的文字语言的设计与情节的构思。但是，却都没有一项是在实施的。</p><p>非理想主义者、非现实主义者、非行动主义者，或许只是一条咸鱼。</p><p>但我喜欢胡说八道，马云说的好：钱是世界上，最容易得到的东西！</p><p>不扯了，虽然不知道自己吐槽是为了什么，但是心里好受多了。MMP</p>]]></content>
      
      
      <categories>
          
          <category> introspection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | xml文件解析</title>
      <link href="/2019/08/android-15/"/>
      <url>/2019/08/android-15/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每种语言都有解析xml文档的插件包，在java中常见的有两种，Dom和SAX两种方式。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>SAX（Simple API for XML）</code>是一个解析速度快并且占用内存少的<code>XML</code>解析器，非常适合用于<code>Android</code>等移动设备。<br><code>SAX</code>解析<code>XML</code>文件采用的是事件驱动，也就是说，它并不需要解析完整个文档，在按内容顺序解析文档的过程中，<code>SAX</code>会判断当前读到的字符是否合法<code>XML</code>语法中的某部分，如果符合就会触发事件。<br>所谓事件，其实就是一些回调（<code>callback</code>）方法，这些方法(事件)定义在<code>ContentHandler</code>接口。</p><h2 id="ContentHandler"><a href="#ContentHandler" class="headerlink" title="ContentHandler"></a>ContentHandler</h2><p>既然回调的触发事件定义在<code>ContentHandler</code>中，那么不妨看看<a href="https://developer.android.google.cn/reference/org/xml/sax/ContentHandler?hl=en" target="_blank" rel="noopener">这个类</a>：<br><code>org.xml.sax.ContentHandler</code></p><p>大多数<code>SAX</code>应用程序都实现了这个接口，这个解析器就关联了一些文档事件，如元素开始、元素结束和文本数据。<br>在这个接口中事件的顺序是非常重要，所有的元素内容都出现在<code>startElement</code>事件和<code>endElement</code>事件之间。</p><table><tr><td>abstract void</td><td>characters(char[] ch, int start, int length)</td><td>接收字符数据的通知。</td></tr><tr><td>abstract void</td><td>endDocument()</td><td>接收文档结束的通知。</td></tr><tr><td>abstract void</td><td>endElement(String uri, String localName, String qName)</td><td>接收元素结束的通知。</td></tr><tr><td>abstract void</td><td>endPrefixMapping(String prefix)</td><td>结束前缀URI映射的范围。</td></tr><tr><td>abstract void</td><td>ignorableWhitespace(char[] ch, int start, int length)</td><td>接收元素内容中可忽略空白的通知。</td></tr><tr><td>abstract void</td><td>processingInstruction(String target, String data)</td><td>接收处理指令的通知。</td></tr><tr><td>abstract void</td><td>setDocumentLocator(Locator locator)</td><td>接收用于查找SAX文档事件原点的对象。</td></tr><tr><td>abstract void</td><td>skippedEntity(String name)</td><td>接收跳过的实体的通知。</td></tr><tr><td>abstract void</td><td>startDocument()</td><td>接收文档开头的通知。</td></tr><tr><td>abstract void</td><td>startElement(String uri, String localName, String qName, Attributes atts)</td><td>接收元素开头的通知。</td></tr><tr><td>abstract void</td><td>startPrefixMapping(String prefix, String uri)</td><td>开始前缀-URI名称空间映射的范围。</td></tr></table><p>看上面的函数，都是抽象函数，如果我们实现<code>ContentHandler</code>，就会比较麻烦，故而我们找它已知的子类<a href="https://developer.android.google.cn/reference/org/xml/sax/helpers/DefaultHandler.html?hl=en" target="_blank" rel="noopener">DefaultHandler</a>(SAX2事件处理程序的默认基类。)</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>这里解析的xml文件是在<code>res/raw/person.xml</code>，<code>raw</code>是新建的文件夹。具体的<code>xml</code>如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Tom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">></span></span>20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sex</span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sex</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>persions</span><span class="token punctuation">></span></span></code></pre><p>然后，就是写一个解析类，<code>saxParser.java</code>，它继承<code>DefaultHandler</code>，简单的实现如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>Attributes<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>SAXException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>DefaultHandler<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">saxParser</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String tagName <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> person pn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>person<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">characters</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>            <span class="token keyword">throws</span> SAXException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">characters</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> start<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//处理文本标签，容易猜想。ch字符数组,start开始位置，长度</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tagName <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            String data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> start<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                pn<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                pn<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tagName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                pn<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startElement</span><span class="token punctuation">(</span>String uri<span class="token punctuation">,</span> String localName<span class="token punctuation">,</span> String qName<span class="token punctuation">,</span>            Attributes attributes<span class="token punctuation">)</span> <span class="token keyword">throws</span> SAXException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">startElement</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> localName<span class="token punctuation">,</span> qName<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由于开始，结束，文本都是调用这三个函数，故而需要标记</span>        tagName <span class="token operator">=</span> localName<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">endElement</span><span class="token punctuation">(</span>String uri<span class="token punctuation">,</span> String localName<span class="token punctuation">,</span> String qName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> SAXException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">endElement</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> localName<span class="token punctuation">,</span> qName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>localName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pn<span class="token punctuation">)</span><span class="token punctuation">;</span>            pn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tagName <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SAXException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">startDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">endDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SAXException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">endDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回数据</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>person<span class="token operator">></span> <span class="token function">getPersons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后就是调用了，布局文件是一个按钮，这里就不给出了，<code>MainActivity.java</code>如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Button btn<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                InputStream in <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openRawResource</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>raw<span class="token punctuation">.</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>in<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    ArrayList<span class="token operator">&lt;</span>person<span class="token operator">></span> list <span class="token operator">=</span> <span class="token function">saxParser</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"resulut is null"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"input is null"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> ArrayList<span class="token operator">&lt;</span>person<span class="token operator">></span> <span class="token function">saxParser</span><span class="token punctuation">(</span>InputStream inputstream<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            SAXParserFactory spf <span class="token operator">=</span> SAXParserFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SAXParser saxParser <span class="token operator">=</span> spf<span class="token punctuation">.</span><span class="token function">newSAXParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            saxParser sax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">saxParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            saxParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>inputstream<span class="token punctuation">,</span> sax<span class="token punctuation">)</span><span class="token punctuation">;</span>            inputstream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sax<span class="token punctuation">.</span><span class="token function">getPersons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果：<br><img src="/images/201908/sax_parser_1.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidAPI阅读不会单词</title>
      <link href="/2019/08/raw-words-1/"/>
      <url>/2019/08/raw-words-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天是2019年8月22日，过得太快了。还是争取好好学几天。<br>虽然在学Android的时候，经常做的就是百度看看，看别人的案例，但好像大佬都会自己看API。<br>终究是没有养成看API的习惯，所以要开始培养。</p></blockquote><p>官方文档：<a href="https://developer.android.google.cn/guide/topics/providers/content-providers?hl=en" target="_blank" rel="noopener">地址</a></p><p>encapsulate<br>scenario    英[səˈnɑːriəʊ]       美[səˈnærioʊ]<br>n.    设想; 方案; 预测; (电影或戏剧的) 剧情梗概;<br>swap out    英[swɒp aʊt]     美[swɑːp aʊt]<br>网络    换出; 库再加上被置换; 换出了; 换出的; 换出到磁盘上;</p><p>retrieve    英[rɪˈtriːv] 美[rɪˈtriːv]<br>v.    取回; 索回; 检索数据; 扭转颓势; 挽回; 找回;</p><p>facilitate   英[fəˈsɪlɪteɪt]     美[fəˈsɪlɪteɪt]<br>v.    促进; 促使; 使便利;</p><pre class=" language-java"><code class="language-java"></code></pre><pre class=" language-java"><code class="language-java"></code></pre>]]></content>
      
      
      <categories>
          
          <category> words </category>
          
      </categories>
      
      
        <tags>
            
            <tag> words </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | Content Provider初识</title>
      <link href="/2019/08/android-14/"/>
      <url>/2019/08/android-14/</url>
      
        <content type="html"><![CDATA[<blockquote><p>mars视频19集，讲解Content Provider，按照惯例先百度一下它是什么？有什么用？<br>其实，在android第一讲中也简略提到过：<strong>内容提供程序管理一组共享的应用数据。您可以将数据存储在文件系统、SQLite 数据库、网络上或您的应用可以访问的任何其他永久性存储位置。 其他应用可以通过内容提供程序查询数据，甚至修改数据（如果内容提供程序允许）。</strong><br>简而言之：<strong>Android允许一个程序访问另一个程序的数据，并且保证被访问数据的安全性。主要是通过Content Provider来实现的。</strong></p></blockquote><p>官方文档：<a href="https://developer.android.google.cn/guide/topics/providers/content-providers?hl=en" target="_blank" rel="noopener">地址</a><br><code>Android</code> 四大组件之一</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li><code>Content Provider</code>提供了存储和获取数据的同一接口。</li><li>使用<code>ContentProvider</code>可以在不同的应用程序之间共享数据。（如：前面讲的<code>SQLite</code>它只能用于当前的应用程序，如果我们需要暴露本应用程序的存储数据的接口，就需要用到<code>ContentProvider</code>来实现。） </li><li>提供了定义数据安全性的机制。</li><li><code>Android</code>为一些常见的数据（如：音频、视频、图片和通讯录等）提供了<code>Content Provider</code>。（就可以直接用<code>Provider</code>来访问数据，而不关心具体的存储数据的细节。）</li></ol><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>借张图：<a href="https://www.runoob.com/android/android-content-providers.html" target="_blank" rel="noopener">地址</a><br><img src="/images/201908/content.jpg" alt><br>从上图中可以看出，主要的功能：</p><ol><li>应用程序间通信，即跨进程通信（每个程序处于不同进程）。</li><li><code>ContentProvider</code>相当于第三方搬运，实际并不存储数据，数据还是存放于网络、文件、数据库等。</li></ol><p><code>ContentProvider</code>内部可以使用不同的方式来存储数据。数据可以被存放在数据库，文件，甚至是网络。而向外提供统一的接口即可。<br>操作<code>ContentProvider</code>比较方便，和数据库很像。你可以查询，编辑它的内容，使用 <code>insert()</code>， <code>update()</code>， <code>delete()</code>和<code>query()</code>来添加或者删除内容。</p><h2 id="如何组织数据的？"><a href="#如何组织数据的？" class="headerlink" title="如何组织数据的？"></a>如何组织数据的？</h2><p><code>ContentProvider</code>内部可以使用不同的方式来存储数据，而需要向外提供统一的操作接口，那么我们就需要看它统一的接口是如何组织数据的。<br><code>ContentProvider</code>在安卓平台中展现为用户字典，像下面的一个表格：<br><img src="/images/201908/2019-08-24_132602.png" alt></p><p>以上每一行都代表一个实例，每一列都表示该<code>word</code>所代表的一些数据，表头也就是在<code>Provider</code>中存储的每一列的名字，<code>_ID</code>代表主键，由<code>Provider</code>自动维护。</p><h2 id="哪里需要用到"><a href="#哪里需要用到" class="headerlink" title="哪里需要用到"></a>哪里需要用到</h2><p>两种情况：</p><ol><li>访问其他应用程序中的现有内容提供程序，以共享数据。</li><li>在应用程序中创建新的内容提供程序以与其他应用程序共享数据。</li></ol><h2 id="如何用"><a href="#如何用" class="headerlink" title="如何用"></a>如何用</h2><p>如果要访问内容提供程序中的数据，可以使用 <code>ContentResolver</code>应用程序中的对象<code>Context</code>作为客户端与提供程序 进行通信。该 <code>ContentResolver</code>对象与提供者对象通信，提供者对象是实现的类的实例<code>ContentProvider</code>。提供者对象从客户端接收数据请求，执行请求的操作，并返回结果。该对象具有在提供者对象中调用具有相同名称的方法的方法，该对象是其中一个具体子类的实例<code>ContentProvider</code>。这些 <code>ContentResolver</code>方法提供了持久存储的基本“<code>CRUD</code>”（创建，检索，更新和删除）功能。如下图：<br><img src="/images/201908/content-provider-interaction.png" alt></p><h2 id="如何找到我们需要的ContentProvider？"><a href="#如何找到我们需要的ContentProvider？" class="headerlink" title="如何找到我们需要的ContentProvider？"></a>如何找到我们需要的ContentProvider？</h2><p><code>URI（Uniform Resource Identifier）</code>统一资源标识符。</p><ol><li>每一个<code>ContentProvider</code>都有一个公共的<code>URI</code>，这个<code>URI</code>用于表示这个<code>ContentProvider</code>所提供的数据。</li><li><code>Android</code>所提供的<code>ContentProvider</code>都存放在<code>android.provider</code>包中。</li></ol><p><code>URI</code>用来表示需要获得哪一部分的数据，<code>URI</code>的格式为：<br><code>&lt;协议://&lt;authority&gt;/&lt;path&gt;</code>  其中<code>authority</code>一般为程序的包名。<br>一个标准的URI的表示方式为：<code>content://com.example.app/table1</code><br>当然在查询数据的时候，主要用到的是<code>URI</code>的对象，所以以上<code>String</code>类型的参数，还需要通过<code>Uri uri = Uri.parse(&quot;content://com.example.app/table1&quot;)</code>获得，其中<code>table1</code>可以理解为表名。<br>可以理解成 <code>协议/主机中的位置/表/（行id/列index）</code><br>比如：<code>content：//com.example.app.provider/table/1/name</code><br>获取<code>provider</code>中<code>table</code>表第一行的<code>name</code>字段的值。<br><img src="/images/201908/content_provider_uri.jpg" alt></p><p><code>*</code>：匹配任意长度的任何有效字符的字符串<br><code>eg</code>: <code>content://com.example.app.provider/*</code>匹配provider的任何内容<br><code>＃</code>：匹配任意长度的数字字符的字符串<br><code>eg</code>: <code>content://com.example.app.provider/table/#</code>匹配provider中的table表的所有行</p><h2 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h2><p>作用：指定某个扩展名的文件用某种应用程序来打开<br>如：指定<code>.html</code>文件采用<code>text</code>应用程序打开<br>每种<code>MIME</code>类型 由两个部分组成 = 类型 + 子类型<br>如：<code>text/xml</code>，类型是<code>text</code>，子类型是<code>xml</code><br><code>ContentProvider</code>有两个方法返回<code>MIME</code>类型：</p><ol><li><code>getType()</code>该方法必须在<code>provider</code>中实现；<br>该<code>getType()</code>方法返回 <code>String``MIME</code>格式，该格式描述内容<code>URI</code>参数返回的数据类型。<br>所述<code>Uri</code>参数可以是图案，而不是一个特定的<code>URI</code>; 在这种情况下，您应该返回与模式匹配的内容<code>URI</code>相关的数据类型。<br>对于常见类型的数据（如文本，<code>HTML</code>或<code>JPEG</code>）， <code>getType()</code>应返回该数据的标准<code>MIME</code>类型。<br>对于指向一行或多行表数据的内容<code>URI</code>， <code>getType()</code>应返回<code>Android</code>特定于供应商的<code>MIME</code>格式的<code>MIME</code>类型：</li></ol><ul><li>键入部分： <code>vnd</code></li><li>子类型部分：<br>如果<code>URI</code>模式用于单行： <code>android.cursor.item/</code><br>如果<code>URI</code>模式适用于多行： <code>android.cursor.dir/</code></li><li>特定于提供者的部分：<code>vnd.&lt;name&gt;.&lt;type&gt;</code><br>该<code>&lt;name&gt;</code>值应该是全局唯一的，并且该<code>&lt;type&gt;</code>值对于相应的URI模式应该是唯一的。<br>一个很好的选择<code>&lt;name&gt;</code>是应用程序的Android软件包名称的某些部分。<br>一个很好的选择 <code>&lt;type&gt;</code>是一个字符串，用于标识与<code>URI</code>关联的表。</li><li><em>例如*</em>，如果提供者的权限是<code>com.example.app.provider</code>，并且它公开了一个名为的表 <code>table1</code>，则在<code>table1</code>中，多个行的<code>MIME</code>类型为：<br><code>vnd.android.cursor.dir/vnd.com.example.provider.table1</code><br>单行是：<br><code>vnd.android.cursor.item/vnd.com.example.provider.table1</code></li></ul><ol start="2"><li><code>getStreamTypes()</code>如果您的<code>provider</code>提供文件，您应该实施的方法。<br>如果您的提供商提供文件，请执行 <code>getStreamTypes()</code>。该方法返回<code>String</code>供应商可以为给定内容<code>URI</code>返回的文件的<code>MIME</code>类型数组。您应该过滤<code>MIME</code>类型过滤器参数提供的<code>MIME</code>类型，以便仅返回客户端要处理的<code>MIME</code>类型。<br>例如，考虑一个供应商，提供照片图像中的文件<code>.jpg</code>，<code>.png</code>和<code>.gif</code>格式。如果应用程序<code>ContentResolver.getStreamTypes()</code>使用过滤器字符串调用<code>image/*</code>，则该<code>ContentProvider.getStreamTypes()</code>方法应返回该数组：<br><code>{“image / jpeg”，“image / png”，“image / gif”}</code><br>如果应用程序只对<code>.jpg</code>文件感兴趣，那么它可以<code>ContentResolver.getStreamTypes()</code>使用过滤字符串调用 <code>*\/jpeg</code>，并 <code>ContentProvider.getStreamTypes()</code>应返回：<br><code>{&quot;image/jpeg&quot;}</code><br>如果您的提供程序未提供过滤器字符串中请求的任何<code>MIME</code>类型，<code>getStreamTypes()</code> 则应返回<code>null</code>。</li></ol><h2 id="检索数据的步骤"><a href="#检索数据的步骤" class="headerlink" title="检索数据的步骤"></a>检索数据的步骤</h2><ol><li>请求访问权限<br>默认情况下，存储在设备内部存储器中的数据文件对您的应用程序和提供程序是私有的。<br>默认情况下您的提供程序没有设置权限。要更改此设置，请使用元素的属性或子元素在清单文件中为提供程序设置权限<code>&lt;provider&gt;</code>。下面就介绍<code>&lt;provider&gt;</code>元素：</li></ol><ul><li>权限（<code>android:authorities</code>）<br>标识系统中整个提供程序的符号名称。<br><code>android:grantUriPermssions</code>：临时权限标志。<br><code>android:permission</code>：单一提供程序范围的读/写权限。<br><code>android:readPermission</code>：提供商范围的读取权限。<br><code>android:writePermission</code>：提供商范围的写入权限。</li><li>提供者类名（<code>android:name</code>）</li><li>启动和控制属性<br>这些属性决定了<code>Android</code>系统启动提供程序的方式和时间，提供程序的进程特征以及其他运行时设置：<br><code>android:enabled</code>：标志允许系统启动提供程序。<br><code>android:exported</code>：标记允许其他应用程序使用此提供程序。<br><code>android:initOrder</code>：相对于同一进程中的其他提供程序，应启动此提供程序的顺序。<br><code>android:multiProcess</code>：<code>Flag</code>允许系统在与调用客户端相同的进程中启动提供程序。<br><code>android:process</code>：提供程序应运行的进程的名称。<br><code>android:syncable</code>：指示提供程序的数据将与服务器上的数据同步的标志。</li><li>信息属性<br>提供者的可选图标和标签：<br><code>android:icon</code>：包含提供程序图标的可绘制资源。该图标将显示在“设置” &gt;“ 应用” &gt;“ 全部”中应用列表中的提供商标签旁边 。<br><code>android:label</code>：描述提供程序或其数据或两者的信息标签。该标签显示在“ 设置” &gt;“ 应用” &gt;“ 全部”中的应用列表中 。</li></ul><ol start="2"><li>提供查询数据的代码</li></ol><h2 id="ContentProvider所提供的函数"><a href="#ContentProvider所提供的函数" class="headerlink" title="ContentProvider所提供的函数"></a>ContentProvider所提供的函数</h2><h3 id="查询-query"><a href="#查询-query" class="headerlink" title="查询 query"></a>查询 query</h3><p><code>query(Uri uri, String[] projection, String selection, String[] selectionArgs,String sortOrder): return Cursor</code> 返回值查询到的数据集的游标对象。<br>为了从<code>ContentProvider</code>中得到<code>word</code>列表，就需要调用<code>ContentResolver.query()</code>，而这个<code>query()</code>方法，它调用的是由用户字典<code>Provider</code>中定义的<code>ContentProvider.query()</code>方法。参考如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Queries the user dictionary and returns results</span>cursor <span class="token operator">=</span> <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>    uri<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// The content URI of the words table</span>    projection<span class="token punctuation">,</span>                        <span class="token comment" spellcheck="true">// The columns to return for each row</span>    selection<span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">// Selection criteria</span>    selectionArgs<span class="token punctuation">,</span>                     <span class="token comment" spellcheck="true">// Selection criteria</span>    sortOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// The sort order for the returned rows</span></code></pre><p>解释：</p><table border="1"><tbody><tr><td>            <p>query（）方法参数</p>            </td>            <td>            <p>对应Sql部分</p>            </td>        </tr><tr><td>            <p>uri</p>            </td>            <td>            <p>from table_name</p>            </td>        </tr><tr><td>            <p>projection</p>            </td>            <td>            <p>select column1,column2</p>            </td>        </tr><tr><td>            <p>selection</p>            </td>            <td>            <p>where column = ?</p>            </td>        </tr><tr><td>            <p>selectionArgs</p>            </td>            <td>            <p>where条件中占位符对应的数据</p>            </td>        </tr><tr><td>            <p>sortOrder</p>            </td>            <td>            <p>order by column1,column2</p>            </td></tr></tbody></table><h3 id="增加insert"><a href="#增加insert" class="headerlink" title="增加insert"></a>增加insert</h3><p><code>insert(Uri url,ContentValues values): return Uri</code> 返回值为新建数据的<code>uri</code></p><h3 id="更新update"><a href="#更新update" class="headerlink" title="更新update"></a>更新update</h3><p><code>update(  Uri uri,ContentValues values,  String where,String[] selectionArgs): return int</code> 返回值为被更新的行数</p><h3 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除 delete"></a>删除 delete</h3><p><code>delete(  Uri url,  String where,String[] selectionArgs):return int</code>返回值被删除的行数</p><h3 id="得到数据类型-getType"><a href="#得到数据类型-getType" class="headerlink" title="得到数据类型 getType"></a>得到数据类型 getType</h3><p><code>getType(Uri uri):return String</code>返回当前 <code>Uri</code> 所代表数据的<code>MIME</code>类型</p><h3 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate"></a>onCreate</h3><p><code>onCreate():return Boolean</code> 进程第一次访问该<code>ContentProvider</code>时 由系统进行调用。由于运行在<code>ContentProvider</code>进程的主线程，故不能做耗时操作。</p><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><ol><li><code>query</code>、<code>insert</code>、<code>update</code>、<code>delete</code>由外部进程回调，并运行在<code>ContentProvider</code>进程的<code>Binder</code>线程池中（不是主线程）</li><li>存在多线程并发访问，需要实现线程同步<br>a. 若<code>ContentProvider</code>的数据存储方式是使用<code>SQLite</code> &amp; 一个，则不需要，因为<code>SQLite</code>内部实现好了线程同步，若是多个<code>SQLite</code>则需要，因为<code>SQL</code>对象之间无法进行线程同步<br>b. 若<code>ContentProvider</code>的数据存储方式是内存，则需要自己实现线程同步</li></ol><h2 id="ContentUris类"><a href="#ContentUris类" class="headerlink" title="ContentUris类"></a>ContentUris类</h2><p>作用：操作<code>URI</code><br>具体使用： 核心方法有两个：<br><code>withAppendedId()</code>：向<code>URI</code>追加一个<code>id</code></p><pre class=" language-java"><code class="language-java">Uri uri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"content://cn.scu.myprovider/user"</span><span class="token punctuation">)</span> Uri resultUri <span class="token operator">=</span> ContentUris<span class="token punctuation">.</span><span class="token function">withAppendedId</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 最终生成后的Uri为：content://cn.scu.myprovider/user/7</span></code></pre><p><code>parseId()</code>：从URL中获取ID</p><pre class=" language-java"><code class="language-java">Uri uri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"content://cn.scu.myprovider/user/7"</span><span class="token punctuation">)</span> <span class="token keyword">long</span> personid <span class="token operator">=</span> ContentUris<span class="token punctuation">.</span><span class="token function">parseId</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取的结果为:7</span></code></pre><p>原文链接：<a href="https://blog.csdn.net/carson_ho/article/details/76101093" target="_blank" rel="noopener">https://blog.csdn.net/carson_ho/article/details/76101093</a></p><h2 id="UriMatcher类"><a href="#UriMatcher类" class="headerlink" title="UriMatcher类"></a>UriMatcher类</h2><p>作用：在ContentProvider 中注册URI、根据 URI 匹配 ContentProvider 中对应的数据表</p><p>步骤1：初始化UriMatcher对象<br><code>UriMatcher matcher = new UriMatcher(UriMatcher.NO_MATCH);</code><br>常量UriMatcher.NO_MATCH  = 不匹配任何路径的返回码<br>即初始化时不匹配任何东西</p><p>步骤2：在ContentProvider 中注册URI（addURI（））<br><code>int URI_CODE_a = 1；</code><br><code>int URI_CODE_b = 2；</code><br><code>matcher.addURI(&quot;cn.scu.myprovider&quot;, &quot;user1&quot;, URI_CODE_a);</code><br><code>matcher.addURI(&quot;cn.scu.myprovider&quot;, &quot;user2&quot;, URI_CODE_b);</code><br>若<code>URI资源路径 = content://cn.scu.myprovider/user1</code> ，则返回注册码<code>URI_CODE_a</code><br>若<code>URI资源路径 = content://cn.scu.myprovider/user2</code> ，则返回注册码<code>URI_CODE_b</code></p><p>步骤3：根据URI 匹配<code>URI_CODE</code>，从而匹配<code>ContentProvider</code>中相应的资源（<code>match（）</code>）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span>Uri uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Uri uri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">" content://cn.scu.myprovider/user1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">switch</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据URI匹配的返回码是URI_CODE_a</span>     <span class="token comment" spellcheck="true">// 即matcher.match(uri) == URI_CODE_a</span>      <span class="token keyword">case</span> URI_CODE_a<span class="token operator">:</span>           <span class="token keyword">return</span> tableNameUser1<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 如果根据URI匹配的返回码是URI_CODE_a，则返回ContentProvider中的名为tableNameUser1的表</span>      <span class="token keyword">case</span> URI_CODE_b<span class="token operator">:</span>           <span class="token keyword">return</span> tableNameUser2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果根据URI匹配的返回码是URI_CODE_b，则返回ContentProvider中的名为tableNameUser2的表</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h2 id="ContentObserver类"><a href="#ContentObserver类" class="headerlink" title="ContentObserver类"></a>ContentObserver类</h2><p>定义：内容观察者<br>作用：观察<code>Uri</code>引起 <code>ContentProvider</code>中的数据变化 &amp; 通知外界（即访问该数据访问者）<br>当<code>ContentProvider</code>中的数据发生变化（增、删 &amp; 改）时，就会触发该 <code>ContentObserve</code>r类</p><p>具体使用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 步骤1：注册内容观察者ContentObserver</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>registerContentObserver（uri）；<span class="token comment" spellcheck="true">// 通过ContentResolver类进行注册，并指定需要观察的URI</span><span class="token comment" spellcheck="true">// 步骤2：当该URI的ContentProvider数据发生变化时，通知外界（即访问该ContentProvider数据的访问者）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserContentProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ContentProvider</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> Uri <span class="token function">insert</span><span class="token punctuation">(</span>Uri uri<span class="token punctuation">,</span> ContentValues values<span class="token punctuation">)</span> <span class="token punctuation">{</span>       db<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"userid"</span><span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notifyChange</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 通知访问者</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 步骤3：解除观察者</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>unregisterContentObserver（uri）；<span class="token comment" spellcheck="true">// 同样需要通过ContentResolver类进行解除</span></code></pre><h2 id="自定义Content-Provider"><a href="#自定义Content-Provider" class="headerlink" title="自定义Content Provider"></a>自定义Content Provider</h2><p>一般而言，自定义<code>ContentProvider</code>并不常见，使用<code>Android</code>内置的<code>ContentProvider</code>比较常见。</p><ol><li><p>定义<code>CONTENT_URI</code>常量，也就是该<code>ContentProvider</code>的资源标识符。</p></li><li><p>定义一个类，继承<code>ContentProvider</code><br>写一个类继承<a href="https://developer.android.google.cn/reference/android/content/ContentProvider.html" target="_blank" rel="noopener">ContentProvider</a>；<br><code>ContentProvider</code>是以结构化格式保存的数据的<strong>接口</strong>。在创建界面之前，您必须决定如何存储数据。您可以以任何您喜欢的形式存储数据，然后设计接口以根据需要读取和写入数据。</p></li><li><p>实现<code>query</code>、<code>insert</code>、<code>update</code>、<code>delete</code>、<code>getType</code>和<code>onCreate</code>方法</p></li><li><p>在<code>AndroidManifest.xml</code>中声明</p></li></ol><p>这里，就按照视频的讲解，然后做一个简单的案例：<br>布局文件没有做，也不需要修改，默认即可。</p><p>DatabaseHelper.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseHelper</span> <span class="token keyword">extends</span> <span class="token class-name">SQLiteOpenHelper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Create a helper object to create, open, and/or manage a database.</span>    <span class="token keyword">public</span> <span class="token function">DatabaseHelper</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> CursorFactory factory<span class="token punctuation">,</span>            <span class="token keyword">int</span> version<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> name<span class="token punctuation">,</span> factory<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Called when the database is created for the first time.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>SQLiteDatabase db<span class="token punctuation">)</span> <span class="token punctuation">{</span>        db<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"create table cp(id int, name varchar(20), age int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Called when the database needs to be upgraded.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onUpgrade</span><span class="token punctuation">(</span>SQLiteDatabase db<span class="token punctuation">,</span> <span class="token keyword">int</span> oldVersion<span class="token punctuation">,</span> <span class="token keyword">int</span> newVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>myProvider.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>ContentProvider<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>ContentUris<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>ContentValues<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>UriMatcher<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>database<span class="token punctuation">.</span>Cursor<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>database<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>database<span class="token punctuation">.</span>sqlite<span class="token punctuation">.</span>SQLiteDatabase<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Uri<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">myProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ContentProvider</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SQLiteDatabase db<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置ContentProvider的唯一标识</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String authorities <span class="token operator">=</span> <span class="token string">"com.weizu.intent.myProvider"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String Database_Name <span class="token operator">=</span> <span class="token string">"contentprovider.db"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> Database_Version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Uri CONTENT_URI <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"content://"</span> <span class="token operator">+</span> authorities <span class="token operator">+</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONTENT_TYPE <span class="token operator">=</span> <span class="token string">"vnd.android.cursor.dir/vnd.myprovider.user"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONTENT_TYPE_ITEM <span class="token operator">=</span> <span class="token string">"vnd.android.cursor.item/vnd.myprovider.user"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> UriMatcher matcher<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> USER_CODE_COLLECTION <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> USER_CODE_SINGLE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在ContentProvider 中注册URI</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        matcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UriMatcher</span><span class="token punctuation">(</span>UriMatcher<span class="token punctuation">.</span>NO_MATCH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//若URI资源路径 = content://com.weizu.intent.myProvider/user ，则返回注册码USER_CODE_COLLECTION</span>        matcher<span class="token punctuation">.</span><span class="token function">addURI</span><span class="token punctuation">(</span>authorities<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">,</span> USER_CODE_COLLECTION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//#匹配数字字符的字符串，指代的是记录，如URI资源路径 = content://com.weizu.intent.myProvider/user/1，表示第一行</span>        matcher<span class="token punctuation">.</span><span class="token function">addURI</span><span class="token punctuation">(</span>authorities<span class="token punctuation">,</span> <span class="token string">"user/#"</span><span class="token punctuation">,</span> USER_CODE_SINGLE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseHelper</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Database_Name<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWritableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                db<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"insert into cp values(1, 'Tom', 23)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                db<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"insert into cp values(2, 'Holly', 32)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                db<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"insert into cp values(3, 'Jarry', 20)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span>Uri arg0<span class="token punctuation">,</span> String arg1<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getType</span><span class="token punctuation">(</span>Uri uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">case</span> USER_CODE_COLLECTION<span class="token operator">:</span>            <span class="token keyword">return</span> CONTENT_TYPE<span class="token punctuation">;</span>        <span class="token keyword">case</span> USER_CODE_SINGLE<span class="token operator">:</span>            <span class="token keyword">return</span> CONTENT_TYPE_ITEM<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unknown URI : "</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Uri <span class="token function">insert</span><span class="token punctuation">(</span>Uri uri<span class="token punctuation">,</span> ContentValues values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> rowId <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"cp"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rowId <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Uri insertedUserUri <span class="token operator">=</span> ContentUris<span class="token punctuation">.</span><span class="token function">withAppendedId</span><span class="token punctuation">(</span>CONTENT_URI<span class="token punctuation">,</span> rowId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通知数据发生修改            getContext().getContentResolver().notifyChange(insertedUserUri, null);</span>            <span class="token keyword">return</span> insertedUserUri<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">"Failed to insert row into "</span> <span class="token operator">+</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Cursor <span class="token function">query</span><span class="token punctuation">(</span>Uri uri<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> projection<span class="token punctuation">,</span> String selection<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">,</span>            String sortOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cursor cursor <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"cp"</span><span class="token punctuation">,</span> projection<span class="token punctuation">,</span> selection<span class="token punctuation">,</span> selectionArgs<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> sortOrder<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cursor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>Uri arg0<span class="token punctuation">,</span> ContentValues arg1<span class="token punctuation">,</span> String arg2<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> arg3<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>MainActivity.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        Uri uri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"content://com.weizu.intent.myProvider/user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ContentResolver resolver <span class="token operator">=</span> <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">query</span><span class="token punctuation">(</span>resolver<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>        ContentValues values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"cp_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resolver<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">query</span><span class="token punctuation">(</span>resolver<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span>ContentResolver resolver<span class="token punctuation">,</span> Uri uri<span class="token punctuation">)</span><span class="token punctuation">{</span>        Cursor cursor <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>uri<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">moveToNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> _id <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String _name <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> _age <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"id="</span> <span class="token operator">+</span> _id <span class="token operator">+</span> <span class="token string">"|name="</span> <span class="token operator">+</span> _name <span class="token operator">+</span> <span class="token string">"|age="</span> <span class="token operator">+</span> _age<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cursor<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>添加权限：AndroidManifest.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span>            <span class="token attr-name"><span class="token namespace">android:</span>authorities</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.weizu.intent.myProvider<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.myProvider<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>exported</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">></span></span></code></pre><p>用Toast可以看见首次的查询和插入后的查询效果。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | InputStream和Bitmap之间的相互转换</title>
      <link href="/2019/08/android-13/"/>
      <url>/2019/08/android-13/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在写11讲，也就是下载文件的时候，遇到了问题。<br>①read-only file system<br>②NetworkOnMainThreadException<br>但是实际上我也是用adb shell改了文件夹的权限，但是没有用。<br>主要问题是第二个，我在按钮的OnClick中实际上是开了一个子线程，然后访问的网络，但是实际上是失败了。百度了一下说是：<strong>OnClick实际上是主线程调用的</strong> What？没毛病呀，我又不是用的主线程。<br>然后，想起了12讲的，写的ImageView加载图片是成功了的，于是就在上一个案例的基础上进行测试，最后发现原来是自己在message中传入的是InputStream到Handler中就会出现主线程无法访问网络的错误。<br>于是，大胆猜测，也就是说，虽然最终访问网络的流InputStream我们得到了本地，但是链接未短或者说这个InputStream还是能代表网络连接，故而我们需要流的转换。<br>果不其然，就成功了。</p></blockquote><h2 id="InputStream-gt-Bitmap"><a href="#InputStream-gt-Bitmap" class="headerlink" title="InputStream-&gt;Bitmap"></a>InputStream-&gt;Bitmap</h2><pre class=" language-java"><code class="language-java">InputStream in <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Bitmap bm <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Bitmap-gt-InputStream"><a href="#Bitmap-gt-InputStream" class="headerlink" title="Bitmap-&gt;InputStream"></a>Bitmap-&gt;InputStream</h2><pre class=" language-java"><code class="language-java">Bitmap bm <span class="token operator">=</span> xxx<span class="token punctuation">;</span>ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bm<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>Bitmap<span class="token punctuation">.</span>CompressFormat<span class="token punctuation">.</span>PNG<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> baos<span class="token punctuation">)</span><span class="token punctuation">;</span>InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | ImageView加载网络上图片</title>
      <link href="/2019/08/android-12/"/>
      <url>/2019/08/android-12/</url>
      
        <content type="html"><![CDATA[<blockquote><p>百度了一下，发现有很多种实现方式，但是大致的思路都是一样的。<br><a href="https://blog.csdn.net/qq_33200967/article/details/77263062" target="_blank" rel="noopener">地址一</a>   <a href="https://blog.csdn.net/xubaoyong/article/details/84427140" target="_blank" rel="noopener">地址二</a></p></blockquote><h2 id="不使用Handler，通过按钮更新UI视图"><a href="#不使用Handler，通过按钮更新UI视图" class="headerlink" title="不使用Handler，通过按钮更新UI视图"></a>不使用Handler，通过按钮更新UI视图</h2><p>敲敲打打，就开始写程序。然后发现程序崩溃！是的，然后又开始了百度之路。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>划重点：<strong>在android4.0 之后，谷歌已经禁止在主线程中访问网络，所以需要单开一个线程去访问网络</strong><br>划重点：<strong>Android规定仅仅能在主线程中更新UI。</strong><br>故而结合上面两点，我们就知道了大致的思路，开一个子线程访问网络，然后使用Handler机制传递消息到主线程，然后在主线程中更新UI。</p><p>按照这个思路，结合上面的两个博客地址链接，我们可以写出自己的程序案例。</p><h3 id="案例一：使用Button按钮点击加载图片"><a href="#案例一：使用Button按钮点击加载图片" class="headerlink" title="案例一：使用Button按钮点击加载图片"></a>案例一：使用Button按钮点击加载图片</h3><p>布局文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>     <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/image<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>     <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>     <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>下载本图片<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/btn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>MainActivity.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>HttpURLConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ProtocolException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Bitmap<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>BitmapFactory<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Message<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ImageView<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Button btn<span class="token punctuation">;</span>    <span class="token keyword">private</span> ImageView img<span class="token punctuation">;</span>    <span class="token keyword">private</span> Handler handler <span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        img <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    Bitmap bitmap <span class="token operator">=</span> <span class="token punctuation">(</span>Bitmap<span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                    img<span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://pics.sc.chinaz.com/files/pic/pic9/201811/bpic9300.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            HttpURLConnection conn <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//设置提交方式</span>                            conn<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//设置最大读取时间</span>                            conn<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//得到状态码</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">//拿到输入流</span>                                InputStream in <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                Bitmap bitmap <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//利用handler给主线程发送消息，更新imageView</span>                                Message msg <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                msg<span class="token punctuation">.</span>what <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                msg<span class="token punctuation">.</span>obj <span class="token operator">=</span> bitmap<span class="token punctuation">;</span>                                handler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ProtocolException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>添加网络访问权限：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>效果展示：<br><img src="/images/201908/ImageView_1.gif" alt></p><h3 id="案例二：使用复写ImageView来直接加载图片"><a href="#案例二：使用复写ImageView来直接加载图片" class="headerlink" title="案例二：使用复写ImageView来直接加载图片"></a>案例二：使用复写ImageView来直接加载图片</h3><p>不难看出，上面的案例需要点击按钮来触发图片的加载工作，但是实际中却经常是一启动就加载图片到ImageView上。可能会有这样的一种思路就是将图片加载的代码放入到OnCreate函数中，然后就可以直接加载。毫无疑问，这样是可以实现的，但是代码在OnCreate中太冗余了，不好看，我们尽量提供一种逻辑，在找到ImageView按钮，然后设置图片的地址，就可以显示图片。</p><p>布局文件，这里就不要按钮了，直接加载图片。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.weizu.intent.MyImageView</span>     <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/image<span class="token punctuation">"</span></span>     <span class="token punctuation">/></span></span></code></pre><p>写法也是自己写的MyImageView的类做标签名。下面就看看这个类是如何定义的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>HttpURLConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Bitmap<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>BitmapFactory<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Message<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>AttributeSet<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ImageView<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyImageView</span> <span class="token keyword">extends</span> <span class="token class-name">ImageView</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Bitmap bp <span class="token operator">=</span> <span class="token punctuation">(</span>Bitmap<span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                MyImageView<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setImageBitmap</span><span class="token punctuation">(</span>bp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"获取失败"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//这三个构造函数是必须复写的，快捷生成：Source->override/Implements Methods</span>    <span class="token keyword">public</span> <span class="token function">MyImageView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyImageView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">,</span> <span class="token keyword">int</span> defStyle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyImageView</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> AttributeSet attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setImageURL</span><span class="token punctuation">(</span><span class="token keyword">final</span> String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//子线程中完成联网获取数据的操作。</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                    HttpURLConnection connection <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span>url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    connection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>HttpURLConnection<span class="token punctuation">.</span>HTTP_OK<span class="token punctuation">)</span><span class="token punctuation">{</span>                        InputStream in <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Bitmap bp <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//发送消息给主线程，以更新UI</span>                        Message message <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        message<span class="token punctuation">.</span>what <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        message<span class="token punctuation">.</span>obj <span class="token operator">=</span> bp<span class="token punctuation">;</span>                        handler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后是MainActivity.java中，调用设置图片地址的自定义函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> MyImageView img<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        img <span class="token operator">=</span> <span class="token punctuation">(</span>MyImageView<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span><span class="token function">setImageURL</span><span class="token punctuation">(</span><span class="token string">"http://pics.sc.chinaz.com/files/pic/pic9/201811/bpic9300.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果：<br><img src="/images/201908/2019-08-20_155218.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | 文件下载</title>
      <link href="/2019/08/android-11/"/>
      <url>/2019/08/android-11/</url>
      
        <content type="html"><![CDATA[<blockquote><p>互联网的世界，文件的下载和上传是最常见的操作。当然，涉及到下载文件的协议有很多，如FTP、SFTP、HTTP等，这里就简单使用HTTP协议来下载文件。</p></blockquote><p>而还获取网络的文件数据，我们就需要获取网络的链接（连接）。百度了一下，可以用的类比较多，这里就使用<a href="https://developer.android.google.cn/reference/kotlin/java/net/HttpURLConnection?hl=en" target="_blank" rel="noopener">HttpURLConnection</a>来操作。如下摘抄一下：<br>使用这个类遵循以下的规则：</p><ol><li>使用<code>URL#openConnection()</code>来得到连接对象<code>HttpURLConnection</code></li><li>数据请求头部可以设置URI、登录凭证、首选数据类型、<code>Session</code>和<code>Cookies</code>。</li><li>上传数据实例如果包含请求体就必须配置 <code>setDoOutput(true)</code></li><li>读响应的数据，响应的头部通常包含响应头如响应正文的内容类型、长度、修改日期以及<code>Cookie</code>，响应体。如果没有正文，该流为空。</li><li>一旦读取了响应流数据，就应该调用<code>disconnect()</code>来关闭流，释放资源。</li></ol><p>在文档中提供了一个简单的案例：</p><pre class=" language-java"><code class="language-java">URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://www.android.com/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HttpURLConnection urlConnection <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">readStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    urlConnection<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有网页开发的都知道，<code>HTTP</code>协议是有状态码的，这里也有（该类的属性）：<br>状态码很多，这里就只谈<code>200</code>。</p><table><tr><td>HTTP_OK</td><td>HTTP状态代码200：好的。</td></tr></table><p>接下来就看看方法（包括从URLConnection中继承的）：【摘取部分】</p><table> <tr><td>String</td><td>getRequestMethod()</td><td>获取请求方法</td></tr> <tr><td>Int</td><td>getResponseCode()</td><td>获取状态代码</td></tr><tr><td>Unit</td><td>setRequestMethod(method: String!)</td><td>设置URL请求的方法,GET|POST|HEAD|OPTIONS|PUT|DELETE|TRACE</td></tr><tr><td>Int</td><td>getConnectTimeout()</td><td>返回连接超时的设置。0为无限超时。</td></tr><tr><td>Unit</td><td>setConnectTimeout(timeout: Int)</td><td>设置在打开与此URLConnection引用的资源的通信链接时要使用的指定超时值（以毫秒为单位）。如果超时在可以建立连接之前到期，则引发java.net.SocketTimeoutException。超时为零被解释为无限超时。</td></tr><tr><td>String</td><td>getContentEncoding()</td><td>返回content-encoding标头字段的值。</td></tr><tr><td>Int</td><td>getContentLength()</td><td>返回content-length标头字段的值。</td></tr><tr><td>Long</td><td>getContentLengthLong()</td><td>content-length以long形式返回标头字段的值。</td></tr><tr><td>String</td><td>getContentType()</td><td>返回content-type标头字段的值。</td></tr><tr><td>Long</td><td>getDate()</td><td>返回date标头字段的值。</td></tr><tr><td>InputStream</td><td>getInputStream()</td><td>返回从此打开的连接读取的输入流。如果读取超时在数据可用于读取之前到期，则在从返回的输入流读取时可以抛出SocketTimeoutException。</td></tr><tr><td>Long</td><td>getLastModified()</td><td>返回last-modified标头字段的值。结果是格林威治标准时间1970年1月1日以来的毫秒数。</td></tr><tr><td>OutputStream</td><td>getOutputStream()</td><td>返回写入此连接的输出流。</td></tr><tr><td>Int</td><td>getReadTimeout()</td><td>返回读取超时的设置。0为无限超时。</td></tr><tr><td>URL</td><td>getURL()</td><td>返回此值URLConnection的URL字段。</td></tr><tr><td>String</td><td>toString()</td><td>返回此值URLConnection的URL字段的字符串形式。</td></tr></table><p>下面就开始图片下载的案例：<br>图片地址：<a href="https://pic.cnblogs.com/avatar/1142647/20170416093225.png" target="_blank" rel="noopener">https://pic.cnblogs.com/avatar/1142647/20170416093225.png</a><br>这里就不写如果在<code>ImageView</code>中设置图片的了。在<a href="/2019/08/android-12/">下一篇博客</a>中写明了。这里就简单使用，然后下载下来。<br>所以这里也就不需要关注<code>ImageView</code>中是如何设置图片的，要不然，其实在设置图片的时候已经可以保存了，这里再继续用按钮点击事件去访问图片就多余了。这里就关注按钮的事件。</p><p>获取当前设备<code>SD</code>卡的目录：</p><pre class=" language-java"><code class="language-java">Environment<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>还是在adb shell中，在/mnt目录下，查看一下sdcard的权限，如图：<br><img src="/images/201908/2019-08-20_165057.png" alt></p><p>也就是只读的，我们需要修改一下：<br>运行命令：mount -o remount rw /<br>然后用chmod命令修改： chmod 777 sdcard  我这里为了方便，赋予了最高的读写权限<br>照例，还是查看一下：<br><img src="/images/201908/2019-08-20_165354.png" alt></p><p>然后，编程测试发现还是解决不了，这里就不做深入探究了。果断弃之。然后就用下面的目录，将文件还是放置到本应用下：</p><pre class=" language-java"><code class="language-java">File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"data/data/com.weizu.intent"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//File file  = new File(Environment.getExternalStorageDirectory(), filename); //抛弃</span></code></pre><p>布局文件是ImageView+Button，着重点也就是在Button的事件监听函数中：<br>至于ImageView中是如何设置网站的链接图片的，就参考下一讲吧。<br>这里就给出MainActivity.java，还是一样的访问网络的操作放置到子线程中，然后保存文件就在主线程中完成。使用Message对象传递消息的时候，不能直接设置消息是obj，要不然会报主线程中不能访问网络的错误，也就是在HttpURLConnection得到的InputStream是能代表网络的连接对象的，需要包装一下，这里如何包装就放置到了下下讲，看代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>HttpURLConnection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>Bitmap<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>BitmapFactory<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Message<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> MyImageView img<span class="token punctuation">;</span>    <span class="token keyword">private</span> Button btn<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String path <span class="token operator">=</span> <span class="token string">"http://pics.sc.chinaz.com/files/pic/pic9/201811/bpic9300.jpg"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Bitmap bp <span class="token operator">=</span> <span class="token punctuation">(</span>Bitmap<span class="token punctuation">)</span>msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//转换</span>                ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bp<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>Bitmap<span class="token punctuation">.</span>CompressFormat<span class="token punctuation">.</span>PNG<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> baos<span class="token punctuation">)</span><span class="token punctuation">;</span>                InputStream isBm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">saveFile</span><span class="token punctuation">(</span><span class="token string">"weizu.png"</span><span class="token punctuation">,</span> isBm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"获取失败"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        img <span class="token operator">=</span> <span class="token punctuation">(</span>MyImageView<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>        img<span class="token punctuation">.</span><span class="token function">setImageURL</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//子线程中完成联网获取数据的操作。</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                            HttpURLConnection connection <span class="token operator">=</span> <span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">)</span>url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            connection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>HttpURLConnection<span class="token punctuation">.</span>HTTP_OK<span class="token punctuation">)</span><span class="token punctuation">{</span>                                InputStream in <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                Bitmap bp <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeStream</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//发送消息给主线程，以更新UI</span>                                Message message <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                message<span class="token punctuation">.</span>what <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                message<span class="token punctuation">.</span>obj <span class="token operator">=</span> bp<span class="token punctuation">;</span>                                handler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            handler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveFile</span><span class="token punctuation">(</span>String filename<span class="token punctuation">,</span> InputStream in<span class="token punctuation">)</span><span class="token punctuation">{</span>        FileOutputStream fos <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"data/data/com.weizu.intent"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>            fos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span> buffer<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>存储权限和联网权限：</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.WRITE_EXTERNAL_STORAGE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p>效果，直接在Eclipse中用DBMS-&gt;File Explorer-&gt;data/data/com.weizu.intent目录下就可以看见weizu.png：<br><img src="/images/201908/2019-08-21_213335.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | SQLite数据库操作</title>
      <link href="/2019/08/android-10/"/>
      <url>/2019/08/android-10/</url>
      
        <content type="html"><![CDATA[<blockquote><p>得到了数据库的对象，接着就是对数据库进行操作。增删改查。我们就需要查看<a href="https://developer.android.google.cn/reference/android/database/sqlite/SQLiteDatabase.html" target="_blank" rel="noopener">SQLiteDatabase</a></p></blockquote><h2 id="数据库操作的一些方法"><a href="#数据库操作的一些方法" class="headerlink" title="数据库操作的一些方法"></a>数据库操作的一些方法</h2><p>下面就是我从文档中摘取的一些方法：</p><table><tr><td>返回值</td><td>方法</td><td>说明</td></tr><tr><td><font style="color:#A94947;">void</font></td><td><font style="color:#F08D49;">execSQL</font>(<font style="color:#00887A;">String</font> sql)</td><td>Execute a single SQL statement that is NOT a SELECT or any other SQL statement that returns data.</td></tr><tr><td><font style="color:#A94947;">void</font></td><td><font style="color:#F08D49;">execSQL</font>(<font style="color:#00887A;">String</font> sql, Object[] bindArgs)</td><td>Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE.</td></tr><tr><td><font style="color:#0000FF;">int</font></td><td><font style="color:#F08D49;">getVersion<font style="color:#F08D49;"></font>()</font></td><td>Gets the database version.</td></tr><tr><td><font style="color:#0000FF;">long</font></td><td><font style="color:#F08D49;">insert</font>(<font style="color:#00887A;">String</font> table, <font style="color:#00887A;">String</font> nullColumnHack, <a href="https://developer.android.google.cn/reference/android/content/ContentValues.html" target="_blank" rel="noopener">ContentValues</a> values)</td><td>Convenience method for inserting a row into the database.</td></tr><tr><td><font style="color:#0000FF;">boolean</font></td><td><font style="color:#F08D49;">isReadOnly</font>()</td><td>Returns true if the database is opened as read only.</td></tr><tr><td><font style="color:#0000FF;">boolean</font></td><td><font style="color:#F08D49;">isOpen</font>()</td><td>Returns true if the database is currently open.</td></tr><tr><td><a href="https://developer.android.google.cn/reference/android/database/Cursor.html" target="_blank" rel="noopener">Cursor</a></td><td><font style="color:#F08D49;">query</font>(<font style="color:#00887A;">boolean</font> distinct, <font style="color:#00887A;">String</font> table, <font style="color:#00887A;">String[]</font> columns, <font style="color:#00887A;">String</font> selection, <font style="color:#00887A;">String[]</font> selectionArgs, <font style="color:#00887A;">String</font> groupBy, <font style="color:#00887A;">String</font> having, <font style="color:#00887A;">String</font> orderBy, <font style="color:#00887A;">String</font> limit)</td><td>Query the given URL, returning a Cursor over the result set.</td></tr><tr><td><a href="https://developer.android.google.cn/reference/android/database/Cursor.html" target="_blank" rel="noopener">Cursor</a></td><td><font style="color:#F08D49;">query</font>(<font style="color:#00887A;">String</font> table, <font style="color:#00887A;">String[]</font> columns, <font style="color:#00887A;">String</font> selection, <font style="color:#00887A;">String[]</font> selectionArgs, <font style="color:#00887A;">String</font> groupBy, <font style="color:#00887A;">String</font> having, <font style="color:#00887A;">String</font> orderBy, <font style="color:#00887A;">String</font> limit)</td><td>Query the given table, returning a Cursor over the result set.</td></tr><tr><td><a href="https://developer.android.google.cn/reference/android/database/Cursor.html" target="_blank" rel="noopener">Cursor</a></td><td><font style="color:#F08D49;">query</font>(<font style="color:#00887A;">boolean</font> distinct, <font style="color:#00887A;">String</font> table, <font style="color:#00887A;">String[]</font> columns, <font style="color:#00887A;">String</font> selection, <font style="color:#00887A;">String[]</font> selectionArgs, <font style="color:#00887A;">String</font> groupBy, <font style="color:#00887A;">String</font> having, <font style="color:#00887A;">String</font> orderBy, <font style="color:#00887A;">String</font> limit, <a href="https://developer.android.google.cn/reference/android/os/CancellationSignal.html" target="_blank" rel="noopener">CancellationSignal</a> cancellationSignal)</td><td>Query the given URL, returning a Cursor over the result set.</td></tr><tr><td><a href="https://developer.android.google.cn/reference/android/database/Cursor.html" target="_blank" rel="noopener">Cursor</a></td><td><font style="color:#F08D49;">query</font>(<font style="color:#00887A;">String</font> table, <font style="color:#00887A;">String[]</font> columns, <font style="color:#00887A;">String</font> selection, <font style="color:#00887A;">String[]</font> selectionArgs, <font style="color:#00887A;">String</font> groupBy, <font style="color:#00887A;">String</font> having, <font style="color:#00887A;">String</font> orderBy)</td><td>Query the given table, returning a Cursor over the result set.</td></tr><tr><td><font style="color:#0000FF;">int</font></td><td><font style="color:#F08D49;">update</font>(<font style="color:#00887A;">String</font> table,  <a href="https://developer.android.google.cn/reference/android/content/ContentValues.html" target="_blank" rel="noopener">ContentValues</a> values, <font style="color:#00887A;">String</font> whereClause, <font style="color:#00887A;">String[]</font> whereArgs)</td><td>Convenience method for updating rows in the database.</td></tr></table><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="insert的SQL语句"><a href="#insert的SQL语句" class="headerlink" title="insert的SQL语句"></a>insert的SQL语句</h3><p>不妨看看<code>SQL</code>语句是如何进行插入数据的：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> TABLE_NAME <span class="token keyword">values</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">,</span> value4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> TABLE_NAME<span class="token punctuation">(</span>ParameterName1<span class="token punctuation">,</span>ParameterName2<span class="token punctuation">,</span> ParameterName3<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> value3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>故而如果在程序中指定，由于不确定那些参数是默认不写，故而需要指定表中列名+对应的值。<br>插入数据，我们就要先看<a href="https://developer.android.google.cn/reference/android/content/ContentValues.html" target="_blank" rel="noopener">ContentValues</a></p><h3 id="ContentValues"><a href="#ContentValues" class="headerlink" title="ContentValues"></a><a href="https://developer.android.google.cn/reference/android/content/ContentValues.html" target="_blank" rel="noopener">ContentValues</a></h3><p>用来存储值得序列，先看构造函数：<br><code>ContentValues()  Creates an empty set of values using the default initial size</code> 用默认大小的存储创建一个空的值集合。<br><code>ContentValues(int size)   Creates an empty set of values using the given initial size</code> 用指定大小的<code>size</code>存储创建一个空值集合。<br>既然是集合，我们就需要了解如何存储值：</p><table><tr><td>void</td><td><font style="color:#039BE5;">put</font>(<font style="color:#039BE5;">String</font> key, <font style="color:#039BE5;">Short</font> value)</td><td>Adds a value to the set</td></tr><tr><td>void</td><td><font style="color:#039BE5;">put</font>(<font style="color:#039BE5;">String</font> key, <font style="color:#039BE5;">Long</font> value)</td><td>Adds a value to the set</td></tr><tr><td>void</td><td><font style="color:#039BE5;">put</font>(<font style="color:#039BE5;">String</font> key, <font style="color:#039BE5;">Double</font> value)</td><td>Adds a value to the set</td></tr><tr><td>void</td><td><font style="color:#039BE5;">put</font>(<font style="color:#039BE5;">String</font> key, <font style="color:#039BE5;">Integer</font> value)</td><td>Adds a value to the set</td></tr><tr><td>void</td><td><font style="color:#039BE5;">put</font>(<font style="color:#039BE5;">String</font> key, <font style="color:#039BE5;">String</font> value)</td><td>Adds a value to the set</td></tr><tr><td>void</td><td><font style="color:#039BE5;">put</font>(<font style="color:#039BE5;">String</font> key, <font style="color:#039BE5;">Boolean</font> value)</td><td>Adds a value to the set</td></tr><tr><td>void</td><td><font style="color:#039BE5;">put</font>(<font style="color:#039BE5;">String</font> key, <font style="color:#039BE5;">Float</font> value)</td><td>Adds a value to the set</td></tr><tr><td>void</td><td><font style="color:#039BE5;">put</font>(<font style="color:#039BE5;">String</font> key, <font style="color:#039BE5;">byte[]</font> value)</td><td>Adds a value to the set</td></tr><tr><td>void</td><td><font style="color:#039BE5;">put</font>(<font style="color:#039BE5;">String</font> key, <font style="color:#039BE5;">Byte</font> value)</td><td>Adds a value to the set</td></tr><tr><td>void</td><td><font style="color:#039BE5;">putNull</font>(<font style="color:#039BE5;">String</font> key)</td><td>Adds a null value to the set.</td></tr><tr><td>void</td><td><font style="color:#039BE5;">remove</font>(<font style="color:#039BE5;">String</font> key)</td><td>Remove a single value.</td></tr><tr><td>int</td><td><font style="color:#039BE5;">size</font>()</td><td>Returns the number of values.</td></tr><tr><td>Object</td><td><font style="color:#039BE5;">get</font>(<font style="color:#039BE5;">String</font> key)</td><td>Gets a value.</td></tr><tr><td>void</td><td><font style="color:#039BE5;">clear</font>()</td><td>Removes all values.</td></tr><tr><td>boolean</td><td><font style="color:#039BE5;">containsKey</font>(<font style="color:#039BE5;">String</font> key)</td><td>Returns true if this object has the named value.</td></tr></table><p>几乎和Map集合一样，接着就进行简单的数据插入操作：<br>这里还是使用前一讲的<code>DatabaseHelper.java</code>类，在<code>MainActivity.java</code>中完成数据插入的操作。<br>在布局文件中新增一个按钮<code>insert</code>，然后添加监听，在监听函数中，写入插入数据的代码：</p><pre class=" language-java"><code class="language-java">insert <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>insert<span class="token punctuation">)</span><span class="token punctuation">;</span>insert<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DatabaseHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseHelper</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"weizu"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Create and/or open a database.创建过了，调用就是打开open</span>        <span class="token comment" spellcheck="true">//"create table weizu(id int, name varchar(20), age int)"</span>        SQLiteDatabase db <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getReadableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ContentValues values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"无涯明月"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        db<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"weizu"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同样的，还是使用<code>CMD</code>窗口，我们查看我们的数据库中是否有我们插入的数据：<br>使用命令：<code>select * form weizu;</code><br><img src="/images/201908/2019-08-18_161718.png" alt></p><p>控制台窗口的编码是<code>GBK</code>，数据库编码应该是<code>UTF-8</code>，出现了乱码。不过可见插入数据成功。</p><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><h3 id="update的SQL语句"><a href="#update的SQL语句" class="headerlink" title="update的SQL语句"></a>update的SQL语句</h3><p>不妨看看<code>SQL</code>语句是如何进行数据更新的：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> TABLE_NAME <span class="token keyword">set</span> ParameterName1 <span class="token operator">=</span> value1 <span class="token keyword">where</span> ParameterName2 <span class="token operator">=</span> value2 <span class="token keyword">update</span> TABLE_NAME <span class="token keyword">set</span> ParameterName1 <span class="token operator">=</span> value1<span class="token punctuation">,</span>ParameterName2 <span class="token operator">=</span> value2 <span class="token keyword">where</span> ParameterName3 <span class="token operator">=</span> value3</code></pre><p>在java操作数据库的时候，我们都知道可以使用<code>?</code>占位符，然后在后面确定值，这里也同样。</p><h3 id="update的原型："><a href="#update的原型：" class="headerlink" title="update的原型："></a>update的原型：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span> <span class="token punctuation">(</span>String table<span class="token punctuation">,</span>                 ContentValues values<span class="token punctuation">,</span>                 String whereClause<span class="token punctuation">,</span>                 String<span class="token punctuation">[</span><span class="token punctuation">]</span> whereArgs<span class="token punctuation">)</span></code></pre><p>看看参数的解释：</p><table>    <tbody><tr><th colspan="2">Parameters</th></tr>      <tr>        <td><code translate="no" dir="ltr"><span>table</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code>: the table to update in<p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>values</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>ContentValues</span></code>: a map from column names to new column values. null is a            valid value that will be translated to NULL.<p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>whereClause</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code>: the optional WHERE clause to apply when updating.            Passing null will update all rows.<p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>whereArgs</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code>: You may include ?s in the where clause, which            will be replaced by the values from whereArgs. The values            will be bound as Strings.<p></p></td>      </tr></tbody></table><p>上面的参数说明也告知了可以使用<code>?</code>占位符在<code>whereClause</code>中，然后在<code>whereArgs</code>中填值。而<code>values</code>也就是新的列值。下面就来个案例操作一下：<br>当然，还是在上面的案例的基础上，我们修改年龄为50。<br>同样的新增一个按钮<code>update</code>，然后添加事件监听：</p><pre class=" language-java"><code class="language-java">update <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span>update<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DatabaseHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseHelper</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"weizu"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SQLiteDatabase db <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getReadableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ContentValues values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        db<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"weizu"</span><span class="token punctuation">,</span> values<span class="token punctuation">,</span> <span class="token string">"id=?"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果，居然是两行，说明实际上原本的数据库没有随着重新安装程序删除掉。如下图：<br><img src="/images/201908/2019-08-18_164954.png" alt></p><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><h3 id="query的SQL语句"><a href="#query的SQL语句" class="headerlink" title="query的SQL语句"></a>query的SQL语句</h3><p>不妨看看<code>SQL</code>语句是如何进行数据更新的：<a href="https://blog.csdn.net/wfh6732/article/details/56680959" target="_blank" rel="noopener">原文</a></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> select_list　　　<span class="token keyword">FROM</span> table_name　　<span class="token punctuation">[</span> <span class="token keyword">WHERE</span> search_condition <span class="token punctuation">]</span>　　<span class="token punctuation">[</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> group_by_expression <span class="token punctuation">]</span>　　<span class="token punctuation">[</span> <span class="token keyword">HAVING</span> search_condition <span class="token punctuation">]</span>　　<span class="token punctuation">[</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> order_expression <span class="token punctuation">[</span> <span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">limit</span> m<span class="token punctuation">,</span>n<span class="token punctuation">]</span></code></pre><p>如：<code>select classNo  from table_name group by classNo  having(avg(成绩)&gt;70) order by classNo limit 0,10</code><br><code>limit 0,10</code>是从第一条开始,取10条数据</p><ol><li><code>where</code>后跟条件用来筛选我们所需的行。它后面可以跟的操作符有<code>=</code>、<code>！=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、 <code>in</code>、 <code>like</code>(可以和通配符%结合一起用，效果将会更好) 、<code>between....and.......</code>、 <code>AND</code>、<code>OR</code> 、<code>NOT</code> </li><li><code>group by</code>（<code>GROUP BY</code> 语句用于结合合计函数（也叫聚合函数<code>sum</code> <code>count</code> <code>avg</code> <code>max</code> <code>min</code>），根据一个或多个列对结果集进行分组。否则没有多大的意义）<br><code>group by</code> 有一个原则,就是 <code>select</code> 后面的所有列中,没有使用聚合函数的列,必须出现在 <code>group by</code> 后面<br>如果你使用了<code>group by</code>，而没有相应的使用聚合函数那么结果就没有意义了</li><li><code>having</code> 这个是针对查询的结果进行作用，只能对结果拥有的列进行操作，与<code>where</code>不同的是<code>where</code>是针对原表(就是<code>from</code>后面的那张表的字段)发挥作用。其中<code>having</code>里面可以使用聚合函数。为<code>group by</code>子句设置条件，类似于<code>where</code>为<code>select</code>语句设置条件的方法。<code>having</code>的查找条件可以包括集合函数表达式。除此之外，它的查找条件与<code>where</code>查找条件相同。</li></ol><h3 id="看query原型："><a href="#看query原型：" class="headerlink" title="看query原型："></a>看query原型：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Cursor <span class="token function">query</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span> distinct<span class="token punctuation">,</span>                 String table<span class="token punctuation">,</span>                 String<span class="token punctuation">[</span><span class="token punctuation">]</span> columns<span class="token punctuation">,</span>                 String selection<span class="token punctuation">,</span>                 String<span class="token punctuation">[</span><span class="token punctuation">]</span> selectionArgs<span class="token punctuation">,</span>                 String groupBy<span class="token punctuation">,</span>                 String having<span class="token punctuation">,</span>                 String orderBy<span class="token punctuation">,</span>                 String limit<span class="token punctuation">)</span></code></pre><p>参数：</p><table class="responsive">    <tbody><tr><th colspan="2"><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">参数</font></font></th></tr><tr>        <td><code translate="no" dir="ltr"><span>distinct</span></code></td><td width="100%">          <code translate="no" dir="ltr"><span>boolean</span></code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：如果您希望每一行都是唯一的，则为true，否则为false。</font></font><p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>table</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：用于查询的表名。</font></font><p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>columns</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：要查询的列的列名。</font><font style="vertical-align: inherit;">传递null将返回所有列，相当于 select语句 select关键字后面部分</font></font><p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>selection</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：一个过滤器，声明要返回哪些行，格式化为SQL WHERE子句（不包括WHERE本身）。</font><font style="vertical-align: inherit;">传递null将返回给定表的所有行。在条件子句中允许使用占位符。</font></font><p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>selectionArgs</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：您可以在selection中包含？，它将被selectionArgs中的值替换，以便它们出现在selection中。</font><font style="vertical-align: inherit;">这些值将绑定为字符串。</font></font><p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>groupBy</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：一个过滤器，声明如何对行进行分组，格式化为SQL GROUP BY子句（不包括GROUP BY本身）。</font><font style="vertical-align: inherit;">传递null将导致行不被分组。</font></font><p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>having</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：过滤器声明要在游标中包含哪些行组，如果正在使用行分组，则格式化为SQL HAVING子句（不包括HAVING本身）。</font><font style="vertical-align: inherit;">传递null将导致包含所有行组，并且在未使用行分组时是必需的。</font></font><p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>orderBy</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：如何对行进行排序，格式化为SQL ORDER BY子句（不包括ORDER BY本身）。</font><font style="vertical-align: inherit;">传递null将使用默认排序顺序，该顺序可能是无序的。</font></font><p></p></td>      </tr>      <tr>        <td><code translate="no" dir="ltr"><span>limit</span></code></td>        <td width="100%">          <code translate="no" dir="ltr"><span>String</span></code><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">：限制查询返回的行数，用于进行分页，格式为LIMIT子句。</font><font style="vertical-align: inherit;">传递null表示没有LIMIT子句。</font></font><p></p></td>      </tr></tbody></table><h3 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a><a href="https://developer.android.google.cn/reference/android/database/Cursor.html" target="_blank" rel="noopener">Cursor</a></h3><p>是一个接口，该接口提供对数据库查询结果集的随机读写权限。下面还是摘取部分的方法：</p><table><tr><td>int</td><td>getColumnCount()</td><td>返回总列数。</td></tr><tr><td>int</td><td>getColumnIndex(String columnName)</td><td>返回给定列名的从零开始的索引，如果该列不存在，则返回-1。</td></tr><tr><td>String</td><td>getColumnName(int columnIndex)</td><td>返回给定的从零开始的列索引处的列名称。</td></tr><tr><td>String[]</td><td>getColumnNames()</td><td>返回一个字符串数组，其中包含结果集中所有列的名称，按其在结果中列出的顺序排列。</td></tr><tr><td>int</td><td>getCount()</td><td>返回游标中的行数。</td></tr><tr><td>Bundle</td><td>getExtras()</td><td>返回一组额外值。</td></tr><tr><td>byte[]</td><td>getBlob(int columnIndex)</td><td>以字节数组的形式返回请求列的值。</td></tr><tr><td>double</td><td>getDouble(int columnIndex)</td><td>以double形式返回请求列的值。</td></tr><tr><td>float</td><td>getFloat(int columnIndex)</td><td>以float形式返回请求列的值。</td></tr><tr><td>long</td><td>getLong(int columnIndex)</td><td>以long形式返回请求列的值。</td></tr><tr><td>int</td><td>getPosition()</td><td>返回行集中光标的当前位置。</td></tr><tr><td>short</td><td>getShort(int columnIndex)</td><td>以short形式返回请求列的值。</td></tr><tr><td>String</td><td>    getString(int columnIndex)</td><td>以String形式返回所请求列的值。</td></tr><tr><td>int</td><td>getType(int columnIndex)</td><td>返回给定列的值的数据类型。</td></tr><tr><td>boolean</td><td>isAfterLast()</td><td>返回光标是否指向最后一行之后的位置。</td></tr><tr><td>boolean</td><td>isBeforeFirst()</td><td>返回光标是否指向第一行之前的位置。</td></tr><tr><td>boolean</td><td>isClosed()</td><td>如果光标关闭则返回true</td></tr><tr><td>boolean</td><td>isFirst()</td><td>返回光标是否指向第一行。</td></tr><tr><td>boolean</td><td>isLast()</td><td>返回光标是否指向最后一行。</td></tr><tr><td>boolean</td><td>isNull(int columnIndex)</td><td>true如果指示列中的值为null，则返回。</td></tr><tr><td>boolean</td><td>move(int offset)</td><td>将光标从当前位置向前或向后移动相对量。</td></tr><tr><td>boolean</td><td>moveToFirst()</td><td>将光标移动到第一行。</td></tr><tr><td>boolean</td><td>moveToLast()</td><td>将光标移动到最后一行。</td></tr><tr><td>boolean</td><td>moveToNext()</td><td>将光标移动到下一行。</td></tr><tr><td>boolean</td><td>moveToPosition(int position)</td><td>将光标移动到绝对位置。</td></tr><tr><td>boolean</td><td>moveToPrevious()</td><td>将光标移动到上一行。</td></tr> </table><p>案例：<br>还是加一个按钮，然后下面是MainActivity.java中新增的代码：</p><pre class=" language-java"><code class="language-java">query <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>query<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DatabaseHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseHelper</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"weizu"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SQLiteDatabase db <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getReadableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Cursor cursor <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"weizu"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"id=?"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">moveToNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> _id <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String _name <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> _age <span class="token operator">=</span> cursor<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>cursor<span class="token punctuation">.</span><span class="token function">getColumnIndex</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"id="</span> <span class="token operator">+</span> _id <span class="token operator">+</span> <span class="token string">"|name="</span> <span class="token operator">+</span> _name <span class="token operator">+</span> <span class="token string">"|age="</span> <span class="token operator">+</span> _age<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>效果：<br><img src="/images/201908/query_1.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | SQLite初使用</title>
      <link href="/2019/08/android-9/"/>
      <url>/2019/08/android-9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>按照惯例，百度一下：<a href="https://www.cnblogs.com/foxy/p/7725010.html" target="_blank" rel="noopener">地址</a>  <a href="http://www.sqlite.org" target="_blank" rel="noopener">官网地址</a><br><code>SQLite</code>是一款轻型的数据库，是遵守<code>ACID</code>的关联式数据库管理系统，它的设计目标是嵌入  式的，而且目前已经在很多嵌入式产品中使用了它，它占用资源非常的低，在嵌入式设备中，可能只需要几百K的内存就够了。它能够支持<code>Windows/Linux/Unix</code>等等主流的操作系统，同时能够跟很多程序语言相结合，比如<code>Tcl</code>、<code>PHP</code>、<code>Java</code>、<code>C++</code>、<code>.Net</code>等，还有<code>ODBC</code>接口，同样比起 <code>Mysql</code>、<code>PostgreSQL</code>这两款开源世界著名的数据库管理系统来讲，它的处理速度比他们都快。</p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>轻量级<br><code>SQLite</code>和<code>C/S</code>模式的数据库软件不同，它是进程内的数据库引擎，因此不存在数据库的客户端和服务器。使用<code>SQLite</code>一般只需要带上它的一个动态库，就可以享受它的全部功能。而且那个动态库的尺寸也挺小，以版本3.6.11为例，<code>Windows</code>下<code>487KB</code>、<code>Linux</code>下<code>347KB</code>。</p></li><li><p>不需要”安装”<br><code>SQLite</code>的核心引擎本身不依赖第三方的软件，使用它也不需要”安装”。有点类似那种绿色软件。</p></li><li><p>单一文件<br>数据库中所有的信息（比如表、视图等）都包含在一个文件内。这个文件可以自由复制到其它目录或其它机器上。</p></li><li><p>跨平台/可移植性<br>除了主流操作系统 <code>windows</code>，<code>linux</code>之后，<code>SQLite</code>还支持其它一些不常用的操作系统。</p></li><li><p>弱类型的字段<br>同一列中的数据可以是不同类型</p></li><li><p>开源</p></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><code>SQLite</code>采用的是动态数据类型，会根据存入值自动判断。</p><table><tr>    <td>数据类型</td>    <td>描述</td>  </tr><tr><td>NULL</td><td>这个值为空值</td></tr><tr><td>VARCHAR(n)</td><td>长度不固定且其最大长度为 n 的字串，n不能超过 4000。</td></tr><tr><td>CHAR(n)</td><td>长度固定为n的字串，n不能超过 254。</td></tr><tr><td>INTEGER</td><td>值被标识为整数,依据值的大小可以依次被存储为1,2,3,4,5,6,7,8.</td></tr><tr><td>REAL </td><td>所有值都是浮动的数值,被存储为8字节的IEEE浮动标记序号.</td></tr><tr><td>TEXT</td><td>值为文本字符串,使用数据库编码存储(TUTF-8, UTF-16BE or UTF-16-LE).</td></tr><tr><td>BLOB</td><td>值是BLOB数据块，以输入的数据格式进行存储。如何输入就如何存储,不改  变格式。</td></tr><tr><td>DATA</td><td>包含了 年份、月份、日期。</td></tr><tr><td>TIME </td><td>包含了 小时、分钟、秒。</td></tr></table><h2 id="SQLite创建和打开数据库的简单使用"><a href="#SQLite创建和打开数据库的简单使用" class="headerlink" title="SQLite创建和打开数据库的简单使用"></a>SQLite创建和打开数据库的简单使用</h2><h3 id="方式一：继承SQLiteOpenHelper"><a href="#方式一：继承SQLiteOpenHelper" class="headerlink" title="方式一：继承SQLiteOpenHelper"></a>方式一：继承SQLiteOpenHelper</h3><p>继承 <a href="https://developer.android.google.cn/reference/android/database/sqlite/SQLiteOpenHelper?hl=en" target="_blank" rel="noopener">SQLiteOpenHelper</a> 打开或创建数据库。（打开链接，可以看见这是一个抽象类，故而我们需要继承它）</p><p>按照<code>Mars</code>视频讲解，这里我先看能否创建成功数据库。<br>先写一个类<code>DatabaseHelper</code>继承<code>SQLiteOpenHelper</code>，<code>DatabaseHelper.java</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>database<span class="token punctuation">.</span>sqlite<span class="token punctuation">.</span>SQLiteDatabase<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>database<span class="token punctuation">.</span>sqlite<span class="token punctuation">.</span>SQLiteDatabase<span class="token punctuation">.</span>CursorFactory<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>database<span class="token punctuation">.</span>sqlite<span class="token punctuation">.</span>SQLiteOpenHelper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseHelper</span> <span class="token keyword">extends</span> <span class="token class-name">SQLiteOpenHelper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Create a helper object to create, open, and/or manage a database.</span>    <span class="token keyword">public</span> <span class="token function">DatabaseHelper</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> CursorFactory factory<span class="token punctuation">,</span>            <span class="token keyword">int</span> version<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> name<span class="token punctuation">,</span> factory<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Called when the database is created for the first time.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>SQLiteDatabase db<span class="token punctuation">)</span> <span class="token punctuation">{</span>        db<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"create table weizu(id int, name varchar(20), age int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Called when the database needs to be upgraded.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onUpgrade</span><span class="token punctuation">(</span>SQLiteDatabase db<span class="token punctuation">,</span> <span class="token keyword">int</span> oldVersion<span class="token punctuation">,</span> <span class="token keyword">int</span> newVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在<code>MainActivity.java</code>中简单创建表：<br>布局文件就是一个<code>Button</code>，这里就不给出了。<br><code>MainActivity.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>database<span class="token punctuation">.</span>sqlite<span class="token punctuation">.</span>SQLiteDatabase<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">.</span>DatabaseHelper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Button btn<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>            btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                DatabaseHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseHelper</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"weizu"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//Create and/or open a database.</span>                SQLiteDatabase db <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getReadableDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行就是一个按钮，当我们点击了按钮后，按照逻辑应该创建一个表<code>weizu</code>。接着就看看表的位置：<br>使用<code>adb</code>工具，我这里没有配置到环境变量，故而直接在我安装的路径的<code>SDK</code>的文件夹中的<code>tools</code>中找到<code>adb.exe</code>。按住<code>Shift</code>键，然后右键，在当前文件夹中打开<code>cmd</code>命令窗口：<br>输入<code>adb shell</code>，进入安卓的文件系统，如图：<br><img src="/images/201908/2019-08-17_171209.png" alt></p><p>然后，切换目录到运行的应用目录，我这里是<code>data/data/com.weizu.intent</code>，就可以看见<code>databases</code>文件夹，我们进入，就可以看见创建的数据库<code>weizu</code>：<br><img src="/images/201908/2019-08-17_171535.png" alt></p><p>不妨输入命令<code>sqlite3 weizu</code>，进入，然后可以看见表weizu：<br><img src="/images/201908/2019-08-17_171800.png" alt></p><p>这个博客写得很全面：<a href="https://blog.csdn.net/guyuelin123/article/details/60957305" target="_blank" rel="noopener">地址</a><br>当然，要操作数据库，需要先了解<code>SQLiteDatabase</code>。<a href="https://developer.android.google.cn/reference/android/database/sqlite/SQLiteDatabase.html" target="_blank" rel="noopener">SQLiteDatabase</a> <code>has methods to create, delete, execute SQL commands, and perform other common database management tasks.</code></p><h3 id="方式二：Context-openOrCreateDatabase"><a href="#方式二：Context-openOrCreateDatabase" class="headerlink" title="方式二：Context.openOrCreateDatabase"></a>方式二：Context.openOrCreateDatabase</h3><p>先找文档，看看这个函数的说明：</p><pre class=" language-text"><code class="language-text">abstract SQLiteDatabase!    openOrCreateDatabase(name: String!, mode: Int, factory: SQLiteDatabase.CursorFactory!)</code></pre><p><code>Open a new private SQLiteDatabase associated with this Context&#39;s application package.</code></p><table><tr><td>name: </td><td>The name (unique in the application package) of the database.</td></tr><tr><td>mode: </td><td>Operating mode. Value is either 0 or a combination of android.content.Context#MODE_PRIVATE, android.content.Context#MODE_WORLD_READABLE, android.content.Context#MODE_WORLD_WRITEABLE, android.content.Context#MODE_ENABLE_WRITE_AHEAD_LOGGING, and android.content.Context#MODE_NO_LOCALIZED_COLLATORS</td></tr><tr><td>factory: </td><td>An optional factory class that is called to instantiate a cursor when query is called.</td></tr></table><p>这里就是简单的改一下上面的按钮监听事件如下：</p><pre class=" language-java"><code class="language-java">btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SQLiteDatabase db <span class="token operator">=</span> MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">openOrCreateDatabase</span><span class="token punctuation">(</span><span class="token string">"intent.db"</span><span class="token punctuation">,</span> MODE_WORLD_WRITEABLE<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我这里还是按照上面的方法，查看一下，如下图：<br><img src="/images/201908/2019-08-18_111142.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | ListView的点击事件</title>
      <link href="/2019/08/android-7/"/>
      <url>/2019/08/android-7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>看了ListView的简单生成，在实际中点击是很常见的，这里就介绍ListView的点击事件</p></blockquote><p>还是上一个案例，我们在里面添加代码：<br>首先，为<code>item.java</code>的对象添加<code>toString</code>方法，因为后面我们需要用到该类的<code>toString</code>方法，就自动生成吧，<code>Source-&gt;Generate toString()...</code><br>然后选中定义的属性，<code>ok</code>。(<code>item.java</code>添加如下)</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"item [title="</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">", subTitle="</span> <span class="token operator">+</span> subTitle <span class="token operator">+</span> <span class="token string">", date="</span>                <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">", imageId="</span> <span class="token operator">+</span> imageId <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>然后在MainActivity.java中为listView注册列表点击的事件，注册在关联前即可：<br>代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 点击关联</span><span class="token comment" spellcheck="true">// 设置listview点击事件</span>listView<span class="token punctuation">.</span><span class="token function">setOnItemClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnItemClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onItemClick</span><span class="token punctuation">(</span>AdapterView<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> adapterView<span class="token punctuation">,</span> View view<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>        item item <span class="token operator">=</span> datalist<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第四部：关联</span>listView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>看看效果图：<br><img src="/images/201908/listview_click_1.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | handler</title>
      <link href="/2019/08/android-8/"/>
      <url>/2019/08/android-8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>首先百度一下什么是Handler，<a href="https://blog.csdn.net/nmwwbreed/article/details/79485773" target="_blank" rel="noopener">地址1</a>   <a href="https://blog.csdn.net/bobo8945510/article/details/51864102" target="_blank" rel="noopener">地址2</a><br>Handler是Android SDK来处理异步消息的核心类。<br>子线程与主线程通过Handler来进行通信。子线程可以通过Handler来通知主线程进行UI更新。<br><strong>使用原因：</strong><br>主线程无法进行时间比较繁长的任务，所以需要子线程进行处理，然而子线程无法进行UI的界面更新，所以我们需要使用handler来传递消息给主线程，让其完成UI的更新。由于主线程和子线程进行不同的时间工作，所要需要用MessageQueue用来保存子线程从Handler所发送未处理的消息，Looper依次取出MessageQueue中的消息传递给主线程响应处理。<br><strong>Android为什么要设计只能用handler机制更新UI呢？</strong><br>答：最根本的目的就是为了解决多线程并发的问题！<br>打个比方，如果在一个activity中有多个线程，并且没有加锁，就会出现界面错乱的问题。但是如果对这些更新UI的操作都加锁处理，又会导致性能下降。<br>处于对性能的问题考虑，Android给我们提供这一套更新UI的机制我们只需要遵循这种机制就行了。不用再去关系多线程的问题，所有的更新UI的操作，都是在主线程的消息队列中去轮训的。</p></blockquote><h1 id="Message的对象"><a href="#Message的对象" class="headerlink" title="Message的对象"></a>Message的对象</h1><p>查阅文档，找到了Handler对象的API，<a href="https://developer.android.google.cn/reference/android/os/Handler.html?hl=en" target="_blank" rel="noopener">地址</a><br>这里，我们先看<a href="https://developer.android.google.cn/reference/android/os/Message.html?hl=en" target="_blank" rel="noopener">Message</a>对象。<br>Defines a message containing a description and arbitrary data object that can be sent to a Handler. This object contains two extra int fields and an extra object field that allow you to not do allocations in many cases.<br>定义了一种包含一个描述和专门的数据对象的信息，该信息可以被发送到Handler。<br>这个对象包含了两个额外的int字段和一个额外的object字段，在许多情况下，它们允许你不进行分配。</p><ol><li>what属性：<br>int类型，主线程用来识别子线程发来的是什么消息。</li><li>arg1属性：<br>int类型，如果传递的消息类型为int型，可以将数字赋给arg1,arg2。</li><li>obj属性：<br>Objectt类型，如果传递的消息是String或者其他，可以赋给obj。</li></ol><h2 id="案例：更新进度条"><a href="#案例：更新进度条" class="headerlink" title="案例：更新进度条"></a>案例：更新进度条</h2><p>案例效果：<br><img src="/images/201908/handler_1.gif" alt></p><p>先看看布局文件，activity_main.xml：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProgressBar</span><span class="token style-attr language-css"><span class="token attr-name">        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">?<span class="token property">android</span><span class="token punctuation">:</span>attr/progressBarStyleHorizontal</span><span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/progressbar<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ProgressBar</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>         <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开始<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/btn<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>然后，就是MainActivity.java的逻辑处理，我参考的是mars的视频，然后总觉得他的案例差了些什么，然后就自己百度了一个<a href="https://blog.csdn.net/nmwwbreed/article/details/79485773" target="_blank" rel="noopener">案例</a>，杂糅了一下，便于自己理解。<br>我觉得，线程就应该只是调用一次，而视频中却是多次post，多次加入消息队列，就反复调用了一样，总感觉很别扭。（当然，可能理解有误）<br>MainActivity.java：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Handler<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Message<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">.</span>OnClickListener<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ProgressBar<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Button btn<span class="token punctuation">;</span>    <span class="token keyword">private</span> ProgressBar progressBar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        progressBar <span class="token operator">=</span> <span class="token punctuation">(</span>ProgressBar<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>progressbar<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// TODO: handle exception</span>                            <span class="token punctuation">}</span>                            Message message <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">obtainMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            message<span class="token punctuation">.</span>what <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                            message<span class="token punctuation">.</span>arg1 <span class="token operator">=</span> i<span class="token punctuation">;</span>                            handler<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                            i<span class="token operator">+=</span><span class="token number">10</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            handler<span class="token punctuation">.</span><span class="token function">removeCallbacks</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Handler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> what <span class="token operator">=</span> msg<span class="token punctuation">.</span>what<span class="token punctuation">;</span>            <span class="token keyword">int</span> arg1 <span class="token operator">=</span> msg<span class="token punctuation">.</span>arg1<span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"weizu"</span><span class="token punctuation">,</span> what <span class="token operator">+</span> <span class="token string">" || "</span><span class="token operator">+</span> arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>what <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                progressBar<span class="token punctuation">.</span><span class="token function">setProgress</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | 控件</title>
      <link href="/2019/08/android-6/"/>
      <url>/2019/08/android-6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>包括ProgressBar和ListView</p></blockquote><h1 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h1><p>看见<code>ProgressBar</code>，于是百度了一下，很多博客。大部分都是定制自己的进度条，都觉得系统的比较丑。这里还是先介绍系统自带的。<br>照例，先来张图片：<br><img src="/images/201908/2019-08-12_180831.png" alt></p><p>看看布局文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProgressBar</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/pb1<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">?<span class="token property">android</span><span class="token punctuation">:</span>attr/progressBarStyleHorizontal</span><span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProgressBar</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/pb2<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">?<span class="token property">android</span><span class="token punctuation">:</span>attr/progressBarStyle</span><span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/start<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开始<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>上面我设置水平进度条的总长度为100；在java代码中设置值得函数是<code>setProgress(int)</code>，下面就使用这个函数，在<code>MainActivity</code>中：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ProgressBar<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ProgressBar pb1<span class="token punctuation">;</span>    <span class="token keyword">private</span> ProgressBar pb2<span class="token punctuation">;</span>    <span class="token keyword">private</span> Button start<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        pb1 <span class="token operator">=</span> <span class="token punctuation">(</span>ProgressBar<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>pb1<span class="token punctuation">)</span><span class="token punctuation">;</span>        pb2 <span class="token operator">=</span> <span class="token punctuation">(</span>ProgressBar<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>pb2<span class="token punctuation">)</span><span class="token punctuation">;</span>        start <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        start<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 设置进度条的值</span>                i <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Done"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    pb1<span class="token punctuation">.</span><span class="token function">setProgress</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后就可以实现点击一个按钮，进度条就走10%。</p><h1 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h1><p>同样的，<code>ListView</code>也是比较牛皮，可定制性比较强，这里也还是介绍基础的用法。</p><h2 id="先来个最简答的用法"><a href="#先来个最简答的用法" class="headerlink" title="先来个最简答的用法"></a>先来个最简答的用法</h2><p>原文地址：<a href="https://blog.csdn.net/wangjun5159/article/details/51761621" target="_blank" rel="noopener">地址</a><br>按照博客干就是了，先给出效果图：<br><img src="/images/201908/2019-08-12_184255.png" alt></p><p>布局文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/list<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p><code>MainActivity</code>文件中：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ArrayAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ListAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ListView<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ListView list<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        list <span class="token operator">=</span> <span class="token punctuation">(</span>ListView<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"orange"</span><span class="token punctuation">,</span> <span class="token string">"water"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        ListAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayAdapter</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> android<span class="token punctuation">.</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>simple_list_item_1<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><hr><p>接着我们看看定制的，当然也是简单的定制<code>ListView</code>。<br>按照上面链接的博客案例，我们可以仿一个<code>QQ</code>的列表。<br><a href="https://blog.csdn.net/lw_android1/article/details/70170950" target="_blank" rel="noopener">参考博客</a><br>在网上找了下面的图片：<br><img src="/images/201908/timg2019-8-12.jpg" alt></p><p>跟着上面的博客做，效果如下：<br><img src="/images/201908/2019-08-14_152852.png" alt></p><p>先做布局文件activity_main.xml：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/list<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListView</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>然后是每一个列表对应的布局文件<code>item.xml</code>：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/image<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>65dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>65dp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>65dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fill_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            &lt;TextView                android:id="@+id/title"                android:layout_width="wrap_content"                android:layout_height="wrap_content"                android:layout_alignParentLeft="true"  //相对位置的布局设置                android:paddingLeft="10dp"                android:paddingTop="5dp"                android:text="博导"                android:textSize="18sp" />            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/date<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>13:20<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#606060<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            &lt;TextView                android:id="@+id/subTitle"                android:layout_width="match_parent"                android:layout_height="wrap_content"                android:layout_alignParentLeft="true"                android:layout_below="@+id/date"  //在谁下面                android:paddingLeft="10dp"                android:paddingBottom="10dp"                android:text="说些声明"                android:textColor="#606060" />        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>item.xml确定了，也就确定了所需要的实体中的数据的个数。<br>需要定义一个数据类<code>item.java</code>，存放<code>item</code>中的四个数据。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">item</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String subTitle<span class="token punctuation">;</span>    <span class="token keyword">private</span> String date<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> imageId<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getSubTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> subTitle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSubTitle</span><span class="token punctuation">(</span>String subTitle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subTitle <span class="token operator">=</span> subTitle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> date<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDate</span><span class="token punctuation">(</span>String date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getImageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> imageId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setImageId</span><span class="token punctuation">(</span><span class="token keyword">int</span> imageId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imageId <span class="token operator">=</span> imageId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">item</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> String subTitle<span class="token punctuation">,</span> String date<span class="token punctuation">,</span> <span class="token keyword">int</span> imageId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subTitle <span class="token operator">=</span> subTitle<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>imageId <span class="token operator">=</span> imageId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后根据这个实体类，定义对应的适配器<code>adapter.java</code>：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>LayoutInflater<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>ViewGroup<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ArrayAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ImageView<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">adapter</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayAdapter</span><span class="token operator">&lt;</span>item<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> resourceId<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//值得注意的是，这里装入了数据列表，我们不妨看看上面使用系统自带item布局创建的时候，ListAdapter adapter = new ArrayAdapter&lt;String>(this, android.R.layout.simple_list_item_1, data);也是传入了数据data</span>    <span class="token keyword">public</span> <span class="token function">adapter</span><span class="token punctuation">(</span>Context context<span class="token punctuation">,</span> <span class="token keyword">int</span> textViewResourceId<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>item<span class="token operator">></span> objects<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> textViewResourceId<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceId <span class="token operator">=</span> textViewResourceId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> View <span class="token function">getView</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">,</span> View convertView<span class="token punctuation">,</span> ViewGroup parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        item item <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token function">getItem</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取当前项的item实例</span>        <span class="token comment" spellcheck="true">//使用Inflater对象来将布局文件解析成一个View</span>        View view <span class="token operator">=</span> LayoutInflater<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>resourceId<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化一个对象</span>        <span class="token comment" spellcheck="true">//找到控件</span>        ImageView image <span class="token operator">=</span> <span class="token punctuation">(</span>ImageView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取该布局内的图片视图</span>        TextView title <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取该布局内的文本视图-title</span>        TextView subtitle <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>subTitle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取该布局内的文本视图-subtitle</span>        TextView date <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取该布局内的文本视图-date</span>        <span class="token comment" spellcheck="true">//设置控件资源</span>        image<span class="token punctuation">.</span><span class="token function">setImageResource</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getImageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为图片视图设置图片资源</span>        title<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为文本视图设置文本内容-title</span>        subtitle<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getSubTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为文本视图设置文本内容-subtitle</span>        date<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为文本视图设置文本内容-date</span>        <span class="token keyword">return</span> view<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>适配器的构造对象中，可以传入的数据对象还是挺多的，看看下图：<br><img src="/images/201908/2019-08-14_154222.png" alt></p><p>从上图可以看出，可以传入数组，而且前面已经有传入数组的案例；<br>可以传入List封装的对象，比如这样的：<code>ArrayList&lt;HashMap&lt;String, String&gt;&gt;</code><br>在<code>getView</code>中使用<code>item item = (item) getItem(position);</code> 来获取每一个具体的List中的数据内容。</p><p>最后就是按照步骤在<code>MainActivity.java</code>中创建列表：</p><ul><li>第一步：找到主布局文件<code>ListView</code>控件</li><li>第二部：生成分装数据的列表对象</li><li>第三部：创建适配器对象</li><li>第四部：关联</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ArrayAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ListAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>ListView<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>item<span class="token operator">></span> datalist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>item<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一步：找到主布局文件ListView控件</span>        ListView listView <span class="token operator">=</span> <span class="token punctuation">(</span>ListView<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第二部：生成分装数据的列表对象</span>        datalist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">item</span><span class="token punctuation">(</span><span class="token string">"群助手"</span><span class="token punctuation">,</span> <span class="token string">"百度经验-导师:呵呵"</span><span class="token punctuation">,</span> <span class="token string">"13:58"</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>avatar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        datalist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">item</span><span class="token punctuation">(</span><span class="token string">"安卓客服"</span><span class="token punctuation">,</span> <span class="token string">"新手-次奥:牛皮"</span><span class="token punctuation">,</span> <span class="token string">"15:08"</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>ic_launcher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        datalist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">item</span><span class="token punctuation">(</span><span class="token string">"吴越"</span><span class="token punctuation">,</span> <span class="token string">"添上天地:欢迎你，呵呵"</span><span class="token punctuation">,</span> <span class="token string">"16:20"</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>avatar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第三部：创建适配器对象</span>        adapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">adapter</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span> datalist<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第四部：关联</span>        listView<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span>adapter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        list = (ListView)findViewById(R.id.list);</span><span class="token comment" spellcheck="true">//        String[] data = {"apple", "banana", "orange", "water"};</span><span class="token comment" spellcheck="true">//        ListAdapter adapter = new ArrayAdapter&lt;String>(this, android.R.layout.simple_list_item_1, data);</span><span class="token comment" spellcheck="true">//        list.setAdapter(adapter);</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | 控件</title>
      <link href="/2019/08/android-5/"/>
      <url>/2019/08/android-5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>比较常见的控件：<br>RadioGroup和RadioButton、CheckBox、Toast</p></blockquote><p>先上案例截图：<br><img src="/images/201908/2019-08-12_173538.png" alt></p><p>再看看布局文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别：<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioGroup</span>            <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/sex<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>paddingTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>17dp<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioButton</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/man<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RadioButton</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/woman<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RadioGroup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>爱好：<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/zq<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>足球<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CheckBox</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/ymq<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>羽毛球<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>16sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>然后就是顺风顺水的注册监听函数；不过需要注意的是：</p><ol><li>单选监听的注册时注册到组；多选直注册到每一个具体的控件</li><li>两个监听都是<code>OnCheckedChangeListener</code>接口，但是所属不同的类</li><li>分别是：<code>RadioGroup.OnCheckedChangeListener</code>和<code>CompoundButton.OnCheckedChangeListener</code></li></ol><p>下面看看<code>MainActivity</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>CheckBox<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>CompoundButton<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RadioButton<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>RadioGroup<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> RadioGroup sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> RadioButton man<span class="token punctuation">;</span>    <span class="token keyword">private</span> RadioButton woman<span class="token punctuation">;</span>    <span class="token keyword">private</span> CheckBox zq<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        sex <span class="token operator">=</span> <span class="token punctuation">(</span>RadioGroup<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>        man <span class="token operator">=</span> <span class="token punctuation">(</span>RadioButton<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>        woman <span class="token operator">=</span> <span class="token punctuation">(</span>RadioButton<span class="token punctuation">)</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>woman<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//单选监听注册到组</span>        sex<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RadioGroup<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span>RadioGroup arg0<span class="token punctuation">,</span> <span class="token keyword">int</span> checkedId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// checkedId</span>                <span class="token comment" spellcheck="true">// 举例man：R.id.man对应的0x7f070001，然后转换成十进制2131165185，Toast一下可以看见checkedId</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>man<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> checkedId<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> man<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>                            woman<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//多选，监听注册到自己,举一个例子</span>        zq <span class="token operator">=</span> <span class="token punctuation">(</span>CheckBox<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>zq<span class="token punctuation">)</span><span class="token punctuation">;</span>        zq<span class="token punctuation">.</span><span class="token function">setOnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompoundButton<span class="token punctuation">.</span>OnCheckedChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCheckedChanged</span><span class="token punctuation">(</span>CompoundButton arg0<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isChecked<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>isChecked<span class="token punctuation">)</span><span class="token punctuation">{</span>                    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>                            zq<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | Android六大基本布局</title>
      <link href="/2019/08/android-4/"/>
      <url>/2019/08/android-4/</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="https://www.cnblogs.com/web424/p/6961764.html" target="_blank" rel="noopener">地址</a><br><img src="/images/201908/1152574-20170608110040887-334790846.png" alt><br>分别是：线性布局<code>LinearLayout</code>、表格布局<code>TableLayout</code>、相对布局<code>RelativeLayout</code>、<br>层布局<code>FrameLayout</code>、绝对布局<code>AbsoluteLayout</code>、网格布局<code>GridLayout</code>。</p><h1 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h1><p>所有包含在线性布局里的控件在线性方向上依次排列。</p><h2 id="orientation"><a href="#orientation" class="headerlink" title="orientation"></a>orientation</h2><p><code>android:orientation</code>控制方向，属性值垂直（<code>vertical</code>）和水平(<code>horizontal</code>)，默认水平方向。</p><h2 id="gravity"><a href="#gravity" class="headerlink" title="gravity"></a>gravity</h2><p><code>android:gravity</code>：内部控件对齐方式，常用属性值有<code>center</code>、<code>center_vertical</code>、<code>center_horizontal</code>、<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>等。</p><h2 id="layout-gravity"><a href="#layout-gravity" class="headerlink" title="layout_gravity"></a>layout_gravity</h2><p>这里要与<code>android:layout_gravity</code>区分开，<code>layout_gravity</code>是用来设置自身相对于父元素的布局。</p><h2 id="layout-weight"><a href="#layout-weight" class="headerlink" title="layout_weight"></a>layout_weight</h2><p><code>android:layout_weight</code>：权重，用来分配当前控件在剩余空间的大小。<br>使用权重一般要把分配该权重方向的长度设置为零，比如在水平方向分配权重，就把<code>width</code>设置为零。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>按照上面博客地址的案例，分析了一下，然后用不用的排列方式构造了一下，效果图如下：<br><img src="/images/201908/2019-08-10_145710.png" alt></p><p>我这里采用的是垂直方向的主体构造；比较简单的方式是先构造主体，再填充内容。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>         <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>             <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30sp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_alignParentRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>            <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>         <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>             <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M+<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>M-<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MR<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>             <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>C<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>÷<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>×<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>←<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>             <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>9<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>－<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>             <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#F5F5F5<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>＋<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>         <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>             <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>                <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#FCFCFC<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>             <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0dp<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#00B5E2<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#fff<span class="token punctuation">"</span></span>                 <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>＝<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><h1 id="TableLayout"><a href="#TableLayout" class="headerlink" title="TableLayout"></a>TableLayout</h1><p>表格布局，适用于多行多列的布局格式，每个<code>TableLayout</code>是由多个<code>TableRow</code>组成，一个<code>TableRow</code>就表示<code>TableLayout</code>中的每一行，这一行可以由多个子元素组成。<br><code>TableRow</code>实际是一个横向的线性布局<br><code>TableLayout</code>常用属性：<br><code>android:shrinkColumns</code>：设置可收缩的列，内容过多就收缩显示到第二行<br><code>android:stretchColumns</code>：设置可伸展的列，将空白区域填充满整个列<br><code>android:collapseColumns</code>：设置要隐藏的列<br>列的索引从0开始，<code>shrinkColumns</code>和<code>stretchColumns</code>可以同时设置。<br>子控件常用属性：<br><code>android:layout_column</code>：第几列<br><code>android:layout_span</code>：占据列数。<br><code>android:gravity</code>：内部控件对齐方式，常用属性值有<code>center</code>、<code>center_vertical</code>、<code>center_horizontal</code>、<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>等。</p><h1 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h1><p>相对布局可以让子控件相对于兄弟控件或父控件进行布局，可以设置子控件相对于兄弟控件或父控件进行上下左右对齐。</p><h2 id="RelativeLayout中子控件常用属性："><a href="#RelativeLayout中子控件常用属性：" class="headerlink" title="RelativeLayout中子控件常用属性："></a>RelativeLayout中子控件常用属性：</h2><h3 id="1-相对于父控件"><a href="#1-相对于父控件" class="headerlink" title="1. 相对于父控件"></a>1. 相对于父控件</h3><p><strong>例如：android:layout_alignParentTop=“true”</strong><br><code>android:layout_alignParentTop</code> 控件的顶部与父控件的顶部对齐;<br><code>android:layout_alignParentBottom</code> 控件的底部与父控件的底部对齐;<br><code>android:layout_alignParentLeft</code>    控件的左部与父控件的左部对齐;<br><code>android:layout_alignParentRight</code>     控件的右部与父控件的右部对齐;</p><h3 id="2-相对给定Id控件"><a href="#2-相对给定Id控件" class="headerlink" title="2. 相对给定Id控件"></a>2. 相对给定Id控件</h3><p><strong>例如：android:layout_above=“@id/*”</strong><br><code>android:layout_above</code>控件的底部置于给定ID的控件之上;<br><code>android:layout_below</code>控件的底部置于给定ID的控件之下;<br><code>android:layout_toLeftOf</code>控件的右边缘与给定ID的控件左边缘对齐;<br><code>android:layout_toRightOf</code>控件的左边缘与给定ID的控件右边缘对齐;<br><code>android:layout_alignBaseline</code>  控件的baseline与给定ID的baseline对齐;<br><code>android:layout_alignTop</code>    控件的顶部边缘与给定ID的顶部边缘对齐;<br><code>android:layout_alignBottom</code>   控件的底部边缘与给定ID的底部边缘对齐;<br><code>android:layout_alignLeft</code>      控件的左边缘与给定ID的左边缘对齐;<br><code>android:layout_alignRight</code>      控件的右边缘与给定ID的右边缘对齐;</p><h3 id="3-居中"><a href="#3-居中" class="headerlink" title="3. 居中"></a>3. 居中</h3><p><strong>例如：android:layout_centerInParent=“true”</strong><br><code>android:layout_centerHorizontal</code> 水平居中;<br><code>android:layout_centerVertical</code>    垂直居中;<br><code>android:layout_centerInParent</code>  父控件的中央;</p><h2 id="gravity-1"><a href="#gravity-1" class="headerlink" title="gravity"></a>gravity</h2><p><code>android:gravity</code>：内部控件对齐方式，常用属性值有<code>center</code>、<code>center_vertical</code>、<code>center_horizontal</code>、<code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code>等。</p><h1 id="FrameLayout"><a href="#FrameLayout" class="headerlink" title="FrameLayout"></a>FrameLayout</h1><p>帧布局或叫层布局，从屏幕左上角按照层次堆叠方式布局，后面的控件覆盖前面的控件。<br>该布局在开发中设计地图经常用到，因为是按层次方式布局，我们需要实现层面显示的样式时就可以<br>采用这种布局方式，比如我们要实现一个类似百度地图的布局，我们移动的标志是在一个图层的上面。<br>在普通功能的软件设计中用得也不多。层布局主要应用就是地图方面。</p><h1 id="AbsoluteLayout"><a href="#AbsoluteLayout" class="headerlink" title="AbsoluteLayout"></a>AbsoluteLayout</h1><p>绝对布局中将所有的子元素通过设置<code>android:layout_x</code> 和 <code>android:layout_y</code>属性，将子元素的坐标位置固定下来，即坐标(<code>android:layout_x</code>, <code>android:layout_y</code>) ，<code>layout_x</code>用来表示横坐标，<code>layout_y</code>用来表示纵坐标。屏幕左上角为坐标<code>(0,0)</code>，横向往右为正方，纵向往下为正方。实际应用中，这种布局用的比较少，因为<code>Android</code>终端一般机型比较多，各自的屏幕大小。分辨率等可能都不一样，如果用绝对布局，可能导致在有的终端上显示不全等。</p><h1 id="GridLayout"><a href="#GridLayout" class="headerlink" title="GridLayout"></a>GridLayout</h1>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | 声明父控件，显顶部返回</title>
      <link href="/2019/08/android-3/"/>
      <url>/2019/08/android-3/</url>
      
        <content type="html"><![CDATA[<p>先看看声明和未声明父控件的对比图：<br><img src="/images/201908/2019-08-09_183414.png" alt></p><p>多了返回按钮。<br>参考文档<a href="https://developer.android.google.cn/training/basics/firstapp/starting-activity" target="_blank" rel="noopener">地址</a></p><p>声明方法：只需要在 <code>AndroidManifest.xml</code> 文件中声明哪个 <code>Activity</code> 是逻辑父屏幕即可。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.DisplayMessageActivity<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>parentActivityName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- The meta-data tag is required if you support API level 15 and lower --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta-data</span>         <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.support.PARENT_ACTIVITY<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>    </code></pre><p>父<code>Activity</code>是<code>MainActivity</code>，子<code>Activity</code>是<code>DisplayMessageActivity</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | `Activity`生命周期</title>
      <link href="/2019/08/android-2/"/>
      <url>/2019/08/android-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>还是上一节的文档中，我们找到<code>Activity</code>部分的介绍，这里给出<a href="https://developer.android.google.cn/guide/components/activities/" target="_blank" rel="noopener">地址</a><br>选择部分摘要。</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Activity</code> 是一个应用组件，用户可与其提供的屏幕进行交互，以执行拨打电话、拍摄照片、发送电子邮件或查看地图等操作。 每个 <code>Activity</code> 都会获得一个用于绘制其用户界面的窗口。窗口通常会充满屏幕，但也可小于屏幕并浮动在其他窗口之上。</p><p>一个应用通常由多个彼此松散联系的 <code>Activity</code> 组成。 一般会指定应用中的某个 <code>Activity</code> 为“主”<code>Activity</code>，即首次启动应用时呈现给用户的那个 <code>Activity</code>。 而且每个 <code>Activity</code> 均可启动另一个 <code>Activity</code>，以便执行不同的操作。 每次新 <code>Activity</code> 启动时，前一 <code>Activity</code> 便会停止，但系统会在堆栈（“返回栈”）中保留该 <code>Activity</code>。 当新 <code>Activity</code> 启动时，系统会将其推送到返回栈上，并取得用户焦点。 返回栈遵循基本的“后进先出”堆栈机制，因此，当用户完成当前 <code>Activity</code> 并按“返回”按钮时，系统会从堆栈中将其弹出（并销毁），然后恢复前一 <code>Activity</code>。 </p><p>当一个 <code>Activity</code> 因某个新 <code>Activity</code> 启动而停止时，系统会通过该 <code>Activity</code> 的生命周期回调方法通知其这一状态变化。<code>Activity</code> 因状态变化—系统是创建 <code>Activity</code>、停止 <code>Activity</code>、恢复 <code>Activity</code> 还是销毁 <code>Activity</code>— 而收到的回调方法可能有若干种，每一种回调都会为您提供执行与该状态变化相应的特定操作的机会。</p><h1 id="Activity-生命周期"><a href="#Activity-生命周期" class="headerlink" title="Activity 生命周期"></a><code>Activity</code> 生命周期</h1><p><code>Activity</code> 基本上以三种状态存在：</p><ul><li><strong>继续</strong><br>此 <code>Activity</code> 位于屏幕前台并具有用户焦点。（有时也将此状态称作“运行中”。）</li><li><strong>暂停</strong><br>另一个 <code>Activity</code> 位于屏幕前台并具有用户焦点，但此 <code>Activity</code> 仍可见。也就是说，另一个 <code>Activity</code> 显示在此 <code>Activity</code> 上方，并且该 <code>Activity</code> 部分透明或未覆盖整个屏幕。 暂停的 <code>Activity</code> 处于完全活动状态（<code>Activity</code> 对象保留在内存中，它保留了所有状态和成员信息，并与窗口管理器保持连接），但在内存极度不足的情况下，可能会被系统终止。</li><li><strong>停止</strong><br>该 <code>Activity</code> 被另一个 <code>Activity</code> 完全遮盖（该 <code>Activity</code> 目前位于“后台”）。 已停止的 <code>Activity</code> 同样仍处于活动状态（<code>Activity</code> 对象保留在内存中，它保留了所有状态和成员信息，但未与窗口管理器连接）。 不过，它对用户不再可见，在他处需要内存时可能会被系统终止。</li></ul><p>如果 <code>Activity</code> 处于暂停或停止状态，系统可通过要求其结束（调用其 <code>finish()</code> 方法）或直接终止其进程，将其从内存中删除。（将其结束或终止后）再次打开 <code>Activity</code> 时，必须重建。</p><h2 id="对应的生命周期方法："><a href="#对应的生命周期方法：" class="headerlink" title="对应的生命周期方法："></a>对应的生命周期方法：</h2><ul><li><code>onCreate(Bundle savedInstanceState)</code><br>必须实现此方法。系统会在创建您的 <code>Activity</code> 时调用此方法。您应该在实现内初始化 <code>Activity</code> 的必需组件。 最重要的是，您必须在此方法内调用 <code>setContentView()</code>，以定义 <code>Activity</code> 用户界面的布局。始终后接 <code>onStart()</code>。</li><li><code>onStart()</code><br>在 <code>Activity</code> 即将对用户可见之前调用。<br>如果 <code>Activity</code> 转入前台，则后接 <code>onResume()</code>，如果 <code>Activity</code> 转入隐藏状态，则后接 <code>onStop()</code>。</li><li><code>onRestart()</code><br>在 <code>Activity</code> 已停止并即将再次启动前调用。<br>始终后接 <code>onStart()</code></li><li><code>onResume()</code><br>在 <code>Activity</code> 即将开始与用户进行交互之前调用。 此时，<code>Activity</code> 处于 <code>Activity</code> 堆栈的顶层，并具有用户输入焦点。<br>始终后接 <code>onPause()</code>。</li><li><code>onPause()</code><br>系统将此方法作为用户离开 <code>Activity</code> 的第一个信号（但并不总是意味着 <code>Activity</code> 会被销毁）进行调用。 您通常应该在此方法内确认在当前用户会话结束后仍然有效的任何更改（因为用户可能不会返回）。当系统即将开始继续另一个 <code>Activity</code> 时调用。 此方法通常用于确认对持久性数据的未保存更改、停止动画以及其他可能消耗 CPU 的内容，诸如此类。 它应该非常迅速地执行所需操作，因为它返回后，下一个 <code>Activity</code> 才能继续执行。<br>如果 <code>Activity</code> 返回前台，则后接 <code>onResume()</code>，如果 <code>Activity</code> 转入对用户不可见状态，则后接 <code>onStop()</code>。</li><li><code>onStop()</code><br>在 <code>Activity</code> 对用户不再可见时调用。如果 <code>Activity</code> 被销毁，或另一个 <code>Activity</code>（一个现有 <code>Activity</code> 或新 <code>Activity</code>）继续执行并将其覆盖，就可能发生这种情况。<br>如果 <code>Activity</code> 恢复与用户的交互，则后接 <code>onRestart()</code>，如果 <code>Activity</code> 被销毁，则后接 <code>onDestroy()</code>。</li><li><code>onDestroy()</code><br>在 <code>Activity</code> 被销毁前调用。这是 <code>Activity</code> 将收到的最后调用。 当 <code>Activity</code> 结束（有人对 <code>Activity</code> 调用了 <code>finish()</code>），或系统为节省空间而暂时销毁该 <code>Activity</code> 实例时，可能会调用它。 您可以通过 <code>isFinishing()</code>方法区分这两种情形。</li></ul><h2 id="三种说法需要了解"><a href="#三种说法需要了解" class="headerlink" title="三种说法需要了解"></a>三种说法需要了解</h2><ol><li><strong>整个生命周期</strong><br><code>Activity</code> 的<strong>整个生命周期</strong>发生在 <code>onCreate()</code> 调用与 <code>onDestroy()</code> 调用之间。您的 <code>Activity</code> 应在 <code>onCreate()</code> 中执行“全局”状态设置（例如定义布局），并释放 <code>onDestroy()</code> 中的所有其余资源。例如，如果您的 <code>Activity</code> 有一个在后台运行的线程，用于从网络上下载数据，它可能会在 <code>onCreate()</code> 中创建该线程，然后在 <code>onDestroy()</code> 中停止该线程。</li><li><strong>可见生命周期</strong><br><code>Activity</code> 的<strong>可见生命周期</strong>发生在 <code>onStart()</code> 调用与 <code>onStop()</code> 调用之间。在这段时间，用户可以在屏幕上看到 <code>Activity</code> 并与其交互。 例如，当一个新 <code>Activity</code> 启动，并且此 <code>Activity</code> 不再可见时，系统会调用 <code>onStop()</code>。您可以在调用这两个方法之间保留向用户显示 <code>Activity</code> 所需的资源。 例如，您可以在 <code>onStart()</code> 中注册一个 BroadcastReceiver 以监控影响 UI 的变化，并在用户无法再看到您显示的内容时在 <code>onStop()</code> 中将其取消注册。在 <code>Activity</code> 的整个生命周期，当 <code>Activity</code> 在对用户可见和隐藏两种状态中交替变化时，系统可能会多次调用 <code>onStart()</code> 和 <code>onStop()</code>。</li><li><strong>前台生命周期</strong><br><code>Activity</code> 的<strong>前台生命周期</strong>发生在 <code>onResume()</code>调用与 <code>onPause()</code> 调用之间。在这段时间，<code>Activity</code> 位于屏幕上的所有其他 <code>Activity</code> 之前，并具有用户输入焦点。 <code>Activity</code> 可频繁转入和转出前台 — 例如，当设备转入休眠状态或出现对话框时，系统会调用 <code>onPause()</code>。 由于此状态可能经常发生转变，因此这两个方法中应采用适度轻量级的代码，以避免因转变速度慢而让用户等待。</li></ol><p><img src="/images/201908/activity_lifecycle.png" alt="生命周期图示"></p><h2 id="协调-Activity"><a href="#协调-Activity" class="headerlink" title="协调 Activity"></a>协调 Activity</h2><p>当<code>Activity A</code> 启动<code>Activity B</code>时一系列操作的发生顺序：<br><code>Activity A</code>的 <code>onPause()</code> 方法执行。<br><code>Activity B</code> 的 <code>onCreate()</code>、<code>onStart()</code>和 <code>onResume()</code>方法依次执行。（<code>Activity B</code> 现在具有用户焦点。）<br>然后，如果<code>Activity A</code> 在屏幕上不再可见，则其 <code>onStop()</code> 方法执行。<br>您可以利用这种可预测的生命周期回调顺序管理从一个 <code>Activity</code> 到另一个<code>Activity</code> 的信息转变。 例如，如果您必须在第一个 <code>Activity</code> 停止时向数据库写入数据，以便下一个<code>Activity</code> 能够读取该数据，则应在<code>onPause()</code> 而不是 <code>onStop()</code> 执行期间向数据库写入数据。</p><h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><p>如果 <code>Activity</code> 转入对用户不可见状态，则后接 <code>onStop()</code>。<br>即<code>onStop()</code>在 <code>Activity</code>对用户不再可见时调用。<br>也就是没有完全遮盖的时候，第一个<code>Activity</code>是不会调用 <code>onStop()</code></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android | activity中Intent</title>
      <link href="/2019/08/android-1/"/>
      <url>/2019/08/android-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要涉及两点，如何启动<code>Activity</code>；如何传递数据；</p></blockquote><p>官方文档地址：<a href="https://developer.android.google.cn/guide/components/fundamentals.html" target="_blank" rel="noopener">地址链接</a></p><h1 id="应用组件"><a href="#应用组件" class="headerlink" title="应用组件"></a>应用组件</h1><p>应用组件是 <code>Android</code> 应用的基本构建基块。每个组件都是一个不同的点，系统可以通过它进入您的应用。 并非所有组件都是用户的实际入口点，有些组件相互依赖，但每个组件都以独立实体形式存在，并发挥特定作用 — 每个组件都是唯一的构建基块，有助于定义应用的总体行为。<br>共有四种不同的应用组件类型。每种类型都服务于不同的目的，并且具有定义组件的创建和销毁方式的不同生命周期。<br>以下便是这<strong>四种应用组件</strong>类型：</p><ol><li><strong>Activity</strong><br><code>Activity</code>表示具有用户界面的单一屏幕。例如，电子邮件应用可能具有一个显示新电子邮件列表的<code>Activity</code>、一个用于撰写电子邮件的 <code>Activity</code> 以及一个用于阅读电子邮件的 <code>Activity</code>。 尽管这些<code>Activity</code>通过协作在电子邮件应用中形成了一种紧密结合的用户体验，但每一个 <code>Activity</code> 都独立于其他 <code>Activity</code>而存在。 因此，其他应用可以启动其中任何一个 <code>Activity</code>（如果电子邮件应用允许）。 例如，相机应用可以启动电子邮件应用内用于撰写新电子邮件的 <code>Activity</code>，以便用户共享图片。</li><li><strong>服务（Service）</strong><br>服务是一种在后台运行的组件，用于执行长时间运行的操作或为远程进程执行作业。 服务不提供用户界面。 例如，当用户位于其他应用中时，服务可能在后台播放音乐或者通过网络获取数据，但不会阻断用户与<code>Activity</code> 的交互。 诸如 <code>Activity</code> 等其他组件可以启动服务，让其运行或与其绑定以便与其进行交互。</li><li><strong>内容提供程序（ContentProvider）</strong><br>内容提供程序管理一组共享的应用数据。您可以将数据存储在文件系统、<code>SQLite</code> 数据库、网络上或您的应用可以访问的任何其他永久性存储位置。 其他应用可以通过内容提供程序查询数据，甚至修改数据（如果内容提供程序允许）。 例如，<code>Android</code> 系统可提供管理用户联系人信息的内容提供程序。 因此，任何具有适当权限的应用都可以查询内容提供程序的某一部分<code>（如 ContactsContract.Data）</code>，以读取和写入有关特定人员的信息。</li><li><strong>广播接收器（BroadcastReceiver）</strong><br>广播接收器是一种用于响应系统范围广播通知的组件。 许多广播都是由系统发起的 — 例如，通知屏幕已关闭、电池电量不足或已拍摄照片的广播。应用也可以发起广播 — 例如，通知其他应用某些数据已下载至设备，并且可供其使用。 尽管广播接收器不会显示用户界面，但它们可以创建状态栏通知，在发生广播事件时提醒用户。 但广播接收器更常见的用途只是作为通向其他组件的“通道”，设计用于执行极少量的工作。 例如，它可能会基于事件发起一项服务来执行某项工作。并且每条广播都作为<code>Intent</code> 对象进行传递。</li></ol><p><code>Android</code> 系统设计的独特之处在于，任何应用都可以启动其他应用的组件。<br>由于系统在单独的进程中运行每个应用，且其文件权限会限制对其他应用的访问，因此您的应用无法直接启动其他应用中的组件， 但 <code>Android</code> 系统却可以。因此，要想启动其他应用中的组件，您必须向系统传递一则消息，说明您想启动特定组件的 <code>Intent</code>。 系统随后便会为您启动该组件。</p><h1 id="启动组件"><a href="#启动组件" class="headerlink" title="启动组件"></a>启动组件</h1><p>四种组件类型中的三种 — <code>Activity</code>、服务和广播接收器 — 通过名为 <code>Intent</code>的异步消息进行启动。<code>Intent</code>会在运行时将各个组件相互绑定（您可以将<code>Intent</code> 视为从其他组件请求操作的信使），无论组件属于您的应用还是其他应用。</p><p><code>Intent</code>使用<code>Intent</code> 对象创建，它定义的消息用于启动特定组件或特定类型的组件 — <code>Intent</code>可以是显式的，也可以是隐式的。<br>每种类型的组件有不同的启动方法：</p><ul><li>您可以通过将<code>Intent</code> 传递到 <code>startActivity()</code> 或<code>startActivityForResult()</code>（当您想让 <code>Activity</code>返回结果时）来启动 <code>Activity</code>（或为其安排新任务）。</li><li>您可以通过将　<code>Intent</code> 传递到<code>startService()</code>来启动服务（或对执行中的服务下达新指令）。 或者，您也可以通过将 <code>Intent</code> 传递到<code>bindService()</code>来绑定到该服务。</li><li>您可以通过将 <code>Intent</code> 传递到<code>sendBroadcast()</code>、<code>sendOrderedBroadcast()</code> 或 <code>sendStickyBroadcast()</code> 等方法来发起广播；</li><li>您可以通过在<code>ContentResolver</code> 上调用 <code>query()</code> 来对内容提供程序执行查询。</li></ul><h1 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h1><p>文档地址：<a href="https://developer.android.google.cn/guide/components/intents-filters.html" target="_blank" rel="noopener">地址</a><br>Intent 是一个消息传递对象，您可以使用它从其他应用组件请求操作。尽管<code>Intent</code> 可以通过多种方式促进组件之间的通信，但其基本用例主要包括以下三个：</p><ul><li><p><strong>启动 Activity</strong>：<br><code>Activity</code> 表示应用中的一个屏幕。通过将<code>Intent</code>传递给 <code>startActivity()</code>，您可以启动新的<code>Activity</code> 实例。Intent 描述了要启动的<code>Activity</code>，并携带了任何必要的数据。<br>如果您希望在<code>Activity</code> 完成后收到结果，请调用<code>startActivityForResult()</code>。在 Activity 的 <code>onActivityResult()</code>回调中，您的 <code>Activity</code>将结果作为单独的<code>Intent</code>对象接收。如需了解详细信息，请参阅<code>Activity</code> 指南。</p></li><li><p><strong>启动服务</strong>：<br><code>Service</code> 是一个不使用用户界面而在后台执行操作的组件。通过将<code>Intent</code> 传递给 <code>startService()</code>，您可以启动服务执行一次性操作（例如，下载文件）。<code>Intent</code>描述了要启动的服务，并携带了任何必要的数据。<br>如果服务旨在使用客户端-服务器接口，则通过将<code>Intent</code> 传递给<code>bindService()</code>，您可以从其他组件绑定到此服务。如需了解详细信息，请参阅服务指南。</p></li><li><p><strong>传递广播</strong>：<br>广播是任何应用均可接收的消息。系统将针对系统事件（例如：系统启动或设备开始充电时）传递各种广播。通过将 <code>Intent</code> 传递给 <code>sendBroadcast()</code>、<code>sendOrderedBroadcast()</code> 或 <code>sendStickyBroadcast()</code>，您可以将广播传递给其他应用。</p></li></ul><p><code>Intent</code> 对象携带了<code>Android</code> 系统用来确定要启动哪个组件的信息（例如，准确的组件名称或应当接收该<code>Intent</code> 的组件类别），以及收件人组件为了正确执行操作而使用的信息（例如，要采取的操作以及要处理的数据）。</p><p>在<code>Activity</code>之间传递数据，就涉及一个对象<code>Intent</code>，它包含了一组信息：</p><ul><li><code>Component name</code>(要启动的组件名称。)；</li><li><code>Action</code>（指定要执行的通用操作（例如，“查看”或“选取”）的字符串。）；</li><li><code>Data</code>（引用待操作数据和/或该数据 MIME 类型的 URI（Uri 对象）。）；</li><li><code>Category</code>（一个包含应处理 Intent 组件类型的附加信息的字符串。）；</li><li><code>Extras</code>（携带完成请求操作所需的附加信息的键值对。）；</li><li><code>Flags</code>（在 Intent 类中定义的、充当 Intent 元数据的标志。 标志可以指示 Android 系统如何启动 Activity，以及启动之后如何处理）；</li></ul><h2 id="案例一：启动同一应用Activity"><a href="#案例一：启动同一应用Activity" class="headerlink" title="案例一：启动同一应用Activity"></a>案例一：启动同一应用Activity</h2><p><code>MainActivity.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>Menu<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button btn<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"这是传递的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                intent<span class="token punctuation">.</span><span class="token function">setClass</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> OtherActivity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>OtherActivity.java</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>Menu<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>TextView<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OtherActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> TextView textView<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_other<span class="token punctuation">)</span><span class="token punctuation">;</span>        Intent intent <span class="token operator">=</span> <span class="token function">getIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Bundle bundle <span class="token operator">=</span> intent<span class="token punctuation">.</span><span class="token function">getExtras</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textView <span class="token operator">=</span> <span class="token punctuation">(</span>TextView<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        textView<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>bundle<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对应的<code>layout</code>布局文件，<code>res/layout/activity_main.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/btn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/btn<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span></code></pre><p><code>activity_other.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/text<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerHorizontal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_centerVertical</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/other<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>当然，引用的<code>values</code>字符串定义新增如下：<br><code>values/string.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Other Activity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Go<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span></code></pre><p>最后，在资源配置文件中需要声明我们新建的<code>Activity</code>：<br><code>AndroidManifest.xml</code></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>            <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.weizu.intent.OtherActivity<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/other<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>下面展示一下案例的效果：<br><img src="/images/201908/intent_1.gif" alt></p><p>当然了，既然有启动同一应用的<code>Activity</code>，那么也就有：</p><h2 id="案例二：启动不同应用Activity"><a href="#案例二：启动不同应用Activity" class="headerlink" title="案例二：启动不同应用Activity"></a>案例二：启动不同应用Activity</h2><p>MainActivity.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weizu<span class="token punctuation">.</span>intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Uri<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>app<span class="token punctuation">.</span>Activity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Button<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Button btn<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn <span class="token operator">=</span> <span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>        btn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">View<span class="token punctuation">.</span>OnClickListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClick</span><span class="token punctuation">(</span>View arg0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated method stub</span>                Uri uri <span class="token operator">=</span> Uri<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"smsto://329544235"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Intent intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span>Intent<span class="token punctuation">.</span>ACTION_SENDTO<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>                intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"sms_body"</span><span class="token punctuation">,</span> <span class="token string">"这是发送的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果展示：<br><img src="/images/201908/intent_2.gif" alt></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter开发 | 二</title>
      <link href="/2019/08/flutter-2/"/>
      <url>/2019/08/flutter-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装完成了，然后找了找教程。看见了这样一句话：<br><code>Dart</code>是由谷歌开发的计算机编程语言,它可以被用于<code>web</code>、服务器、移动应用 和物联网等领域的开发。<br><code>Dart</code>诞生于2011年，号称要取代<code>JavaScript</code>。但是过去的几年中一直不温不火。直到<code>Flutter</code>的出现现在被人们重新重视。<br>要学<code>Flutter</code>的话我们必须首先得会<code>Dart</code>。<br><code>Flutter</code>是谷歌公司开发的一款开源、免费的移动UI框架，可以让我们快速的在<code>Android</code>和<code>iOS</code>上构建高质量<code>App</code>。它最大的特点就是跨平台、以及高性能。<br>由于谷歌的推广,以及国内阿里的闲鱼App是<code>Flutter</code>开发的。所以<code>Flutter</code>目前关注度非常高的框架。</p></blockquote><p>Dart教程在线试听地址： <a href="https://www.bilibili.com/video/av52490605" target="_blank" rel="noopener">https://www.bilibili.com/video/av52490605</a><br>Flutter教程在线试听地址： <a href="https://www.bilibili.com/video/av53072584/?p=1" target="_blank" rel="noopener">https://www.bilibili.com/video/av53072584/?p=1</a><br>Flutter中文网地址：<a href="https://flutterchina.club/widgets-intro/" target="_blank" rel="noopener">https://flutterchina.club/widgets-intro/</a></p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p><code>android</code>和<code>ios</code>，是编译不同平台的支持；<br><code>lib</code>中放置我们应用的资源文件，也是我们主要的编写地方；<br><code>pubspec.yaml</code>是我们项目的配置文件；</p><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p><code>APP</code>的入口是<code>lib/main.dart</code>文件，入口代码是：<code>void main() =&gt; runApp(new MyApp());</code><br>提示：<code>main</code>函数使用了(<code>=&gt;</code>)符号, 这是Dart中单行函数或方法的简写。<br>等价于：<code>void main(){runApp(new MyApp());}</code><br>[在微信小程序中其实看见过，之前没注意，现在才知道是<code>Dart</code>。]</p><h2 id="hello"><a href="#hello" class="headerlink" title="hello"></a>hello</h2><p>在<code>lib/main.dart</code>中编写代码，如下：</p><pre class=" language-dart"><code class="language-dart"><span class="token keyword">import</span> <span class="token string">'package:flutter/material.dart'</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">runApp</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Center</span><span class="token punctuation">(</span>    child<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span>      <span class="token string">"Hello, world"</span><span class="token punctuation">,</span>      textDirection<span class="token punctuation">:</span> TextDirection<span class="token punctuation">.</span>ltr<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的效果也就是简单的Hello world程序，就不截图了。<br>要使用dart，首先要导入包；然后在flutter中载入的所有的东西都是widget，也就是类；<br>widget大致分成两类，无状态的StatelessWidget或者是有状态的StatefulWidget：<br>具体的选择取决于您的widget是否需要管理一些状态。<br>widget的主要工作是实现一个build函数，用以构建自身。</p><pre class=" language-text"><code class="language-text"></code></pre>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter开发 | 一</title>
      <link href="/2019/08/flutter-1/"/>
      <url>/2019/08/flutter-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在大学接触过使用Java安装的eclipse集成开发环境来做apk。但是，还是感觉比较难，然后学习了一段时间就放弃了，当时也没有写博客的习惯，就完全忘记了。这两天想做一个VIP视频解析的apk，虽然网站已经有了。但是，广告还是比较多，所以想自己封装一个。<br>百度了一下，除了原生，都推荐flutter开发，试一试。</p></blockquote><p>百度就可以看见文档：<a href="https://flutterchina.club/tutorials/" target="_blank" rel="noopener">地址</a><br>一起来看看：</p><h1 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h1><ol><li><p>安装<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git for Windows</a></p></li><li><p>使用镜像<br>由于在国内访问<code>Flutter</code>有时可能会受到限制，<code>Flutter</code>官方为中国开发者搭建了临时镜像（<code>google</code>为国内开发者搭建的临时镜像），大家可以将如下环境变量加入到用户环境变量中：<br>打开<code>git</code>命令窗口：</p><pre class=" language-text"><code class="language-text">export PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</code></pre></li><li><p>下载SDK，<a href="https://flutter.io/sdk-archive/#windows" target="_blank" rel="noopener">地址</a><br>下载完成后，解压。在<code>Flutter</code>安装目录的<code>flutter</code>文件下找到<code>flutter_console.bat</code>，双击运行并启动<code>flutter</code>命令。第一次运行一个<code>flutter</code>命令（如<code>flutter doctor</code>）时，它会下载它自己的依赖项并自行编译。以后再运行就会快得多。<br>按照提示：</p><blockquote><p>Unable to locate Android SDK.<br><a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">https://developer.android.com/studio/index.html</a><br>On first launch it will assist you in installing the Android SDK<br>components.</p></blockquote></li><li><p>说是没有<code>Android SDK</code>，不妨先忽略，先安装<code>Android Studio</code><br>不妨百度一下：<code>Android studio</code>，因为上面的官网需要梯子，就百度了。<a href="http://www.android-studio.org/" target="_blank" rel="noopener">地址</a><br>其实，安装了<code>android studio</code>就安装了<code>sdk</code>，就是我们需要找到其位置，然后设置环境变量即可。<br><code>setting --&gt;Apperance &amp; Behavior --&gt; System Settings--&gt;Android SDK</code><br>点击相应的版本下载即可，也可以看见我的下载在：<code>C:\Users\baiyazi\AppData\Local\Android\Sdk</code><br>新增一个环境变量：<br><code>ANDROID_HOME</code> <code>：``C:\Users\baiyazi\AppData\Local\Android\Sdk</code><br>再利用<code>flutter doctor</code>检查一下，发现就不说没有<code>SDK</code>了。</p></li><li><p>设置<code>Android</code>模拟器<br>我这里跳过了设置您的<code>Android</code>设备，感觉还是模拟器带感，按照教程：</p></li></ol><ul><li>在<code>BIOS</code>中设置了<code>Intel Virtualization Technology</code>为<code>Enable</code></li><li>开始创建虚拟机<code>Tools--&gt;AVD Manager</code> ，然后<code>next</code>，按照提示我下载了<code>x86_64</code> 的<code>Android7.0</code>系统镜像，但是在右边出现了错误<code>/dev/kvm is not found</code>问题。下面就解决这个问题：</li></ul><p>百度了一下，说是<code>intelhaxm</code>的部分安装失败导致的，在<code>Setting</code>中找到<code>Appearance &amp; Behavior--&gt;System Setting --&gt; Android SDK--&gt;SDK Tools</code>中可以看见<code>Android Studio</code>中是否安装了<code>Intel x86 Emulator Accelerator</code>是否安装，我这里测试了多次其实这里不需要安装（当然可能具有特殊性），如下图：<br><img src="/images/201908/2019-08-04_152037.png" alt><br>找到<code>intelhaxm</code>目录：<code>C:\Users\baiyazi\AppData\Local\Android\Sdk\extras\intel\Hardware_Accelerated_Execution_Manager</code><br>把电脑上已有的<code>haxm</code>卸载了，卸载方法也就是运行<code>intelhaxm-android.exe</code>，然后卸载掉。<br>在<a href="https://github.com/intel/haxm/releases/tag/v7.4.1" target="_blank" rel="noopener">Release HAXM v7.4.1 · intel/haxm · GitHub</a>中下载<code>haxm</code>，然后替换到上面的目录中，然后运行<code>intelhaxm-android.exe</code>重新安装。<br>在<code>cmd</code>中输入下面的命令可以查看是否成功：</p><pre class=" language-text"><code class="language-text">C:\Users\baiyazi>sc query intelhaxmSERVICE_NAME: intelhaxm        TYPE               : 1  KERNEL_DRIVER        STATE              : 4  RUNNING                                (STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)        WIN32_EXIT_CODE    : 0  (0x0)        SERVICE_EXIT_CODE  : 0  (0x0)        CHECKPOINT         : 0x0        WAIT_HINT          : 0x0</code></pre><p>接着就简单了，在来一次创建虚拟机，就发现不报错了，下面给出启动虚拟机的截图：<br><img src="/images/201908/2019-08-04_153500.png" alt></p><p>启动了虚拟机，然后再次cmd输入flutter doctor，检查可发现设备可用了，但是Android Studio中的flutter 插件还没有安装。看文档需要安装两个插件Flutter和Dart插件</p><ol start="6"><li><p>Flutter和Dart插件<br>Flutter插件： 支持Flutter开发工作流 (运行、调试、热重载等).<br>Dart插件： 提供代码分析 (输入代码时进行验证、代码补全等).<br>启动Android Studio.<br>打开插件首选项 (File&gt;Settings&gt;Plugins).<br>搜索Dart和flutter，然后分别并点击 install.（比较慢），很不幸出现了Plugin Flutter download or installing failed的提示，不甘心，多试了几次就可以了。<br>重启Android Studio后插件生效。不妨再来检查一下：<br><img src="/images/201908/2019-08-04_161150.png" alt></p></li><li><p>体验Flutter<br>File&gt;New Flutter Project，然后需要选择Flutter SDK Path的路径，我这里是：E:\flutter<br>然后创建一个应用就可以了，好了后，运行：<br><img src="/images/201908/2019-08-04_163428.png" alt></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5 | 网页播放器开发 一</title>
      <link href="/2019/07/html5videoplayer-1/"/>
      <url>/2019/07/html5videoplayer-1/</url>
      
        <content type="html"><![CDATA[<p>访问<a href="https://www.w3school.com.cn/html5/html_5_video.asp" target="_blank" rel="noopener">w3school网站</a>，看见了需要的视频播放相关文档。下面就简单摘抄一些：</p><h1 id="相关简介"><a href="#相关简介" class="headerlink" title="相关简介"></a>相关简介</h1><p>HTML5 规定了一种通过 <code>video</code> 元素来包含视频的标准方法。<br>当前，<code>video</code> 元素支持三种视频格式：</p><ul><li><code>Ogg</code> = 带有 <code>Theora</code> 视频编码和 <code>Vorbis</code> 音频编码的 <code>Ogg</code> 文件</li><li><code>MPEG4</code> = 带有 <code>H.264</code> 视频编码和 <code>AAC</code> 音频编码的 <code>MPEG 4</code> 文件</li><li><code>WebM</code> = 带有 <code>VP8</code> 视频编码和 <code>Vorbis</code> 音频编码的 <code>WebM</code> 文件</li></ul><table class="dataintable"><tbody><tr><th>格式</th><th style="width:16%">IE</th><th style="width:16%">Firefox</th><th style="width:16%">Opera</th><th style="width:16%">Chrome</th><th style="width:16%">Safari</th></tr><tr><td>Ogg</td><td>No</td><td>3.5+</td><td>10.5+</td><td>5.0+</td><td>No</td></tr><tr><td>MPEG 4</td><td>9.0+</td><td>No</td><td>No</td><td>5.0+</td><td>3.0+</td></tr><tr><td>WebM</td><td>No</td><td>4.0+</td><td>10.6+</td><td>6.0+</td><td>No</td></tr></tbody></table><p>很带感，如果需要正式化，还需要做浏览器适配相关的解决。不过我这里不考虑，先做出来像个东西了再说。</p><h2 id="video标签的属性"><a href="#video标签的属性" class="headerlink" title="video标签的属性"></a>video标签的属性</h2><p><code>autoplay=“autoplay”</code>&nbsp;&nbsp;&nbsp;&nbsp;如果出现该属性，则视频在就绪后马上播放。<br><code>controls=&quot;controls&quot;</code> &nbsp;&nbsp;&nbsp;&nbsp;如果出现该属性，则<strong>向用户显示控件</strong>，比如播放按钮。<br><code>height=&quot;pixels&quot;</code>&nbsp;&nbsp;&nbsp;&nbsp;设置视频播放器的高度。<br><code>width=&quot;pixels&quot;</code>&nbsp;&nbsp;&nbsp;&nbsp;设置视频播放器的宽度。<br><code>loop=&quot;loop&quot;</code>&nbsp;&nbsp;&nbsp;&nbsp;如果出现该属性，则当媒介文件完成播放后再次开始播放。<br><code>preload=&quot;preload&quot;</code>&nbsp;&nbsp;&nbsp;&nbsp;如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。<br><code>src=&quot;url&quot;</code>&nbsp;&nbsp;&nbsp;&nbsp;要播放的视频的 URL。</p><h3 id="controls属性学习"><a href="#controls属性学习" class="headerlink" title="  controls属性学习"></a><i class="fa fa-compass "></i>  controls属性学习</h3><p>功能：<strong>向用户显示控件</strong>，也就是说播放器的显示控件可设置不显示<br>下面我们看看文档中的原话：</p><blockquote><p><code>controls</code> 属性规定浏览器应该为视频提供播放控件。<br>如果设置了该属性，则规定不存在作者设置的脚本控件。<br>浏览器控件应该包括：<br>播放/暂停/定位/音量/全屏/切换/字幕（如果可用）/音轨（如果可用）</p></blockquote><h4 id="来做一个对比案例"><a href="#来做一个对比案例" class="headerlink" title="来做一个对比案例"></a>来做一个对比案例</h4><p><i class="fa fa-video-camera"></i> 添加<code>controls</code>的<code>video</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.html5videoplayer.net/videos/madagascar3.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><video width="320" height="240" controls>  <source src="http://www.html5videoplayer.net/videos/madagascar3.mp4" type="video/mp4"></video><p><i class="fa fa-video-camera"></i>不 添加<code>controls</code>的<code>video</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>240<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.html5videoplayer.net/videos/madagascar3.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><video width="320" height="240">  <source src="http://www.html5videoplayer.net/videos/madagascar3.mp4" type="video/mp4"></video><p>很显然，不使用<code>controls</code>属性，为定制播放器提供了一种可能。话不多说，就来用<code>css</code>定制看看。</p><p>下面用到video标签的一些方法和属性，这里给出链接地址：<br><a href="https://www.runoob.com/tags/ref-av-dom.html" target="_blank" rel="noopener">文档地址1</a><br><a href="https://www.runoob.com/tags/tag-video.html" target="_blank" rel="noopener">文档地址2</a><br><a href="https://www.runoob.com/tags/ref-av-dom.html" target="_blank" rel="noopener">文档地址3</a><br><a href="https://blog.csdn.net/weixin_39987434/article/details/90641925" target="_blank" rel="noopener">文档地址4</a></p><p>下面摘抄一些会用到的方法和属性：</p><h4 id="video的部分方法"><a href="#video的部分方法" class="headerlink" title="video的部分方法"></a>video的部分方法</h4><table><tbody><tr><th>方法</th><th>描述</th><th>案例</th></tr><tr><td>load()</td><td>重新加载音频/视频元素。</td><td>document.getElementById("video").load();<br>不更改来源是重新播放;<br>更改视频来源，就是切换</td></tr><tr><td>play()</td><td>开始播放音频/视频。</td><td>document.getElementById("video").play();</td></tr><tr><td>pause()</td><td>暂停当前播放的音频/视频。</td><td>document.getElementById("video").pause();</td></tr></tbody></table><h4 id="video的部分属性"><a href="#video的部分属性" class="headerlink" title="video的部分属性"></a>video的部分属性</h4><table><tbody><tr><th>属性</th><th>值</th><th>描述</th></tr><tr><td>autoplay</td><td>autoplay</td><td>如果出现该属性，则视频在就绪后马上播放。</td></tr><tr><td>controls</td><td>controls</td><td>如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td>height</td><td>pixels</td><td>设置视频播放器的高度。</td></tr><tr><td>loop</td><td>loop</td><td>如果出现该属性，则当媒介文件完成播放后再次开始播放。</td></tr><tr><td>muted</td><td>muted</td><td>如果出现该属性，视频的音频输出为静音。</td></tr><tr><td>poster</td><td>URL</td><td>规定视频正在下载时显示的图像，直到用户点击播放按钮。</td></tr><tr><td>preload</td><td>auto<br>metadata<br>none</td><td>如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用"autoplay"，则忽略该属性。</td></tr><tr><td>src</td><td>URL</td><td>要播放的视频的URL。</td></tr><tr><td>width</td><td>pixels</td><td>设置视频播放器的宽度。</td></tr></tbody></table><h1 id="接下来就开始吧"><a href="#接下来就开始吧" class="headerlink" title="接下来就开始吧"></a>接下来就开始吧</h1><p>给出操作的<code>html</code>的代码结构：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./style.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>weizu-wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>weizu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.html5videoplayer.net/videos/madagascar3.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--在body后--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>对应的<code>css</code>文件如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token id">#weizu-wrap</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">680</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">50</span>px auto<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token id">#weizu-wrap</span> video<span class="token id">#weizu</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>之所以不设置控件高度，是因为想外层div的高度随着视频的高度自适应就可以了，单控制宽度一个维度就可以了。</p><p>百度了一下，找了一个更加适合的用法，然后<code>CSS</code>改版了：<br>对应的<code>css</code>文件如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector">*</span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token id">#weizu-wrap</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">680</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">50</span>px auto<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token id">#weizu-wrap</span> video<span class="token id">#weizu</span></span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">680</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">object-fit</span><span class="token punctuation">:</span>fill<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*拉伸视频，填充整个设置的区域的*/</span><span class="token punctuation">}</span></code></pre><h2 id="一些尝试"><a href="#一些尝试" class="headerlink" title="一些尝试"></a>一些尝试</h2><h3 id="播放按钮"><a href="#播放按钮" class="headerlink" title="播放按钮"></a>播放按钮</h3><p>资源载入完成，视频上显示播放按钮，单击视频任意位置，就开始播放</p>]]></content>
      
      
      <categories>
          
          <category> html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网页播放器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深思与反省</title>
      <link href="/2019/07/introspection-1/"/>
      <url>/2019/07/introspection-1/</url>
      
        <content type="html"><![CDATA[<p>  直到写这篇文章的前段时间，一直都觉得“他强任他强，我弱认我弱”，然后总是寄希望于找一个贝壳把自己严严实实的包裹起来，或许是自己跟不上时代的步伐，也或许是因为自己的一无是处而导致的想永远逃离现实的愿景。<br>  昨天晚上和姐谈了很多。也把自己说懂了一些道理，一些自己原先一直懂但是却“装睡”的道理。我家是N代务农，而我们家又几乎是整个村垫底的。父母一辈子辛辛苦苦的经营这个家，或许他们心中唯一的寄托就是我和我姐。感谢父母、感谢时代，我们才不至于没饭吃。我很多时候都在想到底是为什么导致了我这样一种逃避而又孤寂的内心？<br>  或许是从小就开始承受那些本不该自己那个年龄段该承受的。说来很好笑，我是在大约十几岁的时候才知道我爸爸长得是那个样子。因为家庭的矛盾，近乎爸妈结婚就和爷婆断绝了关系，而在那个年代，父母都没有文化，唯一能养活自己的恐怕只能是务农与外出务工。当时爸在外面一年四季省吃俭用能存下来的钱也就几百块，也就够学费了。而生活的重担都压在了妈的肩上，这也就是为什么从很小我和姐就在地里搬玉米棒子、割谷子，很小的时候就需要放牛、放鸭子，但是我和姐所承受的或许不足妈的十分之一。爸常年在外务工，而农时不等人，在没人帮助的情况下，妈就必须又当爹来又当妈。果然妈学会了耕地、耕田，常年都在我们家的一亩三分地上劳作，因为那就是唯一的依靠。记忆中比较深刻的就是有一次晒玉米，夏天突然的暴雨，我们三娘母根本都来不及，只抢救了一小半，其余的都泡在水里了，妈当时哭了，歇斯底里的 。我和姐当时理解不到那是什么感受，现在或许懂了，那是对生活的希望破灭了的感觉。妈也几乎在那些年从没买过衣服，要买也就是买一些老年人穿的，因为便宜些。也就导致了本来因为常年日晒雨露的辛苦劳作而略显苍伤的母亲看起来更加年迈了，很多次妈送饭的时候，同学都会说“你婆来了”。我却不敢反驳，或许是贫穷与生俱来的自卑，也或许是我骨子里的软弱。当时我甚至觉得妈到学校来自己很难为情，说来很可笑，或许是从那时开始就不懂什么叫做情，什么又是自己值得努力的动力，从那时开始也就学会了逃避。或许这也就是两个极端，看视频里面，别人都是逆境求生存，而自己却是逆境里总是期望自己顺应逆境，遇到不如意的总是告诉自己习惯了就好，不懂也不会像小草那样向光生长，而总是觉得活着与不活着好像对自己都没有什么意义，有一口饭吃、一口水喝不饿死就可以了。或许是贫穷，或许是假亲戚造成的自己的自卑，但是也需要感谢贫穷，感谢假亲戚。妈虽然没读过什么书但是总是教育我们不要说假话，活人要堂堂正正、端端正正，要滴水之恩涌泉相报；假亲戚们虽然读的书略多，但是真的很无情、很虚伪，或许还不如一个外人来的安逸，或许是因为他们家境略好导致的，也应该感谢他们，让我知道或许人应该说些假话，不，场面话；也应该感谢贫穷，“穷在闹市无人问，富在深山有远亲”，本应该在电视里面出现的场景，却出现在了我们的生活中。也对，何人不在画中？<br>  不说那些抱怨的话，不然就像一个怨男。应该对未来从满希望，努力拼搏，而不是抱怨。这是一个最好的时代，有努力就有收获，想挣钱总能找到一些门路。以前的贫穷是时代导致的，不得怨天抱地；而现在时代的贫穷却是自己导致的，自己垃圾了怪谁。没人会同情一个弱者，尤其是没有价值的弱者。拥抱时代，拥抱未来，用双手创造自己想要的生活，用双手去构建自己的人生，用双手去搀扶以前看不起自己的人，然后反手就是一记耳光。生活如此多娇，“与天斗其乐无穷，与地斗其乐无穷，与人斗其乐无穷”，既然“仇人”那么多，那么多快乐，干嘛不让自己快乐。保护自己想照顾的人以及照顾自己的人，同恶势力斗争，其乐无穷。</p>]]></content>
      
      
      <categories>
          
          <category> introspection </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-145 | 二叉树的后序遍历</title>
      <link href="/2019/07/leetcode-145/"/>
      <url>/2019/07/leetcode-145/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个二叉树，返回它的 后序 遍历。</p><p> 示例:</p><blockquote><p>输入: [1,null,2,3]<br>   <code>1</code><br>    &nbsp;&nbsp;<code>\</code><br>     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>2</code><br>    &nbsp;&nbsp;<code>/</code><br>   <code>3</code><br>输出: [1,3,2]</p></blockquote><h2 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h2><h3 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h3><p>先序遍历：根左右<br>中序遍历：左根右<br>后序遍历：左右根</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        <span class="token keyword">if</span> root<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>postorderTraversal<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>postorderTraversal<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>resu</code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 32 ms, 在Remove Nth Node From End of List的Python提交中击败了26.67% 的用户<br>内存消耗 : 11.8 MB, 在Remove Nth Node From End of List的Python提交中击败了25.12% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>32 ms</td><td>11.8 MB</td><td>python</td></tr></table><h3 id="模拟系统栈"><a href="#模拟系统栈" class="headerlink" title="模拟系统栈"></a>模拟系统栈</h3><p>后序遍历：左右根<br>也即是：</p><pre class=" language-Python"><code class="language-Python">self.postorderTraversal(root.left)self.postorderTraversal(root.right)self.resu.append(root.val)</code></pre><p>那么我们使用栈模拟依次压栈的顺序就是：根右左</p><pre class=" language-Python"><code class="language-Python">class Solution(object):    def __init__(self):        self.resu = []    def postorderTraversal(self, root):        """        :type root: TreeNode        :rtype: List[int]        """        if root is None:            return []        stack = [('go', root)]        # 后序： 左 右 根 访问  =》 压栈顺序： 根 右  左        while len(stack):            # 取栈顶元素            ele = stack.pop()            # 逻辑            if ele[0] == 'print':                self.resu.append(ele[1].val)            else:                stack.append(('print', ele[1]))  # 根                if ele[1].right:                    # 右                    stack.append(('go', ele[1].right))                if ele[1].left:                    # 左                    stack.append(('go', ele[1].left))        return self.resu</code></pre><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 28 ms, 在Remove Nth Node From End of List的Python提交中击败了47.42% 的用户<br>内存消耗 : 11.6 MB, 在Remove Nth Node From End of List的Python提交中击败了40.55% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>28 ms</td><td>11.6 MB</td><td>python</td></tr></table><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>参考我的CSDN博客：<a href="https://blog.csdn.net/qq_26460841/article/details/84139711" target="_blank" rel="noopener">地址</a><br><img src="/images/201907/20181116151257109.png" alt><br>先序序列： <code>1 、2 、3 、5 、4</code><br>后序序列：<code>3 、5、2 、4 、1</code><br>把后续序列逆序得，逆后序序列：<code>1 、4 、2 、5 、3</code><br>观察，逆后序列和先序序列有一定联系，逆序后的序列可以看做：<strong>先序序列中对其左右子树遍历顺序交换得到的结果。</strong><br>过程如下：</p><ol><li>根据根划分出左右的子树（先序序列）   ： <code>1  、 [2 、3 、5]  、 [4]</code></li><li>交换根的左右子树遍历序列       ：<code>1 、 [4]  、 [2 、 3  、 5]</code></li><li>交换以2为根的左右子树遍历序列   ：<code>1 、 [4]  、 [2 、 5  、 3]</code></li><li>整体逆序得到后序序列                                      ：      <code>3 、 5 、 2 、 4 、 1</code></li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">:</span>            root <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>left<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span> root<span class="token punctuation">.</span>right<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>resu<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>resu</code></pre><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 24 ms, 在Remove Nth Node From End of List的Python提交中击败了67.42% 的用户<br>内存消耗 : 11.7 MB, 在Remove Nth Node From End of List的Python提交中击败了32.09% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>24 ms</td><td>11.7 MB</td><td>python</td></tr></table><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/submissions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-postorder-traversal/submissions/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 二叉树的遍历 </tag>
            
            <tag> leetcode 困难难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-94 | 二叉树的中序遍历</title>
      <link href="/2019/07/leetcode-94/"/>
      <url>/2019/07/leetcode-94/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个二叉树，返回它的 中序 遍历。</p><p> 示例:</p><blockquote><p>输入: [1,null,2,3]<br>   <code>1</code><br>    &nbsp;&nbsp;<code>\</code><br>     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>2</code><br>    &nbsp;&nbsp;<code>/</code><br>   <code>3</code><br>输出: [1,3,2]</p></blockquote><h2 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h2><p>上一题是先序遍历，中序遍历的递归算法很简单，也就是调整代码的逻辑就可以了，先来实现以下。</p><h3 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h3><p>先序遍历：根左右<br>中序遍历：左根右</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        <span class="token keyword">if</span> root<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>inorderTraversal<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>inorderTraversal<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>resu</code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 16 ms, 在Remove Nth Node From End of List的Python提交中击败了94.75% 的用户<br>内存消耗 : 11.6 MB, 在Remove Nth Node From End of List的Python提交中击败了39.25% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>16 ms</td><td>11.6 MB</td><td>python</td></tr></table><h3 id="模拟系统栈"><a href="#模拟系统栈" class="headerlink" title="模拟系统栈"></a>模拟系统栈</h3><p>模拟系统栈<br>中序调用：左根右</p><pre class=" language-Python"><code class="language-Python">self.preorderTraversal(root.left)self.resu.append(root.val)self.preorderTraversal(root.right)</code></pre><p>我们如果用栈模拟,由于执行的时候是左、根、右的顺序。<br>那么我们用栈模拟，的压栈顺序就是：右根左</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        <span class="token keyword">if</span> root <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'go'</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 中序：左 根 右 访问  =》 压栈顺序：右 根 左</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 取栈顶元素</span>            ele <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 逻辑</span>            <span class="token keyword">if</span> ele<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'print'</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ele<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ele<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 右</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'go'</span><span class="token punctuation">,</span> ele<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'print'</span><span class="token punctuation">,</span> ele<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 根</span>                <span class="token keyword">if</span> ele<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 左</span>                    stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'go'</span><span class="token punctuation">,</span> ele<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>resu</code></pre><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 20 ms, 在Remove Nth Node From End of List的Python提交中击败了84.51% 的用户<br>内存消耗 : 11.7 MB, 在Remove Nth Node From End of List的Python提交中击败了31.70% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>20 ms</td><td>11.7 MB</td><td>python</td></tr></table><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        <span class="token keyword">if</span> <span class="token operator">not</span> root<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>        root <span class="token operator">=</span> root<span class="token punctuation">.</span>left  <span class="token comment" spellcheck="true"># 上面已经root入栈，故而接下来不能重复入栈</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">or</span> root<span class="token punctuation">:</span>            <span class="token keyword">if</span> root<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>left            <span class="token keyword">else</span><span class="token punctuation">:</span>                root <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                root <span class="token operator">=</span> root<span class="token punctuation">.</span>right        <span class="token keyword">return</span> self<span class="token punctuation">.</span>resu</code></pre><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 28 ms, 在Remove Nth Node From End of List的Python提交中击败了45.48% 的用户<br>内存消耗 : 11.7 MB, 在Remove Nth Node From End of List的Python提交中击败了30.19% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>28 ms</td><td>11.7 MB</td><td>python</td></tr></table><h3 id="栈-另一种实现"><a href="#栈-另一种实现" class="headerlink" title="栈-另一种实现"></a>栈-另一种实现</h3><pre class=" language-Python"><code class="language-Python"># Definition for a binary tree node.# class TreeNode(object):#     def __init__(self, x):#         self.val = x#         self.left = None#         self.right = Noneclass Solution(object):    def __init__(self):        self.resu = []    def inorderTraversal(self, root):        """        :type root: TreeNode        :rtype: List[int]        """        if root is None:            return []        stack = [root]        root = root.right        while len(stack) or root:            if root:                stack.append(root)                root = root.right            else:                root = stack.pop()                self.resu.append(root.val)                root = root.left        self.resu.reverse()        return self.resu</code></pre><h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 24 ms, 在Remove Nth Node From End of List的Python提交中击败了66.49% 的用户<br>内存消耗 : 11.7 MB, 在Remove Nth Node From End of List的Python提交中击败了34.59% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>24 ms</td><td>11.9 MB</td><td>python</td></tr></table><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 二叉树的遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-144 | 二叉树的前序遍历</title>
      <link href="/2019/07/leetcode-144/"/>
      <url>/2019/07/leetcode-144/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个二叉树，返回它的 前序 遍历。</p><p> 示例:</p><blockquote><p>输入: [1,null,2,3]<br>   <code>1</code><br>    &nbsp;&nbsp;<code>\</code><br>     &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>2</code><br>    &nbsp;&nbsp;<code>/</code><br>   <code>3</code><br>输出: [1,2,3]</p></blockquote><h2 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h2><p>以前写过，不过忘记了，在我的<code>CSDN</code>博客中有：<a href="https://blog.csdn.net/qq_26460841/article/details/84137802" target="_blank" rel="noopener">地址</a><br>很明显，学过数据结构的都直到最简单的是使用一个递归的函数来轻松解决问题。<br>这里我们不妨用栈来模拟一下，毕竟递归也是栈的应用。<br>两种方式都写一写<br>其实，观察例子，是具有欺骗性的。例子中输入的是列表，我们看看代码提示：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span></code></pre><p>也就是说，传入的是节点，不难知晓一定是根节点。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="递归方式"><a href="#递归方式" class="headerlink" title="递归方式"></a>递归方式</h3><p>首先，看看递归的实现：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        <span class="token keyword">if</span> root<span class="token operator">!=</span>None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>preorderTraversal<span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>preorderTraversal<span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>resu</code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>32 ms</td><td>11.8 MB</td><td>python</td></tr></table><h3 id="模拟系统栈"><a href="#模拟系统栈" class="headerlink" title="模拟系统栈"></a>模拟系统栈</h3><p>模拟系统栈<br>先序遍历：根左右</p><pre class=" language-Python"><code class="language-Python">self.resu.append(root.val)self.preorderTraversal(root.left)self.preorderTraversal(root.right)</code></pre><p>我们如果用栈模拟,由于执行的时候是根左右的顺序<br>那么我们用栈模拟，的压栈顺序就是：右左根</p><pre class=" language-Python"><code class="language-Python"># Definition for a binary tree node.# class TreeNode(object):#     def __init__(self, x):#         self.val = x#         self.left = None#         self.right = Noneclass Solution(object):    def __init__(self):        self.resu = []    def preorderTraversal(self, root):        """        :type root: TreeNode        :rtype: List[int]        """        if root is None:            return []        stack = [('go', root)]        # 先序： 根 左 右 访问  =》 压栈顺序：右  左  根        while len(stack):            # 取栈顶元素            ele = stack.pop()            # 逻辑            if ele[0] == 'print':                self.resu.append(ele[1].val)            else:                if ele[1].right:                    # 右                    stack.append(('go', ele[1].right))                if ele[1].left:                    # 左                    stack.append(('go', ele[1].left))                stack.append(('print', ele[1]))  # 根        return self.resu</code></pre><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 24 ms, 在Remove Nth Node From End of List的Python提交中击败了69.00% 的用户<br>内存消耗 : 11.8 MB, 在Remove Nth Node From End of List的Python提交中击败了30.76% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>24 ms</td><td>11.8 MB</td><td>python</td></tr></table><h3 id="栈改进"><a href="#栈改进" class="headerlink" title="栈改进"></a>栈改进</h3><p>上面提交成功了，说明的确是根节点。下面就用栈来改进。<br>按照先序的思想，可以转化为循环控制。</p><ol><li>入栈前，先输出本节点信息；</li><li>先左子树依次入栈，直到没有左子树的结点为止；</li><li>出栈栈顶元素，然后，找到右子树，继续①②操作，直到栈为空 且 结点为空。</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for a binary tree node.</span><span class="token comment" spellcheck="true"># class TreeNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.left = None</span><span class="token comment" spellcheck="true">#         self.right = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type root: TreeNode        :rtype: List[int]        """</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> root        <span class="token keyword">while</span> p <span class="token operator">or</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>                p<span class="token operator">=</span>p<span class="token punctuation">.</span>left            <span class="token keyword">else</span><span class="token punctuation">:</span>                p <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>right        <span class="token keyword">return</span> self<span class="token punctuation">.</span>resu</code></pre><h3 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h3><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>20 ms</td><td>11.9 MB</td><td>python</td></tr></table><h3 id="非递归-另一种实现"><a href="#非递归-另一种实现" class="headerlink" title="非递归-另一种实现"></a>非递归-另一种实现</h3><pre class=" language-Python"><code class="language-Python"># Definition for a binary tree node.# class TreeNode(object):#     def __init__(self, x):#         self.val = x#         self.left = None#         self.right = Noneclass Solution(object):    def __init__(self):        self.resu = []    def preorderTraversal(self, root):        """        :type root: TreeNode        :rtype: List[int]        """        p = root        if p is None:            return []        stack = [p]        while len(stack):            # 取栈顶            p = stack.pop()            self.resu.append(p.val)            # right            if p.right:                stack.append(p.right)            if p.left:                stack.append(p.left)        return self.resu</code></pre><h3 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 28 ms, 在Remove Nth Node From End of List的Python提交中击败了48.97% 的用户<br>内存消耗 : 11.8 MB, 在Remove Nth Node From End of List的Python提交中击败了29.88% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>28 ms</td><td>11.8 MB</td><td>python</td></tr></table><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-preorder-traversal</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 二叉树的遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-71 | 简化路径</title>
      <link href="/2019/07/leetcode-71/"/>
      <url>/2019/07/leetcode-71/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>以 <code>Unix</code> 风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。<br>在 <code>Unix</code> 风格的文件系统中，一个点<code>（.）</code>表示当前目录本身；此外，两个点 <code>（..）</code> 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：<code>Linux / Unix</code>中的绝对路径 vs 相对路径<br>请注意，返回的规范路径必须始终以斜杠 <code>/</code> 开头，并且两个目录名之间必须只有一个斜杠 <code>/</code>。最后一个目录名（如果存在）不能以 <code>/</code> 结尾。此外，规范路径必须是表示绝对路径的最短字符串。<br>示例 1：</p><blockquote><p>输入：”/home/“<br>输出：”/home”<br>解释：注意，最后一个目录名后面没有斜杠。</p></blockquote><p>示例 2：</p><blockquote><p>输入：”/../“<br>输出：”/“<br>解释：从根目录向上一级是不可行的，因为根是你可以到达的最高级。</p></blockquote><p>示例 3：</p><blockquote><p>输入：”/home//foo/“<br>输出：”/home/foo”<br>解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</p></blockquote><p>示例 4：</p><blockquote><p>输入：”/a/./b/../../c/“<br>输出：”/c”</p></blockquote><p>示例 5：</p><blockquote><p>输入：”/a/../../b/../c//.//“<br>输出：”/c”</p></blockquote><p>示例 6：</p><blockquote><p>输入：”/a//b////c/d//././/..”<br>输出：”/a/b/c”</p></blockquote><h2 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h2><p>我们观察例子：</p><ol><li>给定字符串如果最后有<code>/</code>，那么删除掉</li><li>遇到<code>../</code>，就退到上一级<code>/*</code>，没得退的就到根</li><li>遇到<code>//</code>，就简化成<code>/</code></li><li>遇到<code>./</code>，也就是直接删除掉</li></ol><p>也不放简化一下，为了方便存储，也就是，不考虑/<br>如：<code>&quot;/a//b////c/d//././/..&quot;</code><br><code>a</code>，入栈；<code>b</code>，入栈；<code>c</code>，入栈；<code>d</code>，入栈<br>一个点，跳过<br>遇到两个点，<code>d</code>出栈</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">simplifyPath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type path: str        :rtype: str        """</span>        dataStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 不妨整成列表</span>        path_list <span class="token operator">=</span> path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> path_list<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># ['', 'a', '..', '..', 'b', '..', 'c', '', '.', '', '']</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">''</span> <span class="token operator">or</span> i<span class="token operator">==</span><span class="token string">'.'</span><span class="token punctuation">:</span>                <span class="token keyword">pass</span>            <span class="token keyword">elif</span> i <span class="token operator">==</span> <span class="token string">'..'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>dataStack<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>                    dataStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>len<span class="token punctuation">(</span>dataStack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> len<span class="token punctuation">(</span>dataStack<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                        dataStack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'/'</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        dataStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dataStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(dataStack)</span>        <span class="token comment" spellcheck="true"># 下面就是对结果数据的处理</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>dataStack<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'/'</span>        <span class="token keyword">if</span> dataStack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'/'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dataStack<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dataStack<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 截取字符串</span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 32 ms, 在Remove Nth Node From End of List的Python提交中击败了100.00% 的用户<br>内存消耗 : 11.7 MB, 在Remove Nth Node From End of List的Python提交中击败了31.95% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>32 ms</td><td>11.7 MB</td><td>python</td></tr></table><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/simplify-path" target="_blank" rel="noopener">https://leetcode-cn.com/problems/simplify-path</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-150 | 逆波兰表达式求值</title>
      <link href="/2019/07/leetcode-150/"/>
      <url>/2019/07/leetcode-150/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>根据<a href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437" target="_blank" rel="noopener">逆波兰表示法</a>，求表达式的值。<br>有效的运算符包括 <code>+</code>, <code>-</code>,<code>*</code>, <code>/</code>。每个运算对象可以是整数，也可以是另一个逆波兰表达式。<br>说明：</p><ul><li>整数除法只保留整数部分。</li><li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li></ul><p>示例 1：</p><blockquote><p>输入: [“2”, “1”, “+”, “3”, “*”]<br>输出: 9<br>解释: ((2 + 1) * 3) = 9</p></blockquote><p>示例 2：</p><blockquote><p>输入: [“4”, “13”, “5”, “/“, “+”]<br>输出: 6<br>解释: (4 + (13 / 5)) = 6</p></blockquote><p>示例 3：</p><blockquote><p>输入: [“10”, “6”, “9”, “3”, “+”, “-11”, “*”, “/“, “*”, “17”, “+”, “5”, “+”]<br>输出: 22<br>解释:<br>  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5<br>= ((10 * (6 / (12 * -11))) + 17) + 5<br>= ((10 * (6 / -132)) + 17) + 5<br>= ((10 * 0) + 17) + 5<br>= (0 + 17) + 5<br>= 17 + 5<br>= 22</p></blockquote><h2 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h2><p>逆波兰表示法，也即是后缀表达式。根据上面的几个案例，我们很容易的想到了栈的数据结构来辅助处理问题。</p><ol><li>遇到 <code>+</code>, <code>-</code>,<code>*</code>, <code>/</code>，就顺序出栈两个数值，进行计算，然后压栈</li><li>重复上面的操作，直到输入的列表跑完</li><li>输入的列表中存储的是字符串里列表，所以还需要转换</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tokens<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type tokens: List[str]        :rtype: int        """</span>        numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">]</span>        dataStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> ele <span class="token keyword">in</span> tokens<span class="token punctuation">:</span>            <span class="token keyword">if</span> ele <span class="token operator">not</span> <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>                dataStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int<span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                a <span class="token operator">=</span> dataStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>len<span class="token punctuation">(</span>dataStack<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                b <span class="token operator">=</span> dataStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>len<span class="token punctuation">(</span>dataStack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> ele <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">:</span>                    dataStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>                <span class="token keyword">elif</span> ele <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>                    dataStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token operator">-</span>a<span class="token punctuation">)</span>                <span class="token keyword">elif</span> ele <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>                    dataStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token operator">*</span>a<span class="token punctuation">)</span>                <span class="token keyword">elif</span> ele <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">:</span>                    dataStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int<span class="token punctuation">(</span>b <span class="token operator">/</span> float<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dataStack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre><p>注意：<br><code>python</code>的 <code>b / a</code> 会向下取整， 比如 <code>-1 / 132 = -1</code>。 题目要求是取整数部分，那么负数的时候，实际应该是向上取整， 解决方法： <code>int(b / float(a))</code><br>python3 b / a 会转为小数计算，所以直接<code>int(b / a)</code>， 不能 <code>b // a</code></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 76 ms, 在Remove Nth Node From End of List的Python提交中击败了100.00% 的用户<br>内存消耗 : 13.5 MB, 在Remove Nth Node From End of List的Python提交中击败了31.95% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>76 ms</td><td>13.5 MB</td><td>python</td></tr></table><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation" target="_blank" rel="noopener">https://leetcode-cn.com/problems/evaluate-reverse-polish-notation</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-20 | 有效的括号</title>
      <link href="/2019/07/leetcode-20/"/>
      <url>/2019/07/leetcode-20/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个只包括<code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。<br>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。<br>示例 1:</p><blockquote><p>输入: “()”<br>输出: true</p></blockquote><p>示例 2:</p><blockquote><p>输入: “()[]{}”<br>输出: true</p></blockquote><p>示例 3:</p><blockquote><p>输入: “(]”<br>输出: false</p></blockquote><p>示例 4:</p><blockquote><p>输入: “([)]”<br>输出: false</p></blockquote><p>示例 5:</p><blockquote><p>输入: “{[]}”<br>输出: true</p></blockquote><h2 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h2><p>很明显，需要使用栈的特性来解决，下面就来尝试一下。</p><ol><li>空串直接返回<code>True</code></li><li>由于匹配，必是两两配，也就是长度是偶数</li><li>在循环判断中，遇到左括号，直接入栈；遇到右括号，判断栈顶和当前元素是否是一对</li><li>结果返回栈的长度是否是<code>0</code>即可</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: bool        """</span>        <span class="token keyword">if</span> s<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'{'</span> <span class="token operator">or</span> i<span class="token operator">==</span><span class="token string">'('</span> <span class="token operator">or</span> i<span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                top <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">'}'</span> <span class="token operator">and</span> top <span class="token operator">!=</span> <span class="token string">'{'</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">and</span> top <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">']'</span> <span class="token operator">and</span> top <span class="token operator">!=</span> <span class="token string">'['</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><blockquote><p>执行用时 : 24 ms, 在Remove Nth Node From End of List的Python提交中击败了100.00% 的用户<br>内存消耗 : 11.7 MB, 在Remove Nth Node From End of List的Python提交中击败了31.95% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>24 ms</td><td>11.7MB</td><td>python</td></tr></table><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破烂 | 简单的任务计划</title>
      <link href="/2019/07/plane-1/"/>
      <url>/2019/07/plane-1/</url>
      
        <content type="html"><![CDATA[<p>截止时间：2019年9月1日<br>详情：</p><ol><li>自己定制一个Hexo的主题</li><li>尝试写一个html的视频播放器</li><li>爬虫</li><li>刷题LeetCode</li></ol><blockquote><p>虽然，这个计划可能100%不会被执行。大概是空话多了对自己也是一种发自内心的不信任。不过人总需要一些盼头，哪怕是空话。哪怕是三天打鱼两天晒网的，总还是认真对待了三天。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> plane </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破烂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fiddler的安装与使用</title>
      <link href="/2019/07/fiddler/"/>
      <url>/2019/07/fiddler/</url>
      
        <content type="html"><![CDATA[<h1 id="前面的话"><a href="#前面的话" class="headerlink" title="前面的话"></a>前面的话</h1><p>以前写的简单的爬虫程序，都是用的浏览器的自带的工具来抓包分析的。而且写得程序没有什么高大上的，很普通，也就用不到<code>Fiddler</code>这个软件。<br>今天，需要写一个案例，然后就想着还是用一下。拓展拓展眼界。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Fiddler</code>是一款强大<code>Web</code>调试工具，它能记录所有客户端和服务器的<code>HTTP</code>请求。 Fiddler启动的时候，默认IE的代理设为了<code>127.0.0.1:8888</code>，而其他浏览器是需要手动设置。</p><h1 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h1><p>安装地址：<a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">下载页面</a><br>需要注意的是，需要选择：<code>Mobile application development/debugging</code><br>其他的选择了我这里下载没反应。</p><p>安装就不说了，直接看简单的设置：</p><h2 id="配置Fiddler"><a href="#配置Fiddler" class="headerlink" title="配置Fiddler"></a>配置Fiddler</h2><p>打开<code>Fiddler</code>，选择工具栏<code>Tools</code>=&gt;<code>Options</code>=&gt;<code>HTTPS</code><br>选中<code>Capture HTTPS CONNECTs</code> (捕捉HTTPS连接)，<br>选中<code>Decrypt HTTPS traffic</code>（解密HTTPS通信）<br>另外我们要用<code>Fiddler</code>获取本机所有进程的<code>HTTPS</code>请求，所以中间的下拉菜单中选中<code>...from all processes</code> （从所有进程）<br>选中下方<code>Ignore server certificate errors</code>（忽略服务器证书错误）<br><img src="/images/201907/2019-07-24_172142.png" alt></p><p>然后，为 <code>Fiddler</code> 配置<code>Windows</code>信任这个根证书解决安全警告：<code>Actions</code>=&gt;<code>Trust Root Certificate</code>（受信任的根证书）。<br>还是在<code>Options</code>中，选择<code>Connections</code>:<br>选中<code>Allow remote computers to connect</code>（允许远程连接）<br><code>Act as system proxy on startup</code>（作为系统启动代理）<br><img src="/images/201907/2019-07-24_172628.png" alt></p><p>重启<code>Fiddler</code>，使配置生效（这一步很重要，必须做）。</p><h2 id="配置浏览器"><a href="#配置浏览器" class="headerlink" title="配置浏览器"></a>配置浏览器</h2><p>打开<code>Fiddler</code>，在浏览器中输入：<a href="http://127.0.0.1:8888/" target="_blank" rel="noopener">http://127.0.0.1:8888/</a> ， 可以看见下面的页面：<br><img src="/images/201907/2019-07-24_173402.png" alt><br>然后就是点击上面的链接，下载证书，然后安装证书到电脑上。<br><img src="/images/201907/2019-07-24_173702.png" alt></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>不放输入任意一个网址，测试一下，看是否有抓包。</p><h2 id="图标说明"><a href="#图标说明" class="headerlink" title="图标说明"></a>图标说明</h2><p><img src="/images/201907/1415062-20180630153923232-386817153.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Fiddler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy-0 |  Python爬虫基础  二</title>
      <link href="/2019/07/scrapy-01/"/>
      <url>/2019/07/scrapy-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>很久没有学习了，浑浑噩噩，未来很是担忧。<br>感觉还是从脚下开始的好。故而还是继续学习爬虫。</p></blockquote><h1 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h1><p>先来一个案例来复习一下前面学习的爬虫：<br>（当然，还是需要先安装抓包工具Fiddler，<a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">下载</a>）</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫初识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo&#39;压缩&#39;代码</title>
      <link href="/2019/07/usehexo-11/"/>
      <url>/2019/07/usehexo-11/</url>
      
        <content type="html"><![CDATA[<p>在写文章的时候避免不了需要使用表格来展示数据列表，比如想展示这样一个表格：</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>`title`</td><td><code>`Markdown`</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr></tbody></table><p>在这个主题中可以直接写，不用压缩，下面给出上面表格的源码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>配置选项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>默认值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>描述<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>Markdown<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span> 的文件标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>文章标题，强烈建议填写此选项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>date<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>文件创建时的日期时间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>发布时间，强烈建议填写此选项，且最好保证全局唯一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>但是在比如：<code>Next</code>的主题中就不行，需要自己压缩代码，不然会有很大的留白。<br>可能是作者在后台加入了相关的逻辑。</p><hr><p>虽然这里用不到了，但是还是将’压缩’代码的<code>Python</code>代码写下来：</p><pre class=" language-Python"><code class="language-Python">sourceText = """<thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead>"""import repartten = re.compile(r'\s')resu = partten.sub(r'', sourceText)print(resu)# <thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo主题推荐</title>
      <link href="/2019/07/usehexo-10/"/>
      <url>/2019/07/usehexo-10/</url>
      
        <content type="html"><![CDATA[<p>前段时间电脑键盘用着莫名的无效了，加上自己的C盘已经快满了，就想着重装一个系统，瘦瘦身。<br>由于昨天重新安装了系统，hexo博客感觉next的主题也不是那么好看了。于是想着重找一个。下面推荐几款自己感觉比较好看的主题。</p><ol><li><p>主题：Melody<br>参考文档：<a href="https://molunerfinn.com/hexo-theme-melody-doc/quick-start.html#installation" target="_blank" rel="noopener">安装详情</a><br>效果参考：<a href="https://molunerfinn.com/" target="_blank" rel="noopener">https://molunerfinn.com/</a><br>效果参考：<a href="https://elody-07.github.io/" target="_blank" rel="noopener">https://elody-07.github.io/</a></p></li><li><p>主题：hexo-theme-matery<br>参考文档：<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/" target="_blank" rel="noopener">安装详情</a><br>效果参考：<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/" target="_blank" rel="noopener">闪烁之狐</a></p></li><li><p>主题：Material X<br>参考文档：<a href="https://segmentfault.com/a/1190000016006194?utm_source=tag-newest" target="_blank" rel="noopener">安装详情</a><br>效果参考：<a href="https://xaoxuu.com/" target="_blank" rel="noopener">https://xaoxuu.com/</a></p></li></ol><p>我这里比较喜欢第二个，然后，就跟着教程安装一通。</p><h1 id="安装hexo-theme-matery"><a href="#安装hexo-theme-matery" class="headerlink" title="安装hexo-theme-matery"></a>安装hexo-theme-matery</h1><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>方法一：点击链接<a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">下载</a>，然后解压到themes文件夹下<br>方法二：使用命令来下载<br>在themes文件夹下，按住Ctrl，单击右键，选择Git Bash Here，保持联网，然后输入下面的命令即可下载：</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><p><img src="/images/201907/2019-07-22_151929.png" alt="e"></p><h2 id="主配置文件基础配置"><a href="#主配置文件基础配置" class="headerlink" title="主配置文件基础配置"></a>主配置文件基础配置</h2><p>修改项目配置文件_config.yml 的 theme 的值：theme: matery-master<br>当然，名字看你自己文件夹是什么名字，如下图：<br><img src="/images/201907/2019-07-22_153312.png" alt="e"></p><p>然后添加站点信息，以及URL信息：</p><pre class=" language-Python"><code class="language-Python"># Sitetitle: 无涯明月subtitle: Where there is a will,there is a way.description: 蹲得越用力，可能跳的越远，必然脚就越麻。keywords: weizu,无涯明月,weizu学习之路,营业执照办理author: 无涯明月language: zh-Hanstimezone: UTC# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://baiyazi.top</code></pre><h2 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h2><p>使用命令窗口，切换到博客根目录中，然后输入如下命令：</p><pre><code>hexo new page &quot;categories&quot;</code></pre><p><img src="/images/201907/2019-07-22_154458.png" alt="e"><br>在根目录下的source文件夹下就会生成categories\index.md<br>编辑该文件（不妨先安装Typora软件，打开md文件更方便）：</p><pre class=" language-text"><code class="language-text">---title: categoriesdate: 2019-07-22 15:40:08type: "categories"layout: "categories"---</code></pre><h2 id="创建标签页"><a href="#创建标签页" class="headerlink" title="创建标签页"></a>创建标签页</h2><p>同理，运行：</p><pre><code>hexo new page &quot;tags&quot;</code></pre><p><img src="/images/201907/2019-07-22_155250.png" alt="e"><br>同理，会生成tags\index.md，编辑该文件：</p><pre class=" language-text"><code class="language-text">---title: tagsdate: 2019-07-22 15:52:40type: "tags"layout: "tags"---</code></pre><h2 id="创建关于页面"><a href="#创建关于页面" class="headerlink" title="创建关于页面"></a>创建关于页面</h2><p>命令：<code>hexo new page &quot;about&quot;</code><br><img src="/images/201907/2019-07-22_155543.png" alt="e"><br>编辑页面：</p><pre class=" language-text"><code class="language-text">---title: aboutdate: 2019-07-22 15:55:36type: "about"layout: "about"---</code></pre><h2 id="创建友情链接页面"><a href="#创建友情链接页面" class="headerlink" title="创建友情链接页面"></a>创建友情链接页面</h2><p>很有意思，决定copy过来。类似的创建friends页：<code>hexo new page &quot;friends&quot;</code><br><img src="/images/201907/2019-07-22_155919.png" alt="e"><br>编辑页面：</p><pre class=" language-text"><code class="language-text">---title: friendsdate: 2019-07-22 15:59:12type: "friends"layout: "friends"---</code></pre><p>同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>在根的主配置文件中，有highlight，可以设置代码高亮。<br>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：<br>运行命令：</p><pre class=" language-text"><code class="language-text">npm i -S hexo-prism-plugin</code></pre><p><img src="/images/201907/2019-07-22_160945.png" alt="e"><br>至于警告，忽略就可以了。和window平台相关。<br>然后在根的主配置文件中，修改highlight字段：</p><pre class=" language-json"><code class="language-json">highlight<span class="token operator">:</span>  enable<span class="token operator">:</span> <span class="token boolean">false</span>  line_number<span class="token operator">:</span> <span class="token boolean">true</span>  auto_detect<span class="token operator">:</span> <span class="token boolean">false</span>  tab_replace<span class="token operator">:</span>prism_plugin<span class="token operator">:</span>  mode<span class="token operator">:</span> 'preprocess'    # realtime/preprocess  theme<span class="token operator">:</span> 'tomorrow'  line_number<span class="token operator">:</span> <span class="token boolean">false</span>    # default <span class="token boolean">false</span>  custom_css<span class="token operator">:</span></code></pre><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p><img src="/images/201907/2019-07-22_161616.png" alt="e"><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre><h2 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h2><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。<br>安装命令如下：</p><pre><code>npm i --save hexo-wordcount</code></pre><p><img src="/images/201907/2019-07-22_162011.png" alt="e"><br>然后只需在本主题下的 _config.yml 文件中，激活以下配置项即可：</p><pre><code>wordCount:  enable: false # 将这个值设置为 true 即可.  postWordCount: true  min2read: true  totalCount: true</code></pre><h2 id="中文链接转拼音"><a href="#中文链接转拼音" class="headerlink" title="中文链接转拼音"></a>中文链接转拼音</h2><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。<br>安装命令如下：</p><pre><code>npm i hexo-permalink-pinyin --save</code></pre><p><img src="/images/201907/2019-07-22_162835.png" alt="e"><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>permalink_pinyin:  enable: true  separator: &#39;-&#39; # default: &#39;-&#39;</code></pre><p>注：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p><h2 id="添加-RSS-订阅支持"><a href="#添加-RSS-订阅支持" class="headerlink" title="添加 RSS 订阅支持"></a>添加 RSS 订阅支持</h2><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 RSS，安装命令如下：</p><pre><code>npm install hexo-generator-feed --save</code></pre><p><img src="/images/201907/2019-07-22_163804.png" alt="e"><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: &#39; &#39;  order_by: -date</code></pre><p>执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明你已经安装成功了。</p><h2 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h2><p>在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre><code>&lt;a href=&quot;https://github.com/blinkfox&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;访问我的GitHub&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;    &lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;&lt;/a&gt;</code></pre><p>其中，社交图标（如：fa-github）你可以在 Font Awesome 中搜索找到。以下是常用社交图标的标识，供你参考：</p><pre><code>Facebook: fa-facebookTwitter: fa-twitterGoogle-plus: fa-google-plusLinkedin: fa-linkedinTumblr: fa-tumblrMedium: fa-mediumSlack: fa-slack新浪微博: fa-weibo微信: fa-wechatQQ: fa-qq</code></pre><p>注意: 本主题中使用的 Font Awesome 版本为 4.7.0。</p><h2 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h2><p>在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h2 id="配置音乐播放器"><a href="#配置音乐播放器" class="headerlink" title="配置音乐播放器"></a>配置音乐播放器</h2><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。<br>首先，在你的博客 source 目录下的 _data 目录（没有的话就新建一个）中新建 musics.json 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>注：以上 JSON 中的属性：name、artist、url、cover 分别表示音乐的名称、作者、音乐文件地址、音乐封面。<br>然后，在主题的 _config.yml 配置文件中激活配置即可：</p><pre><code># 是否在首页显示音乐.music:  enable: true  showTitle: false  title: 听听音乐  fixed: false # 是否开启吸底模式  autoplay: false # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39; # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;list&#39; # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39; # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: false # 列表默认折叠  listMaxHeight: # 列表最大高度</code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><p>Front-matter 选项详解<br>Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table>注意:如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。以下为文章的 Front-matter 示例。<p>最简示例</p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><p>最全示例</p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><h2 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h2><p>你可以直接在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 <script></script> 代码中：</p><pre><code>$(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);</code></pre><p>在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。</p><p>版本记录</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo主题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发 | 云数据库更新异常</title>
      <link href="/2019/07/weixinprogram-9/"/>
      <url>/2019/07/weixinprogram-9/</url>
      
        <content type="html"><![CDATA[<p><i class="fa  fa-bookmark fa-lg"></i> 使用update的时候，出现了错误：stats:<br>也即是数据根本没有更新。寻寻觅觅……(参考地址：<a href="https://blog.csdn.net/Cooler_max/article/details/88756943" target="_blank" rel="noopener">参考解决地址</a>)<br>然后，用add方法来测试一下添加的数据是什么样的：<br>参考官网地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/database/collection.add.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/database/collection.add.html</a></p><pre class=" language-JavaScript"><code class="language-JavaScript">db.collection('weightdata').add({      // data 字段表示需新增的 JSON 数据      data: {        // _id: 'todo-identifiant-aleatoire', // 可选自定义 _id，在此处场景下用数据库自动分配的就可以了        description: "learn cloud database",        due: new Date("2018-09-01"),        tags: [          "cloud",          "database"        ],        // 为待办事项添加一个地理位置（113°E，23°N）        location: new db.Geo.Point(113, 23),        done: false      },      success: function (res) {        // res 是一个对象，其中有 _id 字段标记刚创建的记录的 id        console.log(res)      },      fail: console.error    })</code></pre><p>添加完成后，我们打开云开发控制台，然后，截图如下：<br><img src="/images/201907/2019-07-20_192846.png" alt="e"></p><p>而我自己添加的数据记录如下图：<br><img src="/images/201907/2019-07-20_193111.png" alt="e"></p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序代码构成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发 | 绘制折线图【一】【转】</title>
      <link href="/2019/07/weixinprogram-7/"/>
      <url>/2019/07/weixinprogram-7/</url>
      
        <content type="html"><![CDATA[<p> 简单了解一下绘制折线图</p><p>官网地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/canvas.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/component/canvas.html</a></p><p>在学习之前，不妨来使用一些别人封装好的图表组件，看看效果。使用教程：<a href="https://blog.csdn.net/hangGe0111/article/details/81633947" target="_blank" rel="noopener">https://blog.csdn.net/hangGe0111/article/details/81633947</a></p><ol><li>得到wxcharts.js<br>我放置在了我的站点目录，地址：<a href="/other/wxcharts.js">地址</a><br>下载下来，然后我放置在了utils文件夹下</li><li>按照教程测试</li></ol><p>test.wxml</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pieCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">disable-scroll</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ringCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">disable-scroll</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas canvas2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lineCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">disable-scroll</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>columnCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">disable-scroll</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>areaCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">disable-scroll</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radarCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">disable-scroll</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas canvas2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span></code></pre><p>test.wxss</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.canvas</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">750</span>rpx<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.canvas2</span></span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>test.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// miniprogram/pages/test/test.js</span><span class="token keyword">var</span> wxCharts <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../utils/wxcharts.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入wx-charts.js文件</span><span class="token comment" spellcheck="true">// pages/wxcharts/wxcharts.js</span><span class="token comment" spellcheck="true">//定义记录初始屏幕宽度比例，便于初始化</span><span class="token keyword">var</span> windowW <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 页面的初始数据   */</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 生命周期函数--监听页面加载   */</span>  onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 屏幕宽度</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      imageWidth<span class="token punctuation">:</span> wx<span class="token punctuation">.</span><span class="token function">getSystemInfoSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>windowWidth    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>imageWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算屏幕宽度比列</span>    windowW <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>imageWidth <span class="token operator">/</span> <span class="token number">375</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>windowW<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 生命周期函数--监听页面显示   */</span>  onShow<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// pieCanvas</span>    <span class="token keyword">new</span> <span class="token class-name">wxCharts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      animation<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否有动画</span>      canvasId<span class="token punctuation">:</span> <span class="token string">'pieCanvas'</span><span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token string">'pie'</span><span class="token punctuation">,</span>      series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量1'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量2'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量3'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token number">78</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">375</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">250</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>      dataLabel<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ringCanvas</span>    <span class="token keyword">new</span> <span class="token class-name">wxCharts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      animation<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      canvasId<span class="token punctuation">:</span> <span class="token string">'ringCanvas'</span><span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token string">'ring'</span><span class="token punctuation">,</span>      extra<span class="token punctuation">:</span> <span class="token punctuation">{</span>        ringWidth<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        pie<span class="token punctuation">:</span> <span class="token punctuation">{</span>          offsetAngle<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">45</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      title<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'70%'</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">'#7cb5ec'</span><span class="token punctuation">,</span>        fontSize<span class="token punctuation">:</span> <span class="token number">25</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      subtitle<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'收益率'</span><span class="token punctuation">,</span>        color<span class="token punctuation">:</span> <span class="token string">'#666666'</span><span class="token punctuation">,</span>        fontSize<span class="token punctuation">:</span> <span class="token number">15</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量1'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>        stroke<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量2'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span>        stroke<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量3'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token number">78</span><span class="token punctuation">,</span>        stroke<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量4'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token number">63</span><span class="token punctuation">,</span>        stroke<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      disablePieStroke<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">375</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>      dataLabel<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      legend<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      padding<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lineCanvas</span>    <span class="token keyword">new</span> <span class="token class-name">wxCharts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      canvasId<span class="token punctuation">:</span> <span class="token string">'lineCanvas'</span><span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token string">'line'</span><span class="token punctuation">,</span>      categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2016-1'</span><span class="token punctuation">,</span> <span class="token string">'2017-1'</span><span class="token punctuation">,</span> <span class="token string">'2018-1'</span><span class="token punctuation">,</span> <span class="token string">'2019-1'</span><span class="token punctuation">,</span> <span class="token string">'2020-1'</span><span class="token punctuation">,</span> <span class="token string">'2021-1'</span><span class="token punctuation">,</span> <span class="token string">'2022-1'</span><span class="token punctuation">,</span> <span class="token string">'2023-1'</span><span class="token punctuation">,</span> <span class="token string">'2024-1'</span><span class="token punctuation">,</span> <span class="token string">'2025-1'</span><span class="token punctuation">,</span> <span class="token string">'2026-1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      animation<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      background<span class="token punctuation">:</span> <span class="token string">'#f5f5f5'</span><span class="token punctuation">,</span>      series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量1'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'万'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量2'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'万'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        disableGrid<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      yAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'成交金额 (万元)'</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        min<span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">375</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>      dataLabel<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      dataPointShape<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      extra<span class="token punctuation">:</span> <span class="token punctuation">{</span>        lineStyle<span class="token punctuation">:</span> <span class="token string">'curve'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//columnCanvas</span>    <span class="token keyword">new</span> <span class="token class-name">wxCharts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      canvasId<span class="token punctuation">:</span> <span class="token string">'columnCanvas'</span><span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token string">'column'</span><span class="token punctuation">,</span>      animation<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2001</span><span class="token punctuation">,</span> <span class="token number">2002</span><span class="token punctuation">,</span> <span class="token number">2003</span><span class="token punctuation">,</span> <span class="token number">2004</span><span class="token punctuation">,</span> <span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">15.00</span><span class="token punctuation">,</span> <span class="token number">20.00</span><span class="token punctuation">,</span> <span class="token number">45.00</span><span class="token punctuation">,</span> <span class="token number">37.00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'万'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">6.00</span><span class="token punctuation">,</span> <span class="token number">9.00</span><span class="token punctuation">,</span> <span class="token number">20.00</span><span class="token punctuation">,</span> <span class="token number">45.00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'万'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      yAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val <span class="token operator">+</span> <span class="token string">'万'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        title<span class="token punctuation">:</span> <span class="token string">'hello'</span><span class="token punctuation">,</span>        min<span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        disableGrid<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token string">'calibration'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      extra<span class="token punctuation">:</span> <span class="token punctuation">{</span>        column<span class="token punctuation">:</span> <span class="token punctuation">{</span>          width<span class="token punctuation">:</span> <span class="token number">15</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">375</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//areaCanvas</span>    <span class="token keyword">new</span> <span class="token class-name">wxCharts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      canvasId<span class="token punctuation">:</span> <span class="token string">'areaCanvas'</span><span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token string">'area'</span><span class="token punctuation">,</span>      categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      animation<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量1'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'万'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量2'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'万'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      yAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'成交金额 (万元)'</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        min<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        fontColor<span class="token punctuation">:</span> <span class="token string">'#8085e9'</span><span class="token punctuation">,</span>        gridColor<span class="token punctuation">:</span> <span class="token string">'#8085e9'</span><span class="token punctuation">,</span>        titleFontColor<span class="token punctuation">:</span> <span class="token string">'#f7a35c'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fontColor<span class="token punctuation">:</span> <span class="token string">'#7cb5ec'</span><span class="token punctuation">,</span>        gridColor<span class="token punctuation">:</span> <span class="token string">'#7cb5ec'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      extra<span class="token punctuation">:</span> <span class="token punctuation">{</span>        legendTextColor<span class="token punctuation">:</span> <span class="token string">'#cb2431'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">375</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//radarCanvas</span>    <span class="token keyword">new</span> <span class="token class-name">wxCharts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      canvasId<span class="token punctuation">:</span> <span class="token string">'radarCanvas'</span><span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token string">'radar'</span><span class="token punctuation">,</span>      categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'成交量1'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">375</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>      height<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">200</span> <span class="token operator">*</span> windowW<span class="token punctuation">)</span><span class="token punctuation">,</span>      extra<span class="token punctuation">:</span> <span class="token punctuation">{</span>        radar<span class="token punctuation">:</span> <span class="token punctuation">{</span>          max<span class="token punctuation">:</span> <span class="token number">50</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>效果图：<br><img src="/images/201907/20180813173831628.png" alt="e"><br><img src="/images/201907/20180813173859245.png" alt="e"><br><img src="/images/201907/20180813173916572.png" alt="e"></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序代码构成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发 | 绘制折线图【二】</title>
      <link href="/2019/07/weixinprogram-8/"/>
      <url>/2019/07/weixinprogram-8/</url>
      
        <content type="html"><![CDATA[<p><i class="fa  fa-bookmark fa-lg"></i> 前面看了几个插件应用的效果，这里还是专门看看折线图<br>官网地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/canvas.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/component/canvas.html</a></p><p>拆分了一下，然后需要的就是下面的东西，结果示意图：<br><img src="/images/201907/2019-07-19_130120.png" alt="e"><br>test.wxml</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">canvas-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>areaCanvas<span class="token punctuation">"</span></span> <span class="token attr-name">disable-scroll</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canvas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">></span></span></code></pre><p>test.wxss</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.canvas</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">750</span>rpx<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>rpx<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>test.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// miniprogram/pages/test/test.js</span><span class="token keyword">var</span> wxCharts <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../../utils/wxcharts.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入wx-charts.js文件</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 页面的初始数据   */</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 生命周期函数--监听页面加载   */</span>  onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 屏幕宽度</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      windowWidth<span class="token punctuation">:</span> wx<span class="token punctuation">.</span><span class="token function">getSystemInfoSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>windowWidth <span class="token operator">/</span> <span class="token number">750</span> <span class="token operator">*</span> <span class="token number">700</span> <span class="token punctuation">,</span>      windowHeight<span class="token punctuation">:</span> wx<span class="token punctuation">.</span><span class="token function">getSystemInfoSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>windowHeight <span class="token operator">/</span> <span class="token number">750</span> <span class="token operator">*</span> <span class="token number">300</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 生命周期函数--监听页面显示   */</span>  onShow<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//areaCanvas 15个数据</span>    <span class="token keyword">new</span> <span class="token class-name">wxCharts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      canvasId<span class="token punctuation">:</span> <span class="token string">'areaCanvas'</span><span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token string">'area'</span><span class="token punctuation">,</span>      categories<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'2016-1'</span><span class="token punctuation">,</span> <span class="token string">'2017-1'</span><span class="token punctuation">,</span> <span class="token string">'2018-1'</span><span class="token punctuation">,</span> <span class="token string">'2019-1'</span><span class="token punctuation">,</span> <span class="token string">'2020-1'</span><span class="token punctuation">,</span> <span class="token string">'2021-1'</span><span class="token punctuation">,</span> <span class="token string">'2022-1'</span><span class="token punctuation">,</span> <span class="token string">'2023-1'</span><span class="token punctuation">,</span> <span class="token string">'2024-1'</span><span class="token punctuation">,</span> <span class="token string">'2025-1'</span><span class="token punctuation">,</span> <span class="token string">'2026-1'</span><span class="token punctuation">,</span> <span class="token string">'2017-1'</span><span class="token punctuation">,</span> <span class="token string">'2018-1'</span><span class="token punctuation">,</span> <span class="token string">'2019-1'</span><span class="token punctuation">,</span> <span class="token string">'2020-1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      animation<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      series<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'体重数值'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'kg'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      yAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        title<span class="token punctuation">:</span> <span class="token string">'体重（kg）'</span><span class="token punctuation">,</span>        format<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        min<span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">,</span>        fontColor<span class="token punctuation">:</span> <span class="token string">'#000'</span><span class="token punctuation">,</span>        gridColor<span class="token punctuation">:</span> <span class="token string">'#E5E5E5'</span><span class="token punctuation">,</span>        titleFontColor<span class="token punctuation">:</span> <span class="token string">'#000'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      xAxis<span class="token punctuation">:</span> <span class="token punctuation">{</span>        fontColor<span class="token punctuation">:</span> <span class="token string">'#000'</span><span class="token punctuation">,</span>        gridColor<span class="token punctuation">:</span> <span class="token string">'#F1F1F1'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      extra<span class="token punctuation">:</span> <span class="token punctuation">{</span>        legendTextColor<span class="token punctuation">:</span> <span class="token string">'#000'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      width<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>windowWidth<span class="token punctuation">,</span>      height<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>windowHeight    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序代码构成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发 | 分装组件【日历】二</title>
      <link href="/2019/07/weixinprogram-6/"/>
      <url>/2019/07/weixinprogram-6/</url>
      
        <content type="html"><![CDATA[<p>上一节提到了比较多的问题没有解决，这里就开始对不合理的数据进行在改造</p><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/</a> </p><p>问题比较多，列举几个：</p><ol><li>代码冗余<br>一个函数，就应该是一个功能，而不应该是冗余在一起，这样不利于后期的代码修改与调试</li><li>数据的封装规划不合理<br>对于数据的封装，也不应该冗余，也应该抽调出一个单独的函数来完成各自的功能<br>而且，在数据封装的时候需要考虑到处理数据的逻辑<br>处理的过程应该面相接口 ， 如firstday和lastday的封装</li><li>新增数据card，标记变量flag<br>这样就不用再重构daylist的时候去考虑计算每一个item中的最后一个元素的下标应该如何表示</li><li>边界问题<br>对于事件响应函数的处理，因该考虑边界问题，不应该出现没有实际意义的月份/年份<br>如2019-14-1就是不合理的</li><li>事件处理中的当前月<br>当前月，就因该在本月本日显示不一样的样式，也就是在daylist中的item中的第二个元素置1<br>非当前月份，设置在1号</li></ol><p>同样的还是先在showdate中修改代码，然后在封装成组件，先看看效果：<br><img src="/images/201907/2019-07-12_121212.png" alt="e"></p><p>代码修改的是逻辑，所以也就是修改的js代码，由于上一讲比较详细的讲了如何封装，这里就给出相应的js代码。<br>calendar.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 组件的属性列表   */</span>  properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span>    <span class="token comment" spellcheck="true">//当前月的天数，如30 30 1 2 3 ... 一共6*7=42个元素</span>    daylist<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 属性名</span>      type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 属性初始值（可选），如果未指定则会根据类型选择一个</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    card<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 属性名</span>      type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 属性初始值（可选），如果未指定则会根据类型选择一个</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    flag<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 属性名</span>      type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 属性初始值（可选），如果未指定则会根据类型选择一个</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//得到当前日期</span>    current_day<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//今天的下标，以设置样式</span>      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    current_year<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//今天的下标，以设置样式</span>      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    current_month<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//今天的下标，以设置样式</span>      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 组件的初始数据   */</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstday<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 每个月一号前的序号下标,即属于上一个月的天数的最后一天的下标</span>    lastday<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 属于下一个月第一天的小标</span>    today<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//今天的下标，以设置样式</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  pageLifetimes<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 组件所在页面的生命周期函数</span>    show<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>daylist<span class="token punctuation">)</span>      <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_day<span class="token punctuation">;</span>      <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year<span class="token punctuation">;</span>      <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        current_day<span class="token punctuation">:</span> day<span class="token punctuation">,</span>        current_year<span class="token punctuation">:</span> year<span class="token punctuation">,</span>        current_month<span class="token punctuation">:</span> month<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        daylist<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">datetimepick</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//判断flag，是否需要从云端加载当前月的card,然后根据card计算daylist item的第三个元素</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setdaylistbycard</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>card<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_day<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setbackgroundcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    hide<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    resize<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 组件的方法列表   */</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据card计算daylist</span>    setdaylistbycard<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>card<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//card = [1,5,8,9]</span>      <span class="token keyword">let</span> tempdaylist <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>daylist      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> card_i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> card_i <span class="token operator">&lt;</span> card<span class="token punctuation">.</span>length<span class="token punctuation">;</span> card_i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tempdaylist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> card<span class="token punctuation">[</span>card_i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              tempdaylist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//设置回去</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        daylist<span class="token punctuation">:</span> tempdaylist      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//设置本月日历中上一个月和下一个月的占位是多少</span>    setheadandlastday<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> firstday <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateweek</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算本月第一天是星期几</span>      <span class="token comment" spellcheck="true">//由于日历中前面不可能空一周，所以占位就是星期数</span>      <span class="token comment" spellcheck="true">//拿到本月天数</span>      <span class="token keyword">var</span> daynum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatedays</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到本月的天数</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        firstday<span class="token punctuation">:</span> firstday<span class="token punctuation">,</span>        lastday<span class="token punctuation">:</span> <span class="token punctuation">(</span>firstday <span class="token operator">+</span> daynum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//计算本月的上一个月有多少天</span>    getpremonthdays<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> previousday <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//需要考虑是否涉及上一年</span>      <span class="token comment" spellcheck="true">//因为1月份中，前一部分是上一年的12月的</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        previousday <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatedays</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        previousday <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatedays</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> previousday<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 按照42个元素位置封装每一个位置的元素     */</span>    datetimepick<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> firstday <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateweek</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计算本月第一天是星期几</span>      <span class="token keyword">var</span> previousday <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getpremonthdays</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//上个月的天数,计算就回退</span>      <span class="token comment" spellcheck="true">//假如是2，即星期二，前面应该是退两次，得几退几次，退的是上月的天数 </span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> firstday<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>previousday<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        previousday <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从最后一天开始回退</span>      <span class="token punctuation">}</span>      list<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//然后正常计算，在这里计算第几天的下标</span>      <span class="token keyword">var</span> curentday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatedays</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 拿到本月的天数</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> day<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>curentday<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 同理，加入三元组</span>        curentday <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> length <span class="token operator">=</span> list<span class="token punctuation">.</span>length <span class="token comment" spellcheck="true">//列表的长度就是上一个月占位 + 本月实际天数占位  剩余的就是下一个月占位</span>      <span class="token keyword">var</span> curentday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//下一个月的日历， 从1开始占位</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">42</span> <span class="token operator">-</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>curentday<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        curentday <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setheadandlastday</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">slicelist</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//将上面生成的日历列表按照周切割</span>    slicelist<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//为了方便表示，可以将list数组切割</span>      <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每页显示 7 条</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> newlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">42</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> num <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 可以被 7 整除</span>          newlist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          newlist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> newlist<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 计算某年某月某天，是星期几     */</span>    calculateweek<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> d <span class="token operator">=</span> d<span class="token punctuation">,</span>        m <span class="token operator">=</span> month<span class="token punctuation">,</span>        y <span class="token operator">=</span> year<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        y <span class="token operator">=</span> year <span class="token operator">-</span> <span class="token number">1</span>        m <span class="token operator">=</span> <span class="token number">13</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        y <span class="token operator">=</span> year <span class="token operator">-</span> <span class="token number">1</span>        m <span class="token operator">=</span> <span class="token number">14</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//带入公式：W= (d+2*m+3*(m+1)/5+y+y/4-y/100+y/400+1) mod 7</span>      <span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> m <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> w<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/***     * 得出某年的某月是有多少天     */</span>    calculatedays<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> months <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatemonth</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//计算该月有几天</span>      <span class="token keyword">return</span> months<span class="token punctuation">[</span>month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     *      * 根据某年，得出本年所有的月份的天数     */</span>    calculatemonth<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> fg <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> year <span class="token operator">/</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fg <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>fg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//事件响应函数，上一个月</span>    previousmonth<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year <span class="token operator">==</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year<span class="token punctuation">;</span>      <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setheadandlastday</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        year <span class="token operator">=</span> year <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        month <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        current_day<span class="token punctuation">:</span> day<span class="token punctuation">,</span>        current_year<span class="token punctuation">:</span> year<span class="token punctuation">,</span>        current_month<span class="token punctuation">:</span> month      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        daylist<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">datetimepick</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//判断flag，是否需要从云端加载当前月的card,然后根据card计算daylist item的第三个元素</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setdaylistbycard</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//模拟一下，需要从云端加载</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setbackgroundcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//后一个月</span>    nextmonth<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//计算当前的月份和年份是否是本年本月，是就需要设置today为今天的下标，否则设置为1</span>      <span class="token comment" spellcheck="true">// console.log(new Date().getFullYear())  //2019</span>      <span class="token comment" spellcheck="true">// console.log(new Date().getDate())   //12</span>      <span class="token comment" spellcheck="true">// console.log(new Date().getMonth())  // 6</span>      <span class="token keyword">let</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year <span class="token operator">==</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>      <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year<span class="token punctuation">;</span>      <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setheadandlastday</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">>=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        year <span class="token operator">=</span> year <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        month <span class="token operator">=</span> month <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        current_day<span class="token punctuation">:</span> day<span class="token punctuation">,</span>        current_year<span class="token punctuation">:</span> year<span class="token punctuation">,</span>        current_month<span class="token punctuation">:</span> month      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        daylist<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">datetimepick</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//判断flag，是否需要从云端加载当前月的card,然后根据card计算daylist item的第三个元素</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setdaylistbycard</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//模拟一下，需要从云端加载</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setbackgroundcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//测试函数：如果是当前月，将daylist item中的对应位置置1</span>    setbackgroundcolor<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tempdaylist <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>daylist      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getdayindex</span><span class="token punctuation">(</span>tempdaylist<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_day<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//循环判断得到对应index位置的元素</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//找到对应位置，设置当前的值为1[xx, 1, 0]  0是打卡记录</span>            tempdaylist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//设置回去</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        daylist<span class="token punctuation">:</span> tempdaylist      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//计算本月某一天所在daylist的整体拉通的下标(从0开始)</span>    getdayindex<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>tempdaylist<span class="token punctuation">,</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>tempdaylist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_day<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>              today<span class="token punctuation">:</span> index            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> index<span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            index <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后在引用组件时候需要注意的是数组的传递需要使用括号，如下：<br>showdate.wxml</p><pre class=" language-html"><code class="language-html"> &lt;calendar     card= '{{[1,4,9,10,11]}}'    current_day="12"    current_month="7"    current_year="2019"      >  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>calendar</span><span class="token punctuation">></span></span></code></pre><p>当然，card需要每次在响应事件的时候，从云端加载。下面就实现从云端加载的功能：</p><p>打开官网API：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html</a></p><p>打开云开发控制台，不妨建立一个card的数据集合，然后设置该集合的权限，如下图：<br><img src="/images/201907/2019-07-12_123655.png" alt="e"><br>然后，添加记录，ID使用系统生成，具体的如下图：<br><img src="/images/201907/2019-07-12_123820.png" alt="e"></p><p>寻寻觅觅，找到和操作相关的API（地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/database/collection.get.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/wxcloud/reference-client-api/database/collection.get.html</a> ），找到案例，修改修改：</p><pre class=" language-JavaScript"><code class="language-JavaScript">const db = wx.cloud.database()    db.collection('card').where({      month:7,      year:2019    }).get().then(res => {      console.log(res.data[0].card)    })</code></pre><p>然后，在控制台中可以看见输出：<br><img src="/images/201907/2019-07-12_124802.png" alt="e"></p><p>刚好就是我们设置的数据。<br>完整的逻辑因该是：<br>在show函数中，修改一下</p><pre class=" language-JavaScript"><code class="language-JavaScript">//判断flag，是否需要从云端加载当前月的card,然后根据card计算daylist item的第三个元素    if (!this.data.flag) {      const db = wx.cloud.database()      db.collection('card').where({          month: this.data.current_month,          year: this.data.current_year      }).get().then(res => {        this.setdaylistbycard(res.data[0].card);        this.setData({          card: res.data[0].card        })      })    }else{      this.setdaylistbycard(this.data.card);    }    this.setbackgroundcolor();</code></pre><p>当然在事件响应函数中也应该处理，完整的calendar.js代码如下：</p><pre class=" language-JavaScript"><code class="language-JavaScript">Component({  /**   * 组件的属性列表   */  properties: {    // 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）    //当前月的天数，如30 30 1 2 3 ... 一共6*7=42个元素    daylist: { // 属性名      type: Array,      value: [] // 属性初始值（可选），如果未指定则会根据类型选择一个    },    card: { // 属性名      type: Array,      value: [] // 属性初始值（可选），如果未指定则会根据类型选择一个    },    flag: { // 属性名      type: Boolean,      value: false // 属性初始值（可选），如果未指定则会根据类型选择一个    },    //得到当前日期    current_day: { //今天的下标，以设置样式      type: Number,      value: 0    },    current_year: { //今天的下标，以设置样式      type: Number,      value: 0    },    current_month: { //今天的下标，以设置样式      type: Number,      value: 0    }  },  /**   * 组件的初始数据   */  data: {    firstday: 0, // 每个月一号前的序号下标,即属于上一个月的天数的最后一天的下标    lastday: 0, // 属于下一个月第一天的小标    today: 0 //今天的下标，以设置样式  },  pageLifetimes: {    // 组件所在页面的生命周期函数    show: function() {      console.log(this.data.daylist)      var day = this.data.current_day;      var year = this.data.current_year;      var month = this.data.current_month;      this.setData({        current_day: day,        current_year: year,        current_month: month,      });      this.setData({        daylist: this.datetimepick(year, month)      });      //判断flag，是否需要从云端加载当前月的card,然后根据card计算daylist item的第三个元素      if (!this.data.flag) {        const db = wx.cloud.database()        db.collection('card').where({          month: this.data.current_month,          year: this.data.current_year        }).get().then(res => {          this.setdaylistbycard(res.data[0].card);          this.setData({            card: res.data[0].card          })        })      } else {        this.setdaylistbycard(this.data.card);      }      this.setbackgroundcolor();    },    hide: function() {},    resize: function() {},  },  /**   * 组件的方法列表   */  methods: {    //根据card计算daylist    setdaylistbycard: function (card) {      //card = [1,5,8,9]      let tempdaylist = this.data.daylist      for (var card_i = 0; card_i < card.length; card_i++) {        for (var i = 0; i < 6; i++) {          for (var j = 0; j < 7; j++) {            if (tempdaylist[i][j][0] == card[card_i]) {              tempdaylist[i][j][2] = 1;            }          }        }      }      //设置回去      this.setData({        daylist: tempdaylist      });    },    //设置本月日历中上一个月和下一个月的占位是多少    setheadandlastday: function (y, m) {      var firstday = this.calculateweek(y, m, 1) - 1; //计算本月第一天是星期几      //由于日历中前面不可能空一周，所以占位就是星期数      //拿到本月天数      var daynum = this.calculatedays(y, m); // 拿到本月的天数      this.setData({        firstday: firstday,        lastday: (firstday + daynum + 1)      });    },    //计算本月的上一个月有多少天    getpremonthdays: function (y, m) {      var previousday = 0;      //需要考虑是否涉及上一年      //因为1月份中，前一部分是上一年的12月的      if (m == 1) {        previousday = this.calculatedays(y - 1, 12);      } else {        previousday = this.calculatedays(y, m - 1);      }      return previousday;    },    /**     * 按照42个元素位置封装每一个位置的元素     */    datetimepick: function (y, m) {      var list = [];      var firstday = this.calculateweek(y, m, 1); //计算本月第一天是星期几      var previousday = this.getpremonthdays(y, m) //上个月的天数,计算就回退      //假如是2，即星期二，前面应该是退两次，得几退几次，退的是上月的天数       for (var i = 0; i < firstday; i++) {        list.push([previousday, 0, 0]);        previousday -= 1; //从最后一天开始回退      }      list.reverse();      //然后正常计算，在这里计算第几天的下标      var curentday = 1;      var day = this.calculatedays(y, m); // 拿到本月的天数      for (var i = 0; i < day; i++) {        list.push([curentday, 0, 0]); // 同理，加入三元组        curentday += 1;      }      var length = list.length //列表的长度就是上一个月占位 + 本月实际天数占位  剩余的就是下一个月占位      var curentday = 1; //下一个月的日历， 从1开始占位      for (var i = 0; i < 42 - length; i++) {        list.push([curentday, 0, 0]);        curentday += 1;      }      this.setheadandlastday(y, m);      return this.slicelist(list);    },    //将上面生成的日历列表按照周切割    slicelist: function (list) {      //为了方便表示，可以将list数组切割      var num = 7; // 每页显示 7 条      var index = 0;      var newlist = [];      for (var i = 0; i < 42; i++) {        if (i % num === 0 && i !== 0) { // 可以被 7 整除          newlist.push(list.slice(index, i));          index = i;        };        if ((i + 1) === 42) {          newlist.push(list.slice(index, (i + 1)));        }      }      return newlist;    },    /**     * 计算某年某月某天，是星期几     */    calculateweek: function (year, month, d) {      var d = d,        m = month,        y = year;      if (month == 1) {        y = year - 1        m = 13      }      if (month == 2) {        y = year - 1        m = 14      }      //带入公式：W= (d+2*m+3*(m+1)/5+y+y/4-y/100+y/400+1) mod 7      var w = (d + 2 * m + parseInt(3 * (m + 1) / 5) + y + parseInt(y / 4) - parseInt(y / 100) + parseInt(y / 400) + 1) % 7;      return w;    },    /***     * 得出某年的某月是有多少天     */    calculatedays: function (year, month) {      var months = this.calculatemonth(year);      //计算该月有几天      return months[month - 1];    },    /**     *      * 根据某年，得出本年所有的月份的天数     */    calculatemonth: function (year) {      var fg = false;      if ((year / 4 == 0 && year / 100 != 0) || year / 400 == 0) {        fg = true;      }      if (fg) {        return [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];      } else {        return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];      }    },    //事件响应函数，上一个月    previousmonth: function () {      let date = new Date();      var day = 1;      if (this.data.current_year == date.getFullYear() && this.data.current_month - 1 == date.getMonth() + 1) {        day = date.getDate()      }      var year = this.data.current_year;      var month = this.data.current_month;      this.setheadandlastday(year, month);      if (month == 1) {        month = 12;        year = year - 1;      } else {        month -= 1;      }      this.setData({        current_day: day,        current_year: year,        current_month: month      });      this.setData({        daylist: this.datetimepick(year, month)      });      //判断flag，是否需要从云端加载当前月的card,然后根据card计算daylist item的第三个元素      if (!this.data.flag) {        const db = wx.cloud.database()        db.collection('card').where({          month: this.data.current_month,          year: this.data.current_year        }).get().then(res => {          if (res.data[0]!=null){            this.setdaylistbycard(res.data[0].card);            this.setData({              card: res.data[0].card            })          }        })      } else {        this.setdaylistbycard(this.data.card);      }      this.setbackgroundcolor();    },    //后一个月    nextmonth: function () {      //计算当前的月份和年份是否是本年本月，是就需要设置today为今天的下标，否则设置为1      // console.log(new Date().getFullYear())  //2019      // console.log(new Date().getDate())   //12      // console.log(new Date().getMonth())  // 6      let date = new Date();      var day = 1;      if (this.data.current_year == date.getFullYear() && this.data.current_month + 1 == date.getMonth() + 1) {        day = date.getDate()      }      var year = this.data.current_year;      var month = this.data.current_month;      this.setheadandlastday(year, month);      if (month >= 12) {        month = 1;        year = year + 1;      } else {        month = month + 1;      }      this.setData({        current_day: day,        current_year: year,        current_month: month      });      this.setData({        daylist: this.datetimepick(year, month)      });      //判断flag，是否需要从云端加载当前月的card,然后根据card计算daylist item的第三个元素      if (!this.data.flag) {        const db = wx.cloud.database()        db.collection('card').where({          month: this.data.current_month,          year: this.data.current_year        }).get().then(res => {          if (res.data[0] != null) {            this.setdaylistbycard(res.data[0].card);            this.setData({              card: res.data[0].card            })          }        })      } else {        this.setdaylistbycard(this.data.card);      }      this.setbackgroundcolor();    },    //测试函数：如果是当前月，将daylist item中的对应位置置1    setbackgroundcolor: function () {      var tempdaylist = this.data.daylist      var index = this.getdayindex(tempdaylist, this.data.current_day)      //循环判断得到对应index位置的元素      for (var i = 0; i < 6; i++) {        for (var j = 0; j < 7; j++) {          if (j + i * 7 == index) {            //找到对应位置，设置当前的值为1[xx, 1, 0]  0是打卡记录            tempdaylist[i][j][1] = 1;          }        }      }      //设置回去      this.setData({        daylist: tempdaylist      });    },    //计算本月某一天所在daylist的整体拉通的下标(从0开始)    getdayindex: function (tempdaylist, day) {      let index = 0;      for (var i = 0; i < 6; i++) {        for (var j = 0; j < 7; j++) {          if (tempdaylist[i][j][0] == this.data.current_day) {            this.setData({              today: index            });            return index;          } else {            index += 1;          }        }      }    }  }})</code></pre><p>然后就是添加打卡到数据库中存储就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序代码构成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发 | 分装组件【日历】</title>
      <link href="/2019/07/weixinprogram-5/"/>
      <url>/2019/07/weixinprogram-5/</url>
      
        <content type="html"><![CDATA[<p><i class="fa  fa-bookmark fa-lg"></i> 有了前面的分装对话框，接下来分装一个日历相比是要复杂一些，接着就来试试。</p><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/</a> </p><p>首先我们需要解决两个问题：</p><ol><li>给定日期，如何计算是星期几？<br>参考文章地址：<a href="https://blog.csdn.net/qq_35455503/article/details/82256784" target="_blank" rel="noopener">https://blog.csdn.net/qq_35455503/article/details/82256784</a><br>基姆拉尔森计算公式<br>W= (d+2<em>m+3</em>(m+1)/5+y+y/4-y/100+y/400+1) mod 7<br>在公式中d表示日期中的日数，m表示月份数，y表示年数。<br>注意：在公式中有个与其他公式不同的地方：<br>把一月和二月看成是上一年的十三月和十四月，例：如果是2004-1-10则换算成：2003-13-10来代入公式计算。</li><li>了解平年、闰年<br>参考文章地址：<a href="https://www.cnblogs.com/mq0036/p/3534096.html" target="_blank" rel="noopener">https://www.cnblogs.com/mq0036/p/3534096.html</a><br>首先，我们看看两者有什么不同：一年有365天，叫做平年；一年有366天，叫做闰年，把这一天加在2月里。 四年一闰，百年不闰，四百年再闰。<br>常用的计算方式：<br>①非世纪年能被4整除，且不能被100整除的是闰年。（如2004年是闰年，1901年不是闰年）<br>②世纪年能被400整除的是闰年。（如2000年少闰年，1900年不是闰年）<br>两个条件需要一起使用，才不会漏掉。</li><li>怎样分装数据，以方便表示<br>常见的app的日历，都是日期六行，然后7列，故而我这里也就用一个数组来表示。<br>尝试了一下，我这里将数据按照日历中的42个格子，按位置封装元素。<br>每一个元素的格式是：[天， 是否是今天的标志， 是否是记录过的标志]<br>标志位置，1==True, 0==False<br>设置标志位置，主要是为了方便使用css样式<br>如：<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//行 </span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre></li></ol><p>这里先看看如何使用的css样式：</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{daylist}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>dayrow<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{list}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{index + i * 7&lt;<span class="token punctuation">=</span>firstday 7 || index + i *<span class="token punctuation">></span><span class="token punctuation">=</span>lastday}}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>notcurentmonth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;text wx:elif="{{index + i * 7 == today }}" class="today">{{item[0]}}&lt;/text> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item[1]<span class="token punctuation">=</span><span class="token punctuation">=</span>1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item[2]<span class="token punctuation">=</span><span class="token punctuation">=</span>1}}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todayandrecord<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>today<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item[1]<span class="token punctuation">=</span><span class="token punctuation">=</span>0}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item[2]<span class="token punctuation">=</span><span class="token punctuation">=</span>1}}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>record<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item[2]<span class="token punctuation">=</span><span class="token punctuation">=</span>0}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>&lt;/=firstday></code></pre><p>来看看效果：<br><img src="/images/201907/2019-07-08_121823.png" alt="e"></p><hr><p>有了上一节的模板，我们可以很快的实现。但是先不需要关注直接定义组件，因为不容易观察和调试。<br>我们可以先直接定义成一个页面，如我定义成showdate页面，在app.json中，将它设置成首页：</p><pre class=" language-json"><code class="language-json"><span class="token property">"pages"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"pages/showdate/showdate"</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>然后和写html代码一样，关注如何实现就可以了，下面分别给出对应的源码：<br>showdate.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// miniprogram/pages/showdate/showdate.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 页面的初始数据   */</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    daylist<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//当前月的天数，如30 30 1 2 3 ... 一共6*7=42个元素</span>    <span class="token comment" spellcheck="true">//需要注意的是，下面的下标是按照42天拉通排的下标，在wxml中使用index + i * 7来得到实际下标，然后计算的。</span>    firstday<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 每个月一号前的序号下标,即属于上一个月的天数的最后一天的下标</span>    lastday<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 属于下一个月第一天的小标</span>    today<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//今天的下标，以设置样式</span>    <span class="token comment" spellcheck="true">//得到当前日期</span>    current_day<span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>    current_year<span class="token punctuation">:</span> <span class="token number">2019</span><span class="token punctuation">,</span>    current_month<span class="token punctuation">:</span> <span class="token number">7</span>    <span class="token comment" spellcheck="true">// currentmonth_record:[] //当前月份的包含三个记录的json数组，从数据库中取。数据格式：[y:'2019',m:'7',d:'8', daylist:[[[30,0,0],[1,0,0],[],[],[],[],[],[]],[],[],[],[],[],[]]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 生命周期函数--监听页面加载   */</span>  onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 生命周期函数--监听页面初次渲染完成   */</span>  onReady<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 生命周期函数--监听页面显示   */</span>  onShow<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> day <span class="token operator">=</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_day<span class="token punctuation">;</span>    <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year<span class="token punctuation">;</span>    <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      current_day<span class="token punctuation">:</span> day<span class="token punctuation">,</span>      current_year<span class="token punctuation">:</span> year<span class="token punctuation">,</span>      current_month<span class="token punctuation">:</span> month<span class="token punctuation">,</span>      daylist<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">datetimepick</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setcurrentday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>daylist<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 生命周期函数--监听页面隐藏   */</span>  onHide<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 生命周期函数--监听页面卸载   */</span>  onUnload<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 页面相关事件处理函数--监听用户下拉动作   */</span>  onPullDownRefresh<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 页面上拉触底事件的处理函数   */</span>  onReachBottom<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 用户点击右上角分享   */</span>  onShareAppMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/**   * 按照42个元素位置封装每一个位置的元素   */</span>  datetimepick<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//首先拿到本月的天数</span>    <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatedays</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//然后计算本月第一天是星期几</span>    <span class="token keyword">var</span> first <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateweek</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      firstday<span class="token punctuation">:</span>first<span class="token number">-1</span>  <span class="token comment" spellcheck="true">//返回下标</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//假如是2，即星期二，前面应该是退两次，得几退几次，退的是上月的天数</span>    <span class="token keyword">var</span> previousday <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//需要考虑是否涉及上一年</span>    <span class="token comment" spellcheck="true">//因为1月份中，前一部分是上一年的12月的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      previousday <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatedays</span><span class="token punctuation">(</span>y<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      previousday <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatedays</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>first<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// list.push(previousday);//数据分装的不好，应该是[day, isrecord, istoday]</span>      list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>previousday<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//0=False, 1=True</span>      previousday<span class="token operator">-</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//然后正常计算，在这里计算第几天的下标</span>    <span class="token keyword">var</span> curentday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> day<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>curentday <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_day<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//计算今天的下标</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          today<span class="token punctuation">:</span> list<span class="token punctuation">.</span>length        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>curentday<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 同理，加入三元组</span>      curentday <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算余下的，后面的一定是42减去元素的个数，然后从1开始累加，</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> list<span class="token punctuation">.</span>length    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      lastday<span class="token punctuation">:</span> length  <span class="token comment" spellcheck="true">//返回下标</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> curentday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">42</span> <span class="token operator">-</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// list.push(curentday);</span>      list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>curentday<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      curentday <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//为了方便表示，可以将list数组切割</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 每页显示 10 条</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newlist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">42</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> num <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 可以被 10 整除</span>        newlist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        newlist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newlist<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 计算某年某月某天，是星期几   */</span>  calculateweek<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> d<span class="token operator">=</span>d<span class="token punctuation">,</span> m <span class="token operator">=</span> month<span class="token punctuation">,</span> y <span class="token operator">=</span> year<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      y <span class="token operator">=</span> year <span class="token operator">-</span> <span class="token number">1</span>      m <span class="token operator">=</span> <span class="token number">13</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      y <span class="token operator">=</span> year <span class="token operator">-</span> <span class="token number">1</span>      m <span class="token operator">=</span> <span class="token number">14</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//带入公式：W= (d+2*m+3*(m+1)/5+y+y/4-y/100+y/400+1) mod 7</span>    <span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> m <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> w<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/***   * 得出某年的某月是有多少天   */</span>  calculatedays<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> months <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatemonth</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算该月有几天</span>    <span class="token keyword">return</span> months<span class="token punctuation">[</span>month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   *    * 根据某年，得出本年所有的月份的天数   */</span>  calculatemonth<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> year <span class="token operator">/</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  previousmonth<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year<span class="token punctuation">;</span>    <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>      year <span class="token operator">=</span> year <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      current_day<span class="token punctuation">:</span> day<span class="token punctuation">,</span>      current_year<span class="token punctuation">:</span> year<span class="token punctuation">,</span>      current_month<span class="token punctuation">:</span> month    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      daylist<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">datetimepick</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setcurrentday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  nextmonth<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year<span class="token punctuation">;</span>    <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      year <span class="token operator">=</span> year <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      current_day<span class="token punctuation">:</span> day<span class="token punctuation">,</span>      current_year<span class="token punctuation">:</span> year<span class="token punctuation">,</span>      current_month<span class="token punctuation">:</span> month    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      daylist<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">datetimepick</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setcurrentday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//测试函数：如果是当前月，将daylist item中的对应位置置1</span>  setcurrentday<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>today  <span class="token comment" spellcheck="true">//取今天的下标</span>    <span class="token keyword">var</span> tempdaylist <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>daylist    <span class="token comment" spellcheck="true">//循环判断得到对应index位置的元素</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> j <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">==</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//找到对应位置，设置当前的值为1[xx, 1, 0]  0是打卡记录</span>          tempdaylist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// console.log((j + i * 7) % 5)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>          tempdaylist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置回去</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      daylist<span class="token punctuation">:</span> tempdaylist    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>showdate.wxml</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>selectmonth<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">catchtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>previousmonth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>＜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>{{current_year}}-{{current_month}}-{{current_day}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">catchtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nextmonth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>＞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>datetitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>五<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>六<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{daylist}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>dayrow<span class="token punctuation">'</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{list}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{index + i * 7&lt;<span class="token punctuation">=</span>firstday 7 || index + i *<span class="token punctuation">></span><span class="token punctuation">=</span>lastday}}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>notcurentmonth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;text wx:elif="{{index + i * 7 == today }}" class="today">{{item[0]}}&lt;/text> --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item[1]<span class="token punctuation">=</span><span class="token punctuation">=</span>1}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item[2]<span class="token punctuation">=</span><span class="token punctuation">=</span>1}}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>todayandrecord<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>today<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item[1]<span class="token punctuation">=</span><span class="token punctuation">=</span>0}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item[2]<span class="token punctuation">=</span><span class="token punctuation">=</span>1}}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>record<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item[2]<span class="token punctuation">=</span><span class="token punctuation">=</span>0}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item[0]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>&lt;/=firstday></code></pre><p>showdate.wxss</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span></span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">95%</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>rpx auto<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">30</span>rpx<span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">30</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.selectmonth</span></span><span class="token punctuation">{</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">20</span> rpx<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#01DBCA</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.selectmonth</span> text</span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">80</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.datetitle</span></span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span>row<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*垂直居中*/</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*水平居中*/</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#01DBCA</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0.8</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.datetitle</span> text</span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.dayrow</span></span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span>row<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*垂直居中*/</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*水平居中*/</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#888</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0.8</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.dayrow</span> text</span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">80</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.notcurentmonth</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#eee</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.today</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#01DBCA</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.record</span></span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#EFE4B0</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>rpx<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.todayandrecord</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#01DBCA</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#EFE4B0</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>rpx<span class="token punctuation">}</span></code></pre><p>上面也就实现了，接着我们就需要抽象成为组件：<br>还是在components文件夹下定义组件，这里命名为calendar，开始抽取：<br>其中wxml文件和wxss文件不变，直接拷贝进去就可以，需要弄得就是js文件：<br>calendar.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 组件的属性列表   */</span>  properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span>    <span class="token comment" spellcheck="true">//当前月的天数，如30 30 1 2 3 ... 一共6*7=42个元素</span>    daylist<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 属性名</span>      type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 属性初始值（可选），如果未指定则会根据类型选择一个</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//得到当前日期</span>    current_day<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//今天的下标，以设置样式</span>      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    current_year<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//今天的下标，以设置样式</span>      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    current_month<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//今天的下标，以设置样式</span>      type<span class="token punctuation">:</span> Number<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 组件的初始数据   */</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstday<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 每个月一号前的序号下标,即属于上一个月的天数的最后一天的下标</span>    lastday<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 属于下一个月第一天的小标</span>    today<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">//今天的下标，以设置样式</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  pageLifetimes<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 组件所在页面的生命周期函数</span>    show<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_day<span class="token punctuation">;</span>      <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year<span class="token punctuation">;</span>      <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        current_day<span class="token punctuation">:</span> day<span class="token punctuation">,</span>        current_year<span class="token punctuation">:</span> year<span class="token punctuation">,</span>        current_month<span class="token punctuation">:</span> month<span class="token punctuation">,</span>        daylist<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">datetimepick</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setcurrentday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    hide<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    resize<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 组件的方法列表   */</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 按照42个元素位置封装每一个位置的元素     */</span>    datetimepick<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//首先拿到本月的天数</span>      <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatedays</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//然后计算本月第一天是星期几</span>      <span class="token keyword">var</span> first <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculateweek</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        firstday<span class="token punctuation">:</span> first <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">//返回下标</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//假如是2，即星期二，前面应该是退两次，得几退几次，退的是上月的天数</span>      <span class="token keyword">var</span> previousday <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//需要考虑是否涉及上一年</span>      <span class="token comment" spellcheck="true">//因为1月份中，前一部分是上一年的12月的</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        previousday <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatedays</span><span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        previousday <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatedays</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> first<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// list.push(previousday);//数据分装的不好，应该是[day, isrecord, istoday]</span>        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>previousday<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0=False, 1=True</span>        previousday <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//然后正常计算，在这里计算第几天的下标</span>      <span class="token keyword">var</span> curentday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> day<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curentday <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_day<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//计算今天的下标</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            today<span class="token punctuation">:</span> list<span class="token punctuation">.</span>length          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>curentday<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 同理，加入三元组</span>        curentday <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//计算余下的，后面的一定是42减去元素的个数，然后从1开始累加，</span>      <span class="token keyword">var</span> length <span class="token operator">=</span> list<span class="token punctuation">.</span>length      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        lastday<span class="token punctuation">:</span> length <span class="token comment" spellcheck="true">//返回下标</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> curentday <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">42</span> <span class="token operator">-</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// list.push(curentday);</span>        list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>curentday<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        curentday <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//为了方便表示，可以将list数组切割</span>      <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每页显示 10 条</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> newlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">42</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> num <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 可以被 10 整除</span>          newlist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          newlist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> newlist<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * 计算某年某月某天，是星期几     */</span>    calculateweek<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> d <span class="token operator">=</span> d<span class="token punctuation">,</span>        m <span class="token operator">=</span> month<span class="token punctuation">,</span>        y <span class="token operator">=</span> year<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        y <span class="token operator">=</span> year <span class="token operator">-</span> <span class="token number">1</span>        m <span class="token operator">=</span> <span class="token number">13</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        y <span class="token operator">=</span> year <span class="token operator">-</span> <span class="token number">1</span>        m <span class="token operator">=</span> <span class="token number">14</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//带入公式：W= (d+2*m+3*(m+1)/5+y+y/4-y/100+y/400+1) mod 7</span>      <span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> m <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>y <span class="token operator">/</span> <span class="token number">400</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> w<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/***     * 得出某年的某月是有多少天     */</span>    calculatedays<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> months <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calculatemonth</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//计算该月有几天</span>      <span class="token keyword">return</span> months<span class="token punctuation">[</span>month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     *      * 根据某年，得出本年所有的月份的天数     */</span>    calculatemonth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> year <span class="token operator">/</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    previousmonth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year<span class="token punctuation">;</span>      <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        month <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        year <span class="token operator">=</span> year <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        current_day<span class="token punctuation">:</span> day<span class="token punctuation">,</span>        current_year<span class="token punctuation">:</span> year<span class="token punctuation">,</span>        current_month<span class="token punctuation">:</span> month      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        daylist<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">datetimepick</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setcurrentday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    nextmonth<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_year<span class="token punctuation">;</span>      <span class="token keyword">var</span> month <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>current_month <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        month <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        year <span class="token operator">=</span> year <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        current_day<span class="token punctuation">:</span> day<span class="token punctuation">,</span>        current_year<span class="token punctuation">:</span> year<span class="token punctuation">,</span>        current_month<span class="token punctuation">:</span> month      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        daylist<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">datetimepick</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setcurrentday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//测试函数：如果是当前月，将daylist item中的对应位置置1</span>    setcurrentday<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>today <span class="token comment" spellcheck="true">//取今天的下标</span>      <span class="token keyword">var</span> tempdaylist <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>daylist      <span class="token comment" spellcheck="true">//循环判断得到对应index位置的元素</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//找到对应位置，设置当前的值为1[xx, 1, 0]  0是打卡记录</span>            tempdaylist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// console.log((j + i * 7) % 5)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>            tempdaylist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//设置回去</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        daylist<span class="token punctuation">:</span> tempdaylist      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>值得注意的有两点：</p><ol><li><p>属性和私有数据都可以使用this.data来访问<br>实际运用中，属性就相当于外部接口，用于外部设置data数据<br>而data中的，就是自己根据需要定义的<br>这两种类型的数据都可以用this.data.xx来访问。</p><pre class=" language-JavaScript"><code class="language-JavaScript">properties: { myProperty: { // 属性名   type: String,   value: '' }, myProperty2: String // 简化的定义方式},data: {}, // 私有数据，可用于模板渲染</code></pre></li><li><p>组件的声明周期函数：</p><pre class=" language-JavaScript"><code class="language-JavaScript">pageLifetimes: { // 组件所在页面的生命周期函数 show: function () { }, hide: function () { }, resize: function () { },},</code></pre></li></ol><p>我们来看一看结果：<br>还是在showdate.wxml文件中使用看看效果。首先我们需要在json中引用：<br>showdate.json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"calendar"</span><span class="token operator">:</span> <span class="token string">"/pages/components/calendar/calendar"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后，就可以在showdate.wxml文件中使用：<br>showdate.wxml</p><pre class=" language-HTML"><code class="language-HTML"> <calendar       daylist="[[[30,1,0],[1,0,0],[2,0,0],[3,0,0],[4,0,0],[5,0,0],[6,1,0]],[[30,1,0],[1,0,0],[2,0,0],[3,0,0],[4,0,0],[5,0,0],[6,1,0]],[[30,1,0],[1,0,0],[2,0,0],[3,0,0],[4,0,0],[5,0,0],[6,1,0]],[[30,1,0],[1,0,0],[2,0,0],[3,0,0],[4,0,0],[5,0,0],[6,1,0]],[[30,1,0],[1,0,0],[2,0,0],[3,0,0],[4,0,0],[5,0,0],[6,1,0]],[[30,1,0],[1,0,0],[2,0,0],[3,0,0],[4,0,0],[5,0,0],[6,1,0]]]"    current_day="9"    current_month="7"    current_year="2019"      >  </calendar></code></pre><p>值得注意的就是：<strong>在使用参数的时候是等号，不是冒号，而且无论定义的是什么类型的数据，传入都需要用双引号包起来</strong></p><p>需要设置一下样式：<br>showdate.wxss</p><pre class=" language-css"><code class="language-css"><span class="token selector">calendar</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><p>其实我上面的daylist数据没有被使用到，而是直接根据输入的日期来计算得到的日历<br>那么为什么要在这里保留daylist?<br>其实，因为我觉得数据应该从数据库中获取，打个比方，上一个月的打卡记录，就应该是保存在数据库中的，也就是在daylist数组中因该有[x, 0,1]的记录，而记录这个东西不是算的，而是直接读取的。<br>所以第二个版本因该就是从数据库中读和写<br>感觉应该设置一个标志flag，表示是否从数据库中读，不读就直接根据当前的日期计算得了。</p><p>姑且将上面的命名为1.0版本。</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序代码构成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发 | 分装组件【窗口对话框】</title>
      <link href="/2019/07/weixinprogram-4/"/>
      <url>/2019/07/weixinprogram-4/</url>
      
        <content type="html"><![CDATA[<p> 前端，很多时候都需要一些组件，然而实际没有直接提供，我们就需要自己封转。</p><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/</a><br>这里先看一下分装一个组件的目录结构：<br><img src="/images/201907/2019-07-07_100937.png" alt="e"><br>不难看出目录的结构和实际的每个页面都是一样的。实际上也是差不多的。<br>首先是dialog.json文件：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"component"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  /*设置模式是组件*/  <span class="token property">"usingComponents"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  /*这里还可以引用别的组件*/<span class="token punctuation">}</span></code></pre><p>然后我们看看dialog.js文件，但是首先我们需要看一下用开发工具建立的空白的dialog.js文件</p><pre class=" language-js"><code class="language-js"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 组件的属性列表   */</span>  properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 组件的初始数据   */</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 组件的方法列表   */</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>然后，贴下dialog.js编写后的码：</p><pre class=" language-js"><code class="language-js"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>    multipleSlots<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">// 在组件定义时的选项中启用多slot支持</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 组件的属性列表   */</span>  properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 弹窗提示文字</span>    pop_info<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 属性名</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 类型（必填），目前接受的类型包括：String, Number, Boolean, Object, Array, null（表示任意类型）</span>      value<span class="token punctuation">:</span> <span class="token string">'内容'</span>     <span class="token comment" spellcheck="true">// 属性初始值（可选），如果未指定则会根据类型选择一个</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 弹窗确认按钮文字</span>    pop_confirm<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      value<span class="token punctuation">:</span> <span class="token string">'确定'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 组件的初始数据   */</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    flag<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//也就是设置整个窗口是否显示的标志，类似于HTML中的display:none/block;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/**   * 组件的方法列表   */</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//展示弹框</span>    showpop<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"showpop"</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        flag<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>flag      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//隐藏弹框</span>    hidepop<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hidepop"</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        flag<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>flag      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*    * triggerEvent 用于触发事件    */</span>    confirm<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//操作</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"confirm"</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hidepop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//隐藏窗口</span>      <span class="token comment" spellcheck="true">//触发取消回调</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">triggerEvent</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>popwindow的显示和隐藏问题也就是基于上面数据data中的标志，来设置窗口是否显示。<br>其实也不难理解，可以看做HTML中的某个div采用的是绝对布局，大小刚好是浏览器的页面的宽度和高度，在满足某种触发条件的时候，触发，设置display为block，然后在满足某种条件的情况下display设置为none。<br>也即是，其实这是的代码一直都在页面中。</p><p>接着，看看对应的dialog.wxml文件， 不同的是使用的不是display，而是hidden：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fullwindow<span class="token punctuation">"</span></span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{flag}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>popwindow<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>{{pop_info}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">catchtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>confirm<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>{{pop_confirm}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>接着就是样式文件，设置绝对布局，然后设置页面大小，封装背景为黑的半透明，在其上加入popwindow：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* component/popup.wxss */</span><span class="token selector"><span class="token class">.fullwindow</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.popwindow</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">90%</span><span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">600</span>rpx<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>rpx<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> bordre-box<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#888</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">40</span>rpx<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#323233</span><span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0.8</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.content</span> text</span><span class="token punctuation">{</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">60</span>rpx<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">}</span><span class="token selector"><span class="token class">.confirm</span> text </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">88</span>rpx<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">88</span>rpx<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#67B1FC</span><span class="token punctuation">;</span>  <span class="token property">letter-spacing</span><span class="token punctuation">:</span> <span class="token number">10</span>rpx<span class="token punctuation">;</span>  <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">1</span>rpx solid <span class="token hexcode">#F5F6F8</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>来看看效果：<br><img src="/images/201907/2019-07-07_144147.png" alt="e"></p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序代码构成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My Reflective Notes</title>
      <link href="/2019/06/introspection/"/>
      <url>/2019/06/introspection/</url>
      
        <content type="html"><![CDATA[<div class="title">可怜虫-可怜之人必有可恨之处</div>        <div class="sub-title">总是不知悔改，总是自以为是，到头来除了证明别人是对你+自己是错的，还能证明什么？</div>            <div class="center">        <div class="info"><p>各个方面都是太差劲了，后悔的事情很多，而且总有重复的。死不悔改的特性，很恼火！所以，这里专门一个页面写写日记，写写自己心里很难受的感悟。勉励！</p>        </div>        <div class="content">          <div class="content-left">            <h2>归类</h2>            <ul>              <li><a href="#p1">态度篇(0)</a></li>              <li><a href="#p2">心态篇(0)</a></li>              <li><a href="#p3">生活篇(0)</a></li>              <li><a href="#p4">学习篇(0)</a></li>              <li><a href="#p5">斗志篇(0)</a></li>              <li><a href="#p6">咸鱼篇(0)</a></li>              <li><a href="#p7">心理篇(0)</a></li>              <li><a href="#p8">理想篇(0)</a></li>              <li><a href="#p9">现实篇(0)</a></li>              <li><a href="#p10">奇思妙想篇(0)</a></li>            </ul>          </div>          <div class="content-right">            <div class="content-top">              <div class="one">                <img src="/images/201906/IMG_20180306_205541.jpg">                <p>生活</p>              </div>              <div class="two">                <img src="/images/201906/1253_example_2_improved.PNG">                <p>心理</p>              </div>              <div class="three">                <img src="/images/201906/1036857-20171109221422778-1731419400.png">                <p>工作</p>              </div>              <div class="four">                <img src="/images/201906/wechatpay.jpg">                <p>学习</p>              </div>            </div>            <div class="content-bottom">              <div class="post">                <h2 id="p1">态度篇</h2>                <p>test</p>              </div>              <div class="post">                <h2 id="p2">心态篇</h2>              </div>              <div class="post">                <h2 id="p3">生活篇</h2>              </div>              <div class="post">                <h2 id="p4">学习篇</h2>              </div>              <div class="post">                <h2 id="p5">斗志篇</h2>              </div>              <div class="post">                <h2 id="p6">咸鱼篇</h2>              </div>              <div class="post">                <h2 id="p7">心理篇</h2>              </div>              <div class="post">                <h2 id="p8">理想篇</h2>              </div>              <div class="post">                <h2 id="p9">现实篇</h2>              </div>              <div class="post">                <h2 id="p10">奇思妙想篇</h2>              </div>            </div>          </div>        </div>      </div>      <div class="bottom"></div>]]></content>
      
      
      <categories>
          
          <category> introspection </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo官网阅读笔记 | 来必力</title>
      <link href="/2019/06/usehexo-9/"/>
      <url>/2019/06/usehexo-9/</url>
      
        <content type="html"><![CDATA[<h1 id="1-不要渲染帖子"><a href="#1-不要渲染帖子" class="headerlink" title="1. 不要渲染帖子"></a>1. 不要渲染帖子</h1><p>如果您不希望处理您的帖子，可以<code>layout: false</code>在前面设置。</p><p>我测试了一下，很好用，也就是页面所有的CSS、js都需要自己定义。也就是自己写一个页面内容+渲染效果。<br>下面一起看看，在每一个md文件的开头的YAML都有哪些内容：</p><table><thead><tr><th><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">设置</font></font></th><th><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">描述</font></font></th><th><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">默认</font></font></th></tr></thead><tbody><tr><td><code>layout</code></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">布局</font></font></td><td></td></tr><tr><td><code>title</code></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">标题</font></font></td><td></td></tr><tr><td><code>date</code></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">发布日期</font></font></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">文件创建日期</font></font></td></tr><tr><td><code>updated</code></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">更新日期</font></font></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">文件更新日期</font></font></td></tr><tr><td><code>comments</code></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">为帖子启用评论功能</font></font></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">真正</font></font></td></tr><tr><td><code>tags</code></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">标签（不适用于页面）</font></font></td><td></td></tr><tr><td><code>categories</code></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">分类（不适用于页面）</font></font></td><td></td></tr><tr><td><code>permalink</code></td><td><font style="vertical-align: inherit;"><font style="vertical-align: inherit;">覆盖帖子的默认永久链接</font></font></td><td></td></tr></tbody></table>```<pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>seo-7 |  用Item数据封装</title>
      <link href="/2019/06/scrapy-8/"/>
      <url>/2019/06/scrapy-8/</url>
      
        <content type="html"><![CDATA[<p>学习了<code>xpath</code>和<code>css</code>，我们就可以很容易的从下载的网页中提取出我们想要的数据内容了。数据较多的时候，自然而然就想到了使用字典、列表来封装数据。</p><p><code>Scrapy</code>中提供了<code>Item</code>类，来封装爬取到的数据。<br>当然，可以直接使用字典、列表等，虽然能完成任务。但是影响可读性，也缺乏对字段名字的检测。<br>使用<code>Item</code>能明确爬取内容，需要爬取的字段清晰明了；避免出现变量名写错的低级错误。<br>爬虫流程就成了这样：<br>抓取 –&gt; 按<code>item</code>规则收集需要数据 –&gt;使用<code>pipeline</code>处理（存储等）</p><p><code>Scrapy</code>提供了两个类，来封装爬取到的数据：</p><h1 id="Item基类-和-Field类-的基本用法"><a href="#Item基类-和-Field类-的基本用法" class="headerlink" title="Item基类 和 Field类 的基本用法"></a>Item基类 和 Field类 的基本用法</h1><p>自定义一个类来封装数据的步骤：<br>①编写一个类继承Item基类；<br>②使用Field类对象，来创建类的属性；<br>这里举一个小案例：<br>自定义一个学生数据类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy <span class="token keyword">import</span> Item<span class="token punctuation">,</span>Field<span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">(</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    sex <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">)</span>stu1 <span class="token operator">=</span> student<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">#{'age': 12, 'name': 'Tom', 'sex': '男'}</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#Tom</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">#Tom</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#12</span>stu2 <span class="token operator">=</span> student<span class="token punctuation">(</span><span class="token punctuation">)</span>stu2<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Jarry"</span>stu2<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23</span>stu2<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"女"</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#{'age': 23, 'name': 'Jarry', 'sex': '女'}</span>all <span class="token operator">=</span> list<span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#ItemsView({'age': 23, 'name': 'Jarry', 'sex': '女'})</span><span class="token keyword">print</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#[('name', 'Jarry'), ('age', 23), ('sex', '女')]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy-7 |  Response内置CSS选择器</title>
      <link href="/2019/06/scrapy-7/"/>
      <url>/2019/06/scrapy-7/</url>
      
        <content type="html"><![CDATA[<p>和<code>xpath</code>类似，<code>CSS</code>在<code>Response</code>中也集成了。CSS选择器的语法更加简单，但是功能不如xpath强大。</p><p><code>CSS</code>即层叠样式表。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><link href="/css/spider.css" rel="stylesheet" type="text/css"><table border="1" class="three"><tbody><tr class="head"><td>表达式</td><td>描述</td><td>例子</td></tr><tr><td>*</td><td>选中所有元素</td><td>css('*')</td></tr><tr><td>Element</td><td>选中Element元素</td><td>css('img')</td></tr><tr><td>E1, E2</td><td>选中E1和E2元素</td><td>css('div,p')</td></tr><tr><td>E1 E2</td><td>选中E1<b>后代元素</b>中的E2元素</td><td>css('div input')</td></tr><tr><td>E1 > E2</td><td>选中E1<b>子元素</b>后的E2元素</td><td>css('div > span')</td></tr><tr><td>E1 + E2</td><td>选中E1兄弟元素中的E2元素</td><td>css('div + b')</td></tr><tr><td>.Class</td><td>选中class属性<b>包含</b>Class的元素</td><td>css('.info')</td></tr><tr><td>#id</td><td>选中id属性为id的元素</td><td>css('name')</td></tr><tr><td>[Attr]</td><td>选中包含Attr属性的元素</td><td>css('[id]')</td></tr><tr><td>[Attr = value]</td><td>选中包含Attr属性且值<b>为</b>value的元素</td><td>css("[class = 'name']")</td></tr><tr><td>[Attr ~= value]</td><td>选中包含Attr属性且值<b>包含</b>value的元素</td><td>css("[class ~= 'name']")</td></tr><tr><td>E:nth-child(n)</td><td>选中E元素，且该元素必须是其父元素第n个子元素</td><td>css("li:nth-child(2)")</td></tr><tr><td>E:nth-last-child(n)</td><td>选中E元素，且该元素必须是其父元素倒数第n个子元素</td><td>css("li:nth-last-child(2)")</td></tr><tr><td>E:first-child</td><td>选中E元素，且该元素必须是其父元素第1个子元素</td><td>css("li:first-child")</td></tr><tr><td>E:last-child</td><td>选中E元素，且该元素必须是其父元素倒数第1个子元素</td><td>css("li:last-child")</td></tr><tr><td>E:empty</td><td>选中没有子元素的E元素</td><td>css("div:empty")</td></tr><tr><td>E<b>::</b>text</td><td>选中E元素的文本节点</td><td>css("p::text")</td></tr></tbody></table><p>不难发现，其实和<a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">CSS的选择器</a>有着一拼</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>由于比较简单，和xpath类似，这里就举一个小案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selector<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponsebody <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>    &lt;li class="name first">&lt;b>Name&lt;/b>&lt;/li>    &lt;li class="sex">M&lt;/li>    &lt;li class="age">23&lt;/li>&lt;/ul>"""</span>response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'baiyazi.top'</span><span class="token punctuation">,</span> body<span class="token operator">=</span>body<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">"li:nth-child(2)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['&lt;li class="sex">M&lt;/li>']</span>a <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">"li[class ~= first]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['&lt;li class="name first">&lt;b>Name&lt;/b>&lt;/li>']</span>a <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">"li::text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['M', '23']  因为第一个节点包含子节点</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy-6 |  Response内置XPath选择器</title>
      <link href="/2019/06/scrapy-6/"/>
      <url>/2019/06/scrapy-6/</url>
      
        <content type="html"><![CDATA[<p>和Selector类似，为了方便用户编码操作，<code>XPath</code>在<code>Response</code>中也集成了。<br><code>Xpath（XML Path Language）XML</code>路径语言，是一种用来确定<code>xml</code>文档中某元素位置的语言。<br><strong>提示：</strong> <code>HTML</code>属于<code>xml</code><br>在<a href="/2019/scrapy-4/#xpath">第四讲案例</a>中我们已经按照实际举过例子，下面我们看看具体的语法：</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2> <table>  <tr><td>表达式</td><td>描述</td></tr>  <tr><td>/</td><td>选中文档的根（root）</td></tr>  <tr><td>.</td><td>选中当前节点</td></tr>  <tr><td>..</td><td>选中当前节点的父节点</td></tr>  <tr><td>Element</td><td>选中子节点中所有Element元素节点</td></tr>  <tr><td>//Element</td><td>选中后代节点中所有的Element元素节点</td></tr>  <tr><td>*</td><td>选中所有元素子节点</td></tr>  <tr><td>text()</td><td>选中所有文本子节点</td></tr>  <tr><td>@Attr</td><td>选中名为Attr的属性节点</td></tr>  <tr><td>@*</td><td>选中所有属性节点</td></tr>  <tr><td>[谓语]</td><td>查找特定的节点或者包含特定值的节点</td></tr></table><p>下面举一些案例：</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponsetext <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>    &lt;li class="one">Python&lt;/li>    &lt;li class="two">Java&lt;/li>    &lt;li id = "three">JavaScript&lt;/li>&lt;/ul>"""</span>response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"baidu.com"</span><span class="token punctuation">,</span> body<span class="token operator">=</span>text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 找到所有的li，为了便于观察打印的结果，这里均抽取内容</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 找到所有的li中的文本内容</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 根下的所有节点</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//@class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['one', 'two']</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//@*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['one', 'two', 'three']</span><span class="token comment" spellcheck="true">##[谓语]</span><span class="token comment" spellcheck="true"># 操作元素属性</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li[@class='one']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># ['&lt;li class="one">Python&lt;/li>']</span><span class="token comment" spellcheck="true"># 列表集下标(从1开始)</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li[1]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['&lt;li class="one">Python&lt;/li>']</span><span class="token comment" spellcheck="true"># last() 选中最后一个</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li[last()]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['&lt;li id="three">JavaScript&lt;/li>']</span><span class="token comment" spellcheck="true"># position()函数</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li[position()&lt;=2]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 选中前两个元素 </span><span class="token comment" spellcheck="true">#['&lt;li class="one">Python&lt;/li>', '&lt;li class="two">Java&lt;/li>']</span></code></pre><p>除此之外，<code>xpath</code>还提供了很多常用函数：</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>① 取多个路径<br>使用“|”运算符可以选取多个路径</p><pre class=" language-python"><code class="language-python">xpath<span class="token punctuation">(</span>‘<span class="token operator">//</span>div<span class="token operator">|</span><span class="token operator">//</span>table’<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#选取所有的div和table节点</span></code></pre><p>② 轴 （定义相对于当前节点的节点集）</p><table border="1" class="three"><tbody><tr class="head"><td>轴名称</td><td>表达式</td><td>描述</td></tr><tr><td>ancestor<br></td><td>xpath(‘./ancestor::*’)</td><td>选取当前节点的所有先辈节点（父、祖父）</td></tr><tr><td>ancestor-or-self</td><td>xpath(‘./ancestor-or-self::*’)</td><td>选取当前节点的所有先辈节点以及节点本身</td></tr><tr><td>attribute</td><td>xpath(‘./attribute::*’)</td><td>选取当前节点的所有属性</td></tr><tr><td>child</td><td>xpath(‘./child::*’)</td><td>返回当前节点的所有子节点</td></tr><tr><td>descendant</td><td>xpath(‘./descendant::*’)</td><td>返回当前节点的所有后代节点（子节点、孙节点）</td></tr><tr><td>following</td><td>xpath(‘./following::*’)</td><td>选取文档中当前节点结束标签后的所有节点<br></td></tr><tr><td>following-sibing</td><td>xpath(‘./following-sibing::*’)</td><td>选取当前节点之后的兄弟节点</td></tr><tr><td>parent</td><td>xpath(‘./parent::*’)</td><td>选取当前节点的父节点</td></tr><tr><td>preceding</td><td>xpath(‘./preceding::*’)</td><td>选取文档中当前节点开始标签前的所有节点</td></tr><tr><td>preceding-sibling</td><td>xpath(‘./preceding-sibling::*’)</td><td>选取当前节点之前的兄弟节点</td></tr><tr><td>self</td><td>xpath(‘./self::*’)</td><td>选取当前节点</td></tr></tbody></table>③功能函数<table border="1" class="three"><tbody><tr class="head"><td>函数</td><td>用法</td><td>解释</td></tr><tr><td>starts-with</td><td>xpath(‘//div[starts-with(@id,”ma”)]‘)</td><td>选取id值以ma开头的div节点<br></td></tr><tr><td>contains<br></td><td>xpath(‘//div[contains(@id,”ma”)]‘)</td><td>选取id值包含ma的div节点</td></tr><tr><td>and<br></td><td>xpath(‘//div[contains(@id,”ma”) and contains(@id,”in”)]‘)</td><td>选取id值包含ma和in的div节点</td></tr><tr><td>text()</td><td>xpath(‘//div[contains(text(),”ma”)]‘)</td><td>选取节点文本包含ma的div节点</td></tr></tbody></table>---<p>当然，在实际操作用，有更加人性化的操作去获取元素的<code>xpath</code>书写<br>在浏览器中，审查元素，在代码中找到元素节点，然后<code>Copy</code>-&gt;<code>Copy Xpath</code>，如下面的就是我复制的：</p><blockquote><p>//*[@id=”asideCategory”]/h3</p></blockquote><p>xpath文档：<a href="https://www.w3.org/TR/xpath/all/" target="_blank" rel="noopener">https://www.w3.org/TR/xpath/all/</a></p>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy-5 |  Response内置Selector</title>
      <link href="/2019/06/scrapy-5/"/>
      <url>/2019/06/scrapy-5/</url>
      
        <content type="html"><![CDATA[<p>前面大致介绍了Selector，但是在实际开发中，我们基本上都是不需要手动创建Selector对象的。</p><p><code>Response</code>对象的<code>selector</code>属性被第一次访问时，<code>Response</code>对象内部就会自动创建一个<code>Selector</code>对象，并且将该<code>Selector</code>对象缓存。</p><h1 id="对比一下"><a href="#对比一下" class="headerlink" title="对比一下"></a>对比一下</h1><p>第四讲中，我们使用的是<code>HtmlResponse</code>对象构造<code>Selector</code>，如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selector<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponsetext <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>    &lt;li>Python&lt;/li>    &lt;li>Java&lt;/li>    &lt;li>JavaScript&lt;/li>&lt;/ul>"""</span>response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"baidu.com"</span><span class="token punctuation">,</span> body<span class="token operator">=</span>text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">(</span>response <span class="token operator">=</span> response<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&lt;Selector xpath=None data='&lt;html>&lt;body>&lt;ul>\n    &lt;li>Python&lt;/li>\n   '></span></code></pre><p>接下来，我们不创建<code>Selector</code>，使用<code>Response</code>内置的<code>Selector</code>，如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponsetext <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>    &lt;li>Python&lt;/li>    &lt;li>Java&lt;/li>    &lt;li>JavaScript&lt;/li>&lt;/ul>"""</span>response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"baidu.com"</span><span class="token punctuation">,</span> body<span class="token operator">=</span>text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>selector <span class="token operator">=</span> response<span class="token punctuation">.</span>selector<span class="token keyword">print</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#&lt;Selector xpath=None data='&lt;html>&lt;body>&lt;ul>\n    &lt;li>Python&lt;/li>\n   '></span></code></pre><p>结果是一致的，也就是说，<code>Response</code>内部会自动创建<code>Selector</code>对象。</p><h1 id="不妨追踪源码："><a href="#不妨追踪源码：" class="headerlink" title="不妨追踪源码："></a>不妨追踪源码：</h1><p>①在<code>pycharm</code>中，按住<code>ctrl``，点击上面源码中的</code>HtmlResponse`追踪，可以看见：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HtmlResponse</span><span class="token punctuation">(</span>TextResponse<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>②不难发现，<code>HtmlResponse</code>是继承了<code>TextResponse</code>对象，继续追踪，可以看见：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TextResponse</span><span class="token punctuation">(</span>Response<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        self<span class="token punctuation">.</span>_cached_selector <span class="token operator">=</span> None        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    @property    <span class="token keyword">def</span> <span class="token function">selector</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selector        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_cached_selector <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_cached_selector <span class="token operator">=</span> Selector<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_cached_selector</code></pre><p>（摘取部分）</p><h2 id="使用xpath案例"><a href="#使用xpath案例" class="headerlink" title="使用xpath案例"></a>使用xpath案例</h2><p>不难看出<code>Response</code>是以自身参数创建的<code>Selector</code>对象。<br>也就是说我们可以使用<code>Response</code>内部内置的<code>Selector</code>对象，然后使用<code>XPath</code>和<code>CSS</code>方法。如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponsetext <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>    &lt;li>Python&lt;/li>    &lt;li>Java&lt;/li>    &lt;li>JavaScript&lt;/li>&lt;/ul>"""</span>response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"baidu.com"</span><span class="token punctuation">,</span> body<span class="token operator">=</span>text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>selector <span class="token operator">=</span> response<span class="token punctuation">.</span>selectorres <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">".//li/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re<span class="token punctuation">(</span><span class="token string">"J\w+"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['Java', 'JavaScript']</span></code></pre><h2 id="另一种方式："><a href="#另一种方式：" class="headerlink" title="另一种方式："></a>另一种方式：</h2><p>但是，为了方便用户使用，<code>Response</code>对象提供了<code>xpath</code>和<code>css</code>方法，他们分别调用内置<code>Selector</code>对象的<code>xpath</code>和<code>css</code>方法。案例：</p><pre class=" language-python"><code class="language-python">response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"baidu.com"</span><span class="token punctuation">,</span> body<span class="token operator">=</span>text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>res <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">".//li/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re<span class="token punctuation">(</span><span class="token string">"J\w+"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['Java', 'JavaScript']</span></code></pre><p>（上面有部分没写，和上一个案例的一样）<br>不妨还是追踪一下源码：<br>追踪到<code>TextResponse</code>可以看见，构成<code>xpath</code>的源码，如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">xpath</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">css</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>selector<span class="token punctuation">.</span>css<span class="token punctuation">(</span>query<span class="token punctuation">)</span></code></pre><p><span class="title2">提示：</span>&nbsp;&nbsp;<code>css</code>和<code>xpath</code>都是选择器，用于提取数据。</p><p>下面，我们就来介绍这两个选择器。</p>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy-4 |  Selector提取数据</title>
      <link href="/2019/06/scrapy-4/"/>
      <url>/2019/06/scrapy-4/</url>
      
        <content type="html"><![CDATA[<p>数据处理</p><p>Python中常用的处理HTTP解析库：</p><ul><li>BeautifulSoup<br>很流行的HTTP解析库，API简洁易用，但是解析速度比较慢。</li><li>lxml<br>由C语言编写的xml解析库，API相对复杂，解析速度快。</li></ul><p>Scrapy的Selector类，基于lxml库构建，并简化了API接口。使用时，通过XPath或CSS选择器，先选择数，然后提取数据。</p><p>接下来我们看看Selector对象：</p><h1 id="1-构造Selector对象"><a href="#1-构造Selector对象" class="headerlink" title="1. 构造Selector对象"></a>1. 构造Selector对象</h1><p><code>Selector</code>类位于<code>scrapy.selector</code>模块，构造<code>Selector</code>对象有两种方式：<br>不妨追踪看看它的源码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token operator">=</span>None<span class="token punctuation">,</span> text<span class="token operator">=</span>None<span class="token punctuation">,</span> type<span class="token operator">=</span>None<span class="token punctuation">,</span> root<span class="token operator">=</span>None<span class="token punctuation">,</span> _root<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><h2 id="1-使用response对象"><a href="#1-使用response对象" class="headerlink" title="1. 使用response对象"></a>1. 使用response对象</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selector<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponsetext <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>    &lt;li>Python&lt;/li>    &lt;li>Java&lt;/li>    &lt;li>JavaScript&lt;/li>&lt;/ul>"""</span>response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"baidu.com"</span><span class="token punctuation">,</span> body<span class="token operator">=</span>text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">(</span>response <span class="token operator">=</span> response<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&lt;Selector xpath=None data='&lt;html>&lt;body>&lt;ul>\n    &lt;li>Python&lt;/li>\n   '></span></code></pre><h2 id="2-使用文档字符串方式"><a href="#2-使用文档字符串方式" class="headerlink" title="2. 使用文档字符串方式"></a>2. 使用文档字符串方式</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selectortext <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>    &lt;li>Python&lt;/li>    &lt;li>Java&lt;/li>    &lt;li>JavaScript&lt;/li>&lt;/ul>"""</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text <span class="token operator">=</span> text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&lt;Selector xpath=None data='&lt;html>&lt;body>&lt;ul>\n    &lt;li>Python&lt;/li>\n   '></span></code></pre><h1 id="2-使用Selector对象，进行数据处理"><a href="#2-使用Selector对象，进行数据处理" class="headerlink" title="2. 使用Selector对象，进行数据处理"></a>2. 使用Selector对象，进行数据处理</h1><h2 id="xpath">使用XPath选择数据</h2><link href="/css/spider.css" rel="stylesheet" type="text/css"><span>XPath选择器：</span><table>  <tr><td>//</td><td>表示子孙中</td></tr>  <tr><td>.//</td><td>表示当前对象的子孙中</td></tr>  <tr><td>/</td><td>表示儿子</td></tr>  <tr><td>/div</td><td>表示儿子的div标签</td></tr>  <tr><td>/div[@id="content"]</td><td>表示儿子div标签且id='content'</td></tr>  <tr><td>/div[@class='show']</td><td>表示儿子div标签，且class='show'</td></tr>  <tr><td>//div/text()</td><td>获取div标签的文本内容</td></tr>  </table><p>下面看看案例：</p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selectortext <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>    &lt;li>Python&lt;/li>    &lt;li>Java&lt;/li>    &lt;li>JavaScript&lt;/li>&lt;/ul>"""</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text <span class="token operator">=</span> text<span class="token punctuation">)</span>lis <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li/text()"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 选中文档中所有的li标签的文本内容</span><span class="token keyword">for</span> i <span class="token keyword">in</span> lis<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#&lt;Selector xpath='//li/text()' data='Python'></span><span class="token comment" spellcheck="true"># &lt;Selector xpath='//li/text()' data='Java'></span><span class="token comment" spellcheck="true"># &lt;Selector xpath='//li/text()' data='JavaScript'></span>li <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 从Selector中内容提取</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['Python', 'Java', 'JavaScript']</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selectortext <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>    &lt;li>Python&lt;/li>    &lt;li class = "weizu">Java&lt;/li>    &lt;li>JavaScript&lt;/li>&lt;/ul>"""</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text <span class="token operator">=</span> text<span class="token punctuation">)</span>lis <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li[@class='weizu']/text()"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 选中文档中所有的class='weizu'的li标签的文本内容</span><span class="token keyword">for</span> i <span class="token keyword">in</span> lis<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;Selector xpath='//li/text()' data='Java'></span>li <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li[@class='weizu']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#内容提取</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['Java']</span>li <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//li[@class='weizu']/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#内容提取</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#Java</span></code></pre><p>下面还需要另外介绍一下提取数据：</p><h2 id="使用extract-提取数据"><a href="#使用extract-提取数据" class="headerlink" title="使用extract()提取数据"></a>使用extract()提取数据</h2>  <table>  <tr><td>obj.extract()</td><td>列表中的每一个对象转换字符串，构成字符串列表</td></tr>  <tr><td>obj.extract_first()</td><td>列表中的第一个元素转换成字符串</td></tr>  <tr><td>obj.re()</td><td>列表中的每一个对象转换字符串，每个字符串正则匹配</td></tr>  <tr><td>obj.re_first()</td><td>列表中的第一个元素转换成字符串，该字符串正则匹配</td></tr></table><p>在上面的例子中，我们已经使用过了<code>extract()</code>提取数据内容。<br>下面我们看看<code>re()</code>的用法：</p><h3 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>selector <span class="token keyword">import</span> Selectortext <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>    &lt;li>Python &lt;b>价格：200.00元&lt;/b>&lt;/li>    &lt;li class = "weizu">Java &lt;b>价格：300.00元&lt;/b>&lt;/li>    &lt;li>JavaScript &lt;b>价格：400.00元&lt;/b>&lt;/li>&lt;/ul>"""</span>selector <span class="token operator">=</span> Selector<span class="token punctuation">(</span>text <span class="token operator">=</span> text<span class="token punctuation">)</span>lis <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">".//li/b/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re<span class="token punctuation">(</span><span class="token string">'\d+\.\d+'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 选中文档中所有的li标签，只提取数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#['200.00', '300.00', '400.00']</span>li <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">".//li/b/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>re_first<span class="token punctuation">(</span><span class="token string">'\d+\.\d+'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 选中文档中第一个li标签，只提取数字</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#200.00</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy-3 |  Spider开发流程</title>
      <link href="/2019/06/scrapy-3/"/>
      <url>/2019/06/scrapy-3/</url>
      
        <content type="html"><![CDATA[<p>感觉还差点东西，觉得流程这个东西需要搞出来。<br>说Spider开发的流程，这里就不得不提一下爬虫的执行流程和Scrapy框架的工作原理。如下：</p><h1 id="爬虫的执行流程"><a href="#爬虫的执行流程" class="headerlink" title="爬虫的执行流程"></a>爬虫的执行流程</h1><h2 id="1-下载页面"><a href="#1-下载页面" class="headerlink" title="1. 下载页面"></a>1. 下载页面</h2><p>在爬取内容之前，首先需要根据网页URL，下载网页。</p><h2 id="2-提取页面数据"><a href="#2-提取页面数据" class="headerlink" title="2. 提取页面数据"></a>2. 提取页面数据</h2><p>当网页下载完成，就需要对页面内容和结构进行分析，然后提取我们需要的内容。</p><h2 id="3-提取链接"><a href="#3-提取链接" class="headerlink" title="3. 提取链接"></a>3. 提取链接</h2><p>通常而言，我们需要的数据都是需要爬取多个页面，页面中包含相关页面的链接的情况很常见，然后我们就需要把页面中的某些链接提取出来，然后循环1-2-3。</p><p>在爬取网页的时候需要考虑如何去重、网页的搜索策略（深度优先和广度优先）、爬虫边界等</p><h1 id="Scrapy框架的工作原理"><a href="#Scrapy框架的工作原理" class="headerlink" title="Scrapy框架的工作原理"></a>Scrapy框架的工作原理</h1><p>爬虫可以不使用scrapy框架，但是从头开发一个爬虫程序很麻烦。scrapy框架是比较优秀的爬虫框架，有人造好了轮子，我们就不需要再去造了。<br>毫无疑问，使用框架可以降低开发成本，提高程序的质量，让我们更专注于爬虫的业务逻辑。</p><h2 id="Scrapy框架的组成"><a href="#Scrapy框架的组成" class="headerlink" title="Scrapy框架的组成"></a>Scrapy框架的组成</h2><p>百度了一张图片：<br><img src="/images/201906/1036857-20171109221422778-1731419400.png" alt="e" title="scrapy框架图示"></p><table>  <tr><td>ENGINE</td><td>引擎，框架的核心</td><td>内部组件</td></tr>  <tr><td>ENGINE</td><td>引擎，框架的核心</td><td>内部组件</td></tr>  <tr><td>SCHEDULER</td><td>调度器，负责对SPIDER提交的下载请求进行调度</td><td>内部组件</td></tr>  <tr><td>DOWNLOADER</td><td>下载器，负责下载页面</td><td>内部组件</td></tr>  <tr><td>SPIDER</td><td>爬虫，页面请求下载，提取页面内数据</td><td>用户实现</td></tr>  <tr><td>MIDDLEWARE</td><td>中间件，负责对Request和Response对象进行处理</td><td>可选组件</td></tr>  <tr><td>ITEM PIPELINE</td><td>数据通道，负责对爬到的数据进行处理</td><td>可选组件</td></tr>  </table>对于使用框架的开发者而言，我们需要做的就是’关心‘Spider<h1 id="Spider开发流程"><a href="#Spider开发流程" class="headerlink" title="Spider开发流程"></a>Spider开发流程</h1><p>可以参看第一个例子，很容易得出结论，分四步：<br>①写一个类继承<code>scrapy.Spider</code><br>继承<code>Scrapy</code>框架提供的一个<code>Spider</code>基类<br>②为<code>Spider</code>取名，即设置<code>name</code><br>一个项目可以有多个<code>Spider</code>，每一个爬虫之间需要一个区分标志，即<code>name</code>。<br>③设置起始爬取点，即设置<code>start_ruls</code><br>④实现页面解析函数，即<code>parse(self, response)</code></p>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy-2 |  第一个爬虫程序</title>
      <link href="/2019/06/scrapy-2/"/>
      <url>/2019/06/scrapy-2/</url>
      
        <content type="html"><![CDATA[<p>安装完成了，接下来，我们开始写程序。</p><pre class=" language-text"><code class="language-text">#1 查看帮助    scrapy -h    scrapy <command> -h#2 有两种命令：其中Project-only必须切到项目文件夹下才能执行，而Global的命令则不需要    Global commands:        startproject #创建项目        genspider    #创建爬虫程序        settings     #如果是在项目目录下，则得到的是该项目的配置        runspider    #运行一个独立的python文件，不必创建项目        shell        #scrapy shell url地址  在交互式调试，如选择器规则正确与否        fetch        #独立于程单纯地爬取一个页面，可以拿到请求头        view         #下载完毕后直接弹出浏览器，以此可以分辨出哪些数据是ajax请求        version      #scrapy version 查看scrapy的版本，scrapy version -v查看scrapy依赖库的版本    Project-only commands:        crawl        #运行爬虫，必须创建项目才行，确保配置文件中ROBOTSTXT_OBEY = False        check        #检测项目中有无语法错误        list         #列出项目中所包含的爬虫名        edit         #编辑器，一般不用        parse        #scrapy parse url地址 --callback 回调函数  #以此可以验证我们的回调函数是否正确        bench        #scrapy bentch压力测试#3 官网链接    https://docs.scrapy.org/en/latest/topics/commands.html</code></pre><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><pre class=" language-text"><code class="language-text">D:\scrapy>scrapy startproject scrapyOneNew Scrapy project 'scrapyOne', using template directory 'e:\python\lib\site-packages\scrapy\templates\project', created in:    D:\scrapy\scrapyOneYou can start your first spider with:    cd scrapyOne    scrapy genspider example example.com</code></pre><p>按照提示，<code>cd scrapyOne</code>， 然后执行：<code>scrapy genspider baidu baidu.com</code><br>这里说明一下：<code>baidu</code>是应用名称， <code>baidu.com</code>是域名</p><p>由于我们需要编辑<code>py</code>文件，不妨使用<code>pycharm</code>打开这个项目。</p><p>然后，我们需要打开项目中的<code>settings.py</code>文件，在22行：<code>ROBOTSTXT_OBEY =’False‘</code>  #可以忽略或者不遵守<code>robots</code>协议<br>这样我们在执行爬虫项目的时候，才能看见效果。</p><p>打开spiders目录下我们的baidu.py文件，然后输出一下，代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BaiduSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'baidu'</span> <span class="token comment" spellcheck="true">#应用名称</span>    <span class="token comment" spellcheck="true">#允许爬取的域名（如果遇到非该域名的url则爬取不到数据）</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'baidu.com'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#起始爬取的url</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://baidu.com'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#访问起始URL并获取结果后的回调函数，该函数的response参数就是向起始的url发送请求后，获取的响应对象.该函数返回值必须为可迭代对象或者NUll</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取字符串类型的响应内容</span></code></pre><p>打开pycharm的Treminal终端，输入：</p><pre><code>D:\scrapy\scrapyOne&gt;scrapy crawl chouti --nolog</code></pre><p>就可以看见百度网页的源代码。</p><hr><p>参考：<br>书籍：精通Scrapy网络爬虫 [刘硕]</p>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy-0 |  Python爬虫基础 一</title>
      <link href="/2019/06/scrapy-0/"/>
      <url>/2019/06/scrapy-0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>感觉学习<code>Scrapy</code>之前，应该是爬虫的基础类库。毕竟<code>Scrapy</code>是框架，学习框架之前应该弄熟练基础的类库的使用。</p></blockquote><h1 id="1-数据来源："><a href="#1-数据来源：" class="headerlink" title="1. 数据来源："></a>1. 数据来源：</h1><ol><li>大型互联网公司<ul><li>百度指数</li><li>阿里指数</li><li>新浪指数</li></ul></li><li>政府机构<ul><li>中华人民共和国国家统计局 （<a href="http://data.stats.gov.cn/" target="_blank" rel="noopener">http://data.stats.gov.cn/</a> ）</li><li>世界银行公开数据 （<a href="https://data.worldbank.org.cn/" target="_blank" rel="noopener">https://data.worldbank.org.cn/</a> ）</li><li>纳斯达克股票信息 （<a href="https://www.nasdaq.com/zh" target="_blank" rel="noopener">https://www.nasdaq.com/zh</a> ）</li><li>联合国统计的数据 （<a href="https://data.un.org" target="_blank" rel="noopener">https://data.un.org</a> ）</li></ul></li><li>咨询公司<ul><li>艾瑞咨询</li><li>麦肯锡</li></ul></li><li>第三方数据平台<ul><li>数据堂 （<a href="http://www.datatang.com" target="_blank" rel="noopener">www.datatang.com</a> ）</li><li>贵阳大数据交易所 （trade.gbdex.com ）</li></ul></li><li>爬虫爬取</li></ol><h1 id="2-爬虫简介"><a href="#2-爬虫简介" class="headerlink" title="2. 爬虫简介"></a>2. 爬虫简介</h1><p>抓取网页数据的程序</p><h2 id="做爬虫的语言"><a href="#做爬虫的语言" class="headerlink" title="做爬虫的语言"></a>做爬虫的语言</h2><p><code>PHP</code>、<code>Java</code>、<code>C/C++</code>、<code>Python</code>等</p><h2 id="Scrapy框架"><a href="#Scrapy框架" class="headerlink" title="Scrapy框架"></a>Scrapy框架</h2><p>高定制型高性能（异步网络框架<code>twisted</code>）、高并发，速度下载很快；<br>（还有一个爬虫框架：<code>Pyspider</code>  比较简单）</p><h2 id="分布式策略-scrapy-reids"><a href="#分布式策略-scrapy-reids" class="headerlink" title="分布式策略 scrapy-reids"></a>分布式策略 scrapy-reids</h2><p>主要做：请求指纹去重、请求分配、数据临时存储</p><h2 id="爬虫、反爬虫、反反爬虫-之间的斗争"><a href="#爬虫、反爬虫、反反爬虫-之间的斗争" class="headerlink" title="爬虫、反爬虫、反反爬虫 之间的斗争"></a>爬虫、反爬虫、反反爬虫 之间的斗争</h2><p>重要的网页数据一般都有反爬虫机制。做爬虫最头疼的不是复杂的页面，而是重要的网站都有反爬虫。<br>但是，网站做反爬虫，还需要考虑成本问题，不是所有的网站都能做到完备的反爬虫策略。<br><code>数据价值=机器成本+人力成本</code></p><h1 id="3-爬虫分类"><a href="#3-爬虫分类" class="headerlink" title="3. 爬虫分类"></a>3. 爬虫分类</h1><h2 id="通用爬虫"><a href="#通用爬虫" class="headerlink" title="通用爬虫"></a>通用爬虫</h2><p>搜索引擎用的爬虫系统<br>目标：尽可能的把互联网上的所有网页下载下来，放到本地服务器，然后做相关处理，最后提供一个检索数据的接口。<br>爬取流程：<br>a) 首选选取一部分已有的URL，把这些URL放到待爬取队列。<br>b) 从队列里取出这些URL，然后解析DNS得到主机IP，然后去这个IP对应的服务器里下载HTML页面，保存到搜索引擎的本地服务器。<br>之后把这个爬过的URL放入已爬取队列。<br>c) 分析这些网页内容，找出网页里其他的URL连接，继续执行第二步，直到爬取条件结束。</p><p>通用爬虫并不是万物皆可爬，它也需要遵守规则：<br><code>Robots</code>协议：协议会指明通用爬虫可以爬取网页的权限。<br><code>Robots.txt</code> 只是一个建议。并不是所有爬虫都遵守，一般只有大型的搜索引擎爬虫才会遵守。<br>    咱们个人写的爬虫，就不管了。</p><p>搜索引擎排名：</p><ol><li><code>PageRank</code>值：根据网站的流量（点击量/浏览量/人气）统计，流量越高，网站也越值钱，排名越靠前。</li><li>竞价排名：谁给钱多，谁排名就高。</li></ol><h2 id="聚焦爬虫"><a href="#聚焦爬虫" class="headerlink" title="聚焦爬虫"></a>聚焦爬虫</h2><p>爬虫程序员写的针对某种内容的爬虫。</p><h1 id="4-urllib"><a href="#4-urllib" class="headerlink" title="4. urllib"></a>4. urllib</h1><p>在<code>Python2</code>中，是<code>urllib2</code> ；在 <code>python3.x</code>中被改为<code>urllib.request</code></p><p>看看下面简单的例子：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Python3.6</span><span class="token comment" spellcheck="true">#导入库</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># 发送url地址，得到响应对象</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4000"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># read()方法读取文件全部内容</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>直接使用<code>urlopen</code>打开网页，默认的 <code>User-Agent：&quot;Python-urllib/%s&quot; % __version__</code></p><p><code>User-Agent</code>:<span style="color:orange;font-weight:bolder;"> 是爬虫和反爬虫斗争的第一步</span>，养成好习惯，发送请求带<code>User-Agent</code><br>我们就需要自己构造一个和浏览器请求很相似的<code>web请求</code>，也就是使用<code>Request</code>。<br>参数比较多，这里列出部分参数：</p><ul><li>请求的<code>url</code>地址</li><li>请求头<code>headers</code>，类型是一个字典{}</li><li>请求的方法 <code>method</code>，默认值是<code>None</code></li></ul><p>略微了解HTTP协议的就知道，在请求头中就可以设置请求的各种参数，其中就有我们期望的<code>User-Agent</code>。</p><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>下面就简单构造一个<code>Request</code>：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Python3</span><span class="token comment" spellcheck="true">#导入库</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># 构造Request</span>request <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://127.0.0.1:4000"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发送url地址，得到响应对象</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># read()方法读取文件全部内容</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>运行后，发现结果和上一个例子的效果一模一样。<br>上面也提到了，可以传入请求头，所以我么下面就来实践一下：<br>打开浏览器，还是以我们前面的网址为例，然后抓包看看它的请求头信息（部分）：</p><blockquote><p>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,<em>/</em>;q=0.8<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9<br>Cache-Control: max-age=0<br>Connection: keep-alive<br>Cookie: Hm_lvt_3e7b72d8c528abb722783061a44884f5=1560069575; Hm_lpvt_3e7b72d8c528abb722783061a44884f5=1560512154; scroll-cookie=267|/<br>Host: 127.0.0.1:4000<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36</p></blockquote><p>却不一定都需要，如<code>Accept-Encoding</code>就不需要，我们做爬虫不需要费劲的将数据下载后，然后还要解压，直接得到数据不是更好。有些可要可不要，如：<code>Host</code>、<code>Accept-Language</code>、<code>Cache-Control</code>、<code>Connection</code>、<code>Upgrade-Insecure-Requests</code>。<br>而<code>Cookie</code>主要是处理登录的时候的，如果只是爬取静态页面也是不需要的。</p><h2 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h2><p>爬取静态页面，只要<code>User-Agent</code>就可以了。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Python3</span><span class="token comment" spellcheck="true">#导入库</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># 构造Request</span>request <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://127.0.0.1:4000"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发送url地址，得到响应对象</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># read()方法读取文件全部内容</span>html <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>运行结果还是和上面的例子效果一样，可能会有一种无卵用的觉悟。<br>但是，<span style="color:orange;font-weight:bolder;">如果不修改默认的<code>User-Agent</code>，你爬虫的IP是很容易被所爬取的目标网站封掉的</span>。</p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>是服务器响应的类文件，除了支持文件操作的方法外，还支持一些和服务器响应先关的方法。<br>我们可以在上面的程序中加入：<code>print(dir(response))</code>以查看<code>response</code>所具有的方法。结果如下：</p><blockquote><p>[‘<strong>abstractmethods</strong>‘, ‘<strong>class</strong>‘, ‘<strong>del</strong>‘, ‘<strong>delattr</strong>‘, ‘<strong>dict</strong>‘, ‘<strong>dir</strong>‘, ‘<strong>doc</strong>‘, ‘<strong>enter</strong>‘, ‘<strong>eq</strong>‘, ‘<strong>exit</strong>‘, ‘<strong>format</strong>‘, ‘<strong>ge</strong>‘, ‘<strong>getattribute</strong>‘, ‘<strong>gt</strong>‘, ‘<strong>hash</strong>‘, ‘<strong>init</strong>‘, ‘<strong>init_subclass</strong>‘, ‘<strong>iter</strong>‘, ‘<strong>le</strong>‘, ‘<strong>lt</strong>‘, ‘<strong>module</strong>‘, ‘<strong>ne</strong>‘, ‘<strong>new</strong>‘, ‘<strong>next</strong>‘, ‘<strong>reduce</strong>‘, ‘<strong>reduce_ex</strong>‘, ‘<strong>repr</strong>‘, ‘<strong>setattr</strong>‘, ‘<strong>sizeof</strong>‘, ‘<strong>str</strong>‘, ‘<strong>subclasshook</strong>‘, ‘_abc_cache’, ‘_abc_negative_cache’, ‘_abc_negative_cache_version’, ‘_abc_registry’, ‘_checkClosed’, ‘_checkReadable’, ‘_checkSeekable’, ‘_checkWritable’, ‘_check_close’, ‘_close_conn’, ‘_get_chunk_left’, ‘_method’, ‘_peek_chunked’, ‘_read1_chunked’, ‘_read_and_discard_trailer’, ‘_read_next_chunk_size’, ‘_read_status’, ‘_readall_chunked’, ‘_readinto_chunked’, ‘_safe_read’, ‘_safe_readinto’, ‘begin’, ‘chunk_left’, ‘chunked’, ‘close’, ‘closed’, ‘code’, ‘debuglevel’, ‘detach’, ‘fileno’, ‘flush’, ‘fp’, ‘getcode’, ‘getheader’, ‘getheaders’, ‘geturl’, ‘headers’, ‘info’, ‘isatty’, ‘isclosed’, ‘length’, ‘msg’, ‘peek’, ‘read’, ‘read1’, ‘readable’, ‘readinto’, ‘readinto1’, ‘readline’, ‘readlines’, ‘reason’, ‘seek’, ‘seekable’, ‘status’, ‘tell’, ‘truncate’, ‘url’, ‘version’, ‘will_close’, ‘writable’, ‘write’, ‘writelines’]</p></blockquote><p>首先，加粗的是私有方法，我们选择<code>readline</code>来测试一下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>readline<span class="token punctuation">)</span></code></pre><p><span class="title2">结果：</span><br><code>&lt;bound method HTTPResponse.readline of &lt;http.client.HTTPResponse object at 0x0000000002A31828&gt;&gt;</code></p><p>所以我们这里可以在<code>Pycharm</code>中导入<code>Response</code>相关的包，然后追踪一下代码：<br>在<code>Pycharm</code>中导包：<code>from http.client import HTTPResponse</code><br>然后按住<code>Ctrl+单击HTTPResponse</code>，结果如下（选取部分方法）：</p><h3 id="文件特性"><a href="#文件特性" class="headerlink" title="文件特性"></a>文件特性</h3><ul><li><strong>close</strong></li><li><strong>flush</strong></li><li><strong>isclosed</strong></li><li><strong>read</strong>   &nbsp;&nbsp;&nbsp;&nbsp;读完后，直接关闭流，可以用上一个方法测试</li><li><strong>readline</strong>  &nbsp;&nbsp;&nbsp;&nbsp;每次读一行，文件没有读完就不会关闭流对象，也可以测试，同上。</li></ul><h3 id="响应相关"><a href="#响应相关" class="headerlink" title="响应相关"></a>响应相关</h3><ul><li><strong>getheaders</strong>  &nbsp;&nbsp;&nbsp;&nbsp;获取响应头的信息，如：<code>print(response.getheaders())</code>。<br>结果是：<code>[(&#39;X-Powered-By&#39;, &#39;Hexo&#39;), (&#39;Content-Type&#39;, &#39;text/html&#39;), (&#39;Date&#39;, &#39;Sat, 15 Jun 2019 06:43:17 GMT&#39;), (&#39;Connection&#39;, &#39;close&#39;), (&#39;Transfer-Encoding&#39;, &#39;chunked&#39;)]</code></li><li><strong>info</strong>  &nbsp;&nbsp;&nbsp;&nbsp;和上一个想过一样，获取响应头的信息，如：<code>print(response.info())</code>。不同的是，得到的是一个<code>http.client.HTTPMessage</code>消息对象</li><li><strong>getheader</strong>（name） &nbsp;&nbsp;&nbsp;&nbsp;不难理解，获取单个响应头的信息</li><li><strong>geturl</strong>   &nbsp;&nbsp;&nbsp;&nbsp;得到当前响应页面的<code>URL</code>，看<code>URL</code>就可以知道是哪个页面返回的数据，就可以防止重定向问题。</li><li><strong>getcode</strong>  &nbsp;&nbsp;&nbsp;&nbsp;得到和<code>response</code>响应一块发送的<code>HTTP状态码</code>，下面我们看看响应码：<br>成功200，3是重定向，4服务器页面出错，5服务器本身问题</li></ul><h2 id="Get方式数据编码传输"><a href="#Get方式数据编码传输" class="headerlink" title="Get方式数据编码传输"></a>Get方式数据编码传输</h2><h3 id="1-URL编码"><a href="#1-URL编码" class="headerlink" title="1. URL编码"></a>1. URL编码</h3><p>在请求链接中的汉字，通常都需要进行<code>URL编码</code>。在<code>urllib</code>中使用<code>urlencode</code>函数来解决汉字编码问题。<br><strong>python2.x</strong>：<code>urllib.urlencode({&#39;wd&#39;:&quot;测试&quot;})</code><br><strong>python3.x</strong>：<code>from urllib.parse import urlencode</code>  按照惯例，这里还是追踪一下，可以看见原型中的注解：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">urlencode</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> doseq<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span>None<span class="token punctuation">,</span> errors<span class="token operator">=</span>None<span class="token punctuation">,</span> quote_via<span class="token operator">=</span>quote_plus<span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><blockquote><p>Encode a dict or sequence of two-element tuples into a URL query string.<br>编码一个字典或者一个两个元素的元组序列到一个URL参数串</p></blockquote><p>以百度搜索为例：<br>百度关键字搜索的<code>GET</code>形式的<code>URL</code>地址为：<code>https://www.baidu.com/s?wd=urllib.urlencode</code><br>后面还有一大堆参数，但是实际上是没有什么用处的，上面的链接就可以搜索关于<code>urllib.urlencode</code>的相关消息。所以下面也利用一下：<br>先看看编码的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencodename <span class="token operator">=</span> urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'wd'</span><span class="token punctuation">:</span><span class="token string">"无涯明月"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#wd=%E6%97%A0%E6%B6%AF%E6%98%8E%E6%9C%88</span></code></pre><h3 id="2-解码"><a href="#2-解码" class="headerlink" title="2. 解码"></a>2. 解码</h3><p>当然，还有解码，也还是需要提前了解的，使用<code>unquote</code><br><strong>python2.x中</strong>：<code>urllib.unquote(name)</code><br><strong>python3.x中</strong>：<code>from urllib.parse import unquote</code>  这里还是追踪一下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">unquote</span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token string">'replace'</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>默认使用<code>utf-8</code>解码。不妨看看上面编码后的解码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencodename <span class="token operator">=</span> urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'wd'</span><span class="token punctuation">:</span><span class="token string">"无涯明月"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#wd=%E6%97%A0%E6%B6%AF%E6%98%8E%E6%9C%88</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquotename <span class="token operator">=</span> unquote<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#wd=无涯明月</span></code></pre><p>这里就给出百度搜索的简单案例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Python3</span><span class="token comment" spellcheck="true">#导入库</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquoteurl <span class="token operator">=</span> <span class="token string">"http://www.baidu.com/s?"</span>keyword <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入您要查询的关键字："</span><span class="token punctuation">)</span>wd <span class="token operator">=</span> urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'wd'</span><span class="token punctuation">:</span>keyword<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span>from_url <span class="token operator">=</span> url <span class="token operator">+</span> wd<span class="token comment" spellcheck="true"># 构造Request</span>request <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span>from_url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 发送url地址，得到响应对象</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>page <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span></code></pre><p>当然，结果比较尴尬，就是<code>page</code>是字节类型（不妨用<code>type(page)</code>检测），不方便我们查看，下面给出转换成字符串的方法：</p><pre class=" language-python"><code class="language-python">page <span class="token operator">=</span> page<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#可以搜索一下结果，发现是正确的</span></code></pre><p>以百度贴吧为例，我们这里打开百度贴吧，搜索高考，然后点击第二页：<br><img src="/images/201906/2019-06-16_123122.jpg" alt="e"><br>上面的链接我这里放置在这里：<code>http://tieba.baidu.com/f?kw=%E9%AB%98%E8%80%83&amp;ie=utf-8&amp;pn=50</code><br>然后，我们点击第三页：<br><img src="/images/201906/2019-06-16_123457.jpg" alt="e"><br>上面的链接我这里放置在这里：<code>http://tieba.baidu.com/f?kw=%E9%AB%98%E8%80%83&amp;ie=utf-8&amp;pn=100</code></p><p>所以，页面链接的变化就是pn的变化：<code>0 - pn=0</code> &nbsp;&nbsp;<code>1 - pn=50</code>&nbsp;&nbsp;…<br>案例代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span><span class="token comment" spellcheck="true"># Python3</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquote<span class="token keyword">def</span> <span class="token function">loadPage</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    根据URL发送请求，获取服务器响应文件    :param url: 需要爬取的URL地址    :return: 爬取的响应内容    """</span>    request <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    page <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载..."</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> page<span class="token keyword">def</span> <span class="token function">writePage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    保存爬取的数据到到本地文件中    :param page: 页面数据    :param file_name: 保存的文件的名称    :return: 无    """</span>    <span class="token comment" spellcheck="true"># 由于page是bytes，这里需要转换一下</span>    page <span class="token operator">=</span> page<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">spider</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> startPage<span class="token punctuation">,</span> endPage<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    更具url地址，和每一个的特点，计算打开页面的最终的链接    :param url: baseUrl    :param startPage: 起始页    :param endPage: 结束页    :return: 无    """</span>    start <span class="token operator">=</span> int<span class="token punctuation">(</span>startPage<span class="token punctuation">)</span>    end <span class="token operator">=</span> int<span class="token punctuation">(</span>endPage<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pn <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">50</span>        full_url <span class="token operator">=</span> url <span class="token operator">+</span><span class="token string">"&amp;pn="</span><span class="token operator">+</span> str<span class="token punctuation">(</span>pn<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始下载"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        file_name <span class="token operator">=</span> <span class="token string">"第"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"页.html"</span>        page <span class="token operator">=</span> loadPage<span class="token punctuation">(</span>full_url<span class="token punctuation">)</span>        writePage<span class="token punctuation">(</span>page<span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"完成下载"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    kw <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入你要爬取的贴吧："</span><span class="token punctuation">)</span>    startPage <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入起始页："</span><span class="token punctuation">)</span>    endPage <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入结束页："</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">"http://tieba.baidu.com/f?"</span>    kw <span class="token operator">=</span> urlencode<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'kw'</span><span class="token punctuation">:</span>kw<span class="token punctuation">}</span><span class="token punctuation">)</span>    url <span class="token operator">+=</span> kw    spider<span class="token punctuation">(</span>url<span class="token punctuation">,</span> startPage<span class="token punctuation">,</span> endPage<span class="token punctuation">)</span></code></pre><p>上面也就是使用<code>GET</code>方式来获取数据的案例，下面看看<code>Post</code>方式的案例。</p><h2 id="Post方式数据编码传输"><a href="#Post方式数据编码传输" class="headerlink" title="Post方式数据编码传输"></a>Post方式数据编码传输</h2><p>以有道翻译为例，打开网址：<code>http://fanyi.youdao.com/</code> ，然后我们使用浏览器检查工具对数据包进行抓包，在抓包的时候，为了方便区分资源，可以点击<br>某个数据包后，用<code>Preview</code>对资源进行查看。其中目标的资源包的<code>Preview</code>的内容如下（以输入<code>无</code>翻译为例）：</p><pre><code>translateResult: [[{tgt: &quot;There is no&quot;, src: &quot;无&quot;}]]0: [{tgt: &quot;There is no&quot;, src: &quot;无&quot;}]0: {tgt: &quot;There is no&quot;, src: &quot;无&quot;}src: &quot;无&quot;tgt: &quot;There is no&quot;type: &quot;zh-CHS2en&quot;</code></pre><p>可以看见翻译的结果是<code>&quot;There is no&quot;</code>，说明数据包找对了。接着开始找他的报文，可以看见<code>Form Data</code>部分，内容如下：</p><blockquote><p><code>Form Data</code>没有解析前数据<br>i=%E6%97%A0&amp;from=AUTO&amp;to=AUTO&amp;smartresult=dict&amp;client=fanyideskweb&amp;salt<br>=15606713929093&amp;sign=0d66e2cc39af99bb091353d8b05baade&amp;ts=156067139290<br>9&amp;bv=fb2ba7d69650ad4d6ceb3dc46e03624a&amp;doctype=json&amp;version=2.1&amp;keyfrom=f<br>anyi.web&amp;action=FY_BY_CLICKBUTTION</p></blockquote><p>为了直观，这里点击<code>Form Data</code> 右边的<code>view parsed</code> </p><blockquote><p>解析有的友好格式：（上面的数据也可以看做是下面的字典数据经过URL编码后的数据格式）<br>i: 无<br>from: AUTO<br>to: AUTO<br>smartresult: dict<br>client: fanyideskweb<br>salt: 15606713929093<br>sign: 0d66e2cc39af99bb091353d8b05baade<br>ts: 1560671392909<br>bv: fb2ba7d69650ad4d6ceb3dc46e03624a<br>doctype: json<br>version: 2.1<br>keyfrom: fanyi.web<br>action: FY_BY_CLICKBUTTION</p></blockquote><p>同理，可以看见请求的URL地址是：</p><pre><code>Request URL: http://fanyi.youdao.com/translate_o?smartresult=dict&amp;smartresult=rule</code></pre><p>很不幸的是，这里用爬虫模拟了一下，然后出现了错误<code>{&quot;errorcode&quot;:50}</code><br>百度了一下，可以去掉链接中的<code>_o</code>解决。试了一下，可以用。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf-8</span><span class="token comment" spellcheck="true"># Python3</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquoteurl <span class="token operator">=</span> <span class="token string">"http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule"</span>key <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"i"</span><span class="token punctuation">:</span> key<span class="token punctuation">,</span>    <span class="token string">"doctype"</span><span class="token punctuation">:</span> <span class="token string">"json"</span><span class="token punctuation">}</span>data <span class="token operator">=</span> urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>request <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>测试的结果：<br>{“type”:”EN2ZH_CN”,”errorCode”:0,”elapsedTime”:0,”translateResult”:[[{“src”:”My name is Tom”,”tgt”:”我的名字是汤姆”}]]}<br>{“type”:”ZH_CN2EN”,”errorCode”:0,”elapsedTime”:17,”translateResult”:[[{“src”:”你好，今天天气很好。”,”tgt”:”Hello, it’s a fine day today.”}]]}</p></blockquote><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>网站服务器为了辨别用户身份和进行<code>Session</code>跟踪，而储存在用户浏览器上的文本文件。<br>在<code>Cookie</code>中保存了用户名和密码(通常经过<code>RAS</code>加密)，故而可以保持登录信息到用户下次与服务器的会话。<br>比较常见的操作就是在网站服务器端会更具根据<code>Cookie</code>判定注册用户是否已经登录网站。<br>下面，先登录人人网站，然后我们抓捕数据包，取得登录有的<code>Cookie</code>文件，简单<code>Cookie</code>模拟登录：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> <span class="token operator">*</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"Host"</span><span class="token punctuation">:</span><span class="token string">"www.renren.com"</span><span class="token punctuation">,</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># Cookie里记录了用户名，密码(通常经过RAS加密)</span>    <span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"anonymid=jwego3......"</span><span class="token punctuation">}</span>request <span class="token operator">=</span> Request<span class="token punctuation">(</span><span class="token string">"http://www.renren.com/"</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> headers<span class="token punctuation">)</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>不妨思考一下，如果每次爬虫都需要手动登录浏览器然后拷贝<code>Cookie</code>下来，还是挺可怕的。在<code>Python</code>中提供了专门的工具来模拟登录，管理<code>Cookie</code>。<br>在这之前，需要先了解一下我们的<code>urlopen</code>函数，追踪一下可以发现包装的核心代码如下：</p><pre class=" language-python"><code class="language-python">https_handler <span class="token operator">=</span> HTTPSHandler<span class="token punctuation">(</span>context<span class="token operator">=</span>context<span class="token punctuation">)</span>opener <span class="token operator">=</span> build_opener<span class="token punctuation">(</span>https_handler<span class="token punctuation">)</span>opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span></code></pre><p>由于<code>urlopen()</code>方法不支持代理、<code>cookie</code>等，所以我们如果要程序管理<code>Cookie</code>就需要使用自己包装的<code>open()</code>函数。</p><h3 id="HTTPHandler"><a href="#HTTPHandler" class="headerlink" title="HTTPHandler"></a>HTTPHandler</h3><p>先看一个简单的<code>opener()</code>模仿案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> <span class="token operator">*</span>http_hander <span class="token operator">=</span> HTTPHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>opener <span class="token operator">=</span> build_opener<span class="token punctuation">(</span>http_hander<span class="token punctuation">)</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#当然这里也可以先用Request包装一下</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="ProxyHandler"><a href="#ProxyHandler" class="headerlink" title="ProxyHandler"></a>ProxyHandler</h3><p>代理，很多网站会检测某一段时间异常访问的IP，满足条件会禁止这个IP的访问。<br>所以我们可以设置一些代理服务器，每隔一段时间换一个代理，就算IP被禁止，依然可以换个IP继续爬取。<br>下面是一些免费的代理站点：<br><a href="https://www.xicidaili.com/" target="_blank" rel="noopener">西刺免费代理IP</a><br><a href="http://www.kuaidaili.com/" target="_blank" rel="noopener">快代理免费代理</a><br><a href="http://www.goubanjia.com/" target="_blank" rel="noopener">全网代理IP</a><br><a href="http://www.89ip.cn/" target="_blank" rel="noopener">89免费代理</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> <span class="token operator">*</span>proxy_handler <span class="token operator">=</span> ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"http"</span><span class="token punctuation">:</span><span class="token string">"221.229.252.98:9797"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#nullproxy_handler = urllib2.ProxyHandler({}) 不设置代理</span>opener <span class="token operator">=</span> build_opener<span class="token punctuation">(</span>proxy_handler<span class="token punctuation">)</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>Done!，下面就开始账户名、密码登录人人案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> http <span class="token keyword">import</span> cookiejar<span class="token comment" spellcheck="true"># 通过cookieJar（）类构建一个cookieJar（）对象，用来保存cookie的值</span>cookie <span class="token operator">=</span> cookiejar<span class="token punctuation">.</span>CookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过HTTPCookieProcessor（）处理器类构建一个处理器对象，用来处理cookie</span><span class="token comment" spellcheck="true"># 参数就是构建的CookieJar（）对象</span>cookie_handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 构建一个自定义的opener</span>opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>cookie_handler<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 通过自定义opener的addheaders的参数，可以添加HTTP报头参数</span>opener<span class="token punctuation">.</span>addhandlers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Opera/9.80 (Windows NT 6.1; U; zh-cn) Presto/2.9.168 Version/11.50"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 人人网的登陆接口</span>url <span class="token operator">=</span> <span class="token string">"http://www.renren.com/PLogin.do"</span><span class="token comment" spellcheck="true"># 需要登陆的账户密码</span>data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"15128459509"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 通过URL encode（）编码转换</span>data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>request <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>response <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>当然，这里只是了解，因为在网站中通常都会做<code>JavaScript</code>加密，然后传输数据。<br>很少有网站会像<a href="http://www.renren.com/PLogin.do" target="_blank" rel="noopener">http://www.renren.com/PLogin.do</a> 一样，直接使用<code>Post</code>方式传送数据。这里只是接触一下，模拟登录还要选择别的技术。</p><h1 id="5-Requests"><a href="#5-Requests" class="headerlink" title="5. Requests"></a>5. Requests</h1><p><code>Requests</code>继承了<code>urllib3</code>，连接更加友好。如打开百度：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsresponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>其余的不说了，不妨百度。</p><h1 id="6-数据提取"><a href="#6-数据提取" class="headerlink" title="6. 数据提取"></a>6. 数据提取</h1><p>数据提取有多种方式：</p><ol><li>正则表达式</li><li><code>XPath</code></li><li><code>JsonPath</code></li><li><code>CSS</code>选择器</li></ol><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2> <table border="1">  <tr>    <td>语法</td>    <td>说明</td>  </tr>  <tr>    <td colspan="2" style="text-align:center;">字符</td>  </tr>  <tr>    <td>一般字符</td>    <td> 匹配自身。如：a，即匹配a字符</td>  </tr>  <tr>    <td>. </td>    <td>匹配除了"\n"外的任意字符（注意：只是一个字符）</td>  </tr>  <tr>    <td>\ </td>    <td>转义字符。如：\.c，即.c；\c，即\c</td>  </tr>  <tr>    <td>[...]</td>    <td>字符集，如:[abc]或[a-c]，表示abc；如果是[^abc]，表示不是abc的其他字符</td>  </tr>  <tr>    <td colspan="2" style="text-align:center;">预定义字符</td>  </tr>  <tr>    <td>\d </td>    <td>表示数字，即[0-9]</td>  </tr>  <tr>    <td>\D </td>    <td>表示非数字，即[^0-9]</td>  </tr>  <tr>    <td>\s </td>    <td>表示空白字符，如空格、回车、换行等</td>  </tr>  <tr>    <td>\S </td>    <td>表示非空白字符，即[^\s]</td>  </tr>  <tr>    <td>\w </td>    <td>表示单词字符，即[A-Za-z0-9_]</td>  </tr>  <tr>    <td>\W </td>    <td>非单词字符，即[^\w]</td>  </tr>  <tr>    <td colspan="2" style="text-align:center;">数量词</td>  </tr>  <tr>    <td>* </td>    <td>表示前一个字符0次或者无限次，如abc*</td>  </tr>  <tr>    <td>+ </td>    <td>表示匹配前一个字符1次或者无限次</td>  </tr>  <tr>    <td>？ </td>    <td>表示匹配前一个字符0次或者一次</td>  </tr>  <tr>    <td>{m}</td>    <td> 表示匹配前一个字符m次</td>  </tr>  <tr>    <td>{m,n} </td>    <td>表示匹配前一个字符m至n次</td>  </tr>  <tr>    <td colspan="2" style="text-align:center;">边界匹配</td>  </tr>  <tr>    <td>^ </td>    <td>表示匹配字符串开头，在多行模式中匹配每一行开头</td>  </tr>  <tr>    <td>$</td>    <td> 表示匹配字符串末尾，在多行模式中匹配每一张末尾</td>  </tr>  <tr>    <td>\A </td>    <td>表示仅匹配字符串开头</td>  </tr>  <tr>    <td>\Z </td>    <td>表示仅匹配字符串末尾</td>  </tr>  <tr>    <td>\b </td>    <td>匹配\w和\W之间</td>  </tr>  <tr>    <td>\B </td>    <td>表示[^\b]</td>  </tr>  <tr>    <td colspan="2" style="text-align:center;">逻辑与分组</td>  </tr>  <tr>    <td>| </td>    <td>表示匹配左右表达式中任意一个，先尝试匹配左边的表达式，一旦匹配成功就跳过匹配右边的表达式</td>  </tr>  <tr>    <td>(...) </td>    <td>被括起来的表达式将被分组，从表达式左边开始每遇到一个分组的左括号'('，编号加一。分组表达式作为一个整体，可以后接数量词，</td>  </tr>  </table><p>正则匹配比较难，一般不怎么用。这里简单介绍介绍一下用法。在<code>Python</code>中，使用正则表达式需要使用<code>re</code>模块。<code>re</code>模块的一般使用步骤如下：</p><ul><li>使用 <code>compile()</code> 函数将正则表达式的字符串形式编译为一个 <code>Pattern</code> 对象</li><li>通过<code>Pattern</code>对象提供的一系列方法对文本进行匹配查找，获得匹配结果，一个 <code>Match</code> 对象。</li><li>最后使用 <code>Match</code>对象提供的属性和方法获得信息，根据需要进行其他的操作</li></ul><h3 id="Pattern-对象的一些常用方法："><a href="#Pattern-对象的一些常用方法：" class="headerlink" title="Pattern 对象的一些常用方法："></a>Pattern 对象的一些常用方法：</h3><ul><li><p><code>match</code> 方法：从起始位置开始查找，一次匹配(而不是所有匹配的结果)。可以自定义查找的起始位置。当匹配成功时，返回一个<code>Match</code> 对象，如果没有匹配上，则返回<code>None</code>。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 案例一：</span><span class="token keyword">import</span> restrs <span class="token operator">=</span> r<span class="token string">'abc123'</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">)</span>resu <span class="token operator">=</span> pattern<span class="token punctuation">.</span>match<span class="token punctuation">(</span>strs<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#下标从0开始，区间为[3, 5)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#12</span><span class="token comment" spellcheck="true">#---------------------------------------------------------------</span><span class="token comment" spellcheck="true">## 案例二：</span><span class="token keyword">import</span> restrs <span class="token operator">=</span> r<span class="token string">'Hello Tom Hello Jame'</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'([a-z]+) ([a-z]+)'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#re.I表示忽略大小写</span>resu <span class="token operator">=</span> pattern<span class="token punctuation">.</span>match<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#Hello Tom</span></code></pre></li><li><p><code>search</code> 方法：从任何位置开始查找，一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果。当匹配成功时，返回一个 <code>Match</code> 对象，如果没有匹配上，则返回<code>None</code>。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> restrs <span class="token operator">=</span> r<span class="token string">'abc123def456'</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">)</span>resu <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#123</span>resu <span class="token operator">=</span> pattern<span class="token punctuation">.</span>match<span class="token punctuation">(</span>strs<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#match匹配是从前到后找，a是非数字，故而匹配失败</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#None</span></code></pre></li><li><p><code>findall</code> 方法：全部匹配，返回列表。以列表形式返回全部能匹配的子串，如果没有匹配，则返回一个空列表。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 案例一：</span><span class="token keyword">import</span> restrs <span class="token operator">=</span> r<span class="token string">'abc123def456'</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d+'</span><span class="token punctuation">)</span>resu <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['123', '456']</span><span class="token comment" spellcheck="true">#--------------------------------------------------------</span><span class="token comment" spellcheck="true">## 案例二：</span><span class="token keyword">import</span> restrs <span class="token operator">=</span> r<span class="token string">"123.14159 'bigcat'  232312  3.15"</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d+\.\d*'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#*是数量词</span>resu <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#['123.14159', '3.15']</span></code></pre></li><li><p><code>finditer</code> 方法：全部匹配，返回迭代器。跟 <code>findall</code> 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（<code>Match</code> 对象）的迭代器。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> restrs <span class="token operator">=</span> r<span class="token string">"123.14159 'bigcat'  232312  3.15"</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\d+\.\d*'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#*是数量词</span>resu <span class="token operator">=</span> pattern<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>resu<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#&lt;class 'callable_iterator'></span><span class="token keyword">for</span> i <span class="token keyword">in</span> resu<span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 123.14159</span><span class="token comment" spellcheck="true"># 3.15</span></code></pre></li><li><p><code>split</code> 方法：分割字符串，返回列表。按照能够匹配的子串将字符串分割后返回列表</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> restrs <span class="token operator">=</span> r<span class="token string">"a,b;; c   d"</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'[\,\;\s]+'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#[]是字符集，也就是其中的任意一个</span>resu <span class="token operator">=</span> pattern<span class="token punctuation">.</span>split<span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>resu<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'list'></span><span class="token keyword">print</span><span class="token punctuation">(</span>resu    <span class="token comment" spellcheck="true"># ['a', 'b', 'c', 'd']</span></code></pre></li><li><p><code>sub</code> 方法：替换，形式如下：<code>sub(repl, string[, count])</code><br><code>repl</code> 可以是字符串也可以是一个函数，表示用来替换的东西（或规则）：<br><code>repl</code> 是字符串，则会使用 <code>repl</code> 去替换字符串每一个匹配的子串，并返回替换后的字符串。<br><code>repl</code> 是函数，这个方法应当只接受一个参数（<code>Match</code> 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。<br><code>count</code>用于指定最多替换次数，不指定时全部替换。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">## 案例一：</span><span class="token keyword">import</span> repartten <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(\w+) (\w+)'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># \w = [A-Za-z0-9]  按空格分为两组，每一组内容是单词字符（匹配\w）</span>s <span class="token operator">=</span> <span class="token string">'hello 123, hello 456'</span>resu <span class="token operator">=</span> partten<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">'hello world'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用 'hello world' 替换 'hello 123' 和 'hello 456'</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># hello world, hello world</span>resu <span class="token operator">=</span> partten<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">'\2 \1'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 引用分组，默认前一个分组是\1,后一个是\2，故而这里是交换</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 123 hello, 456 hello</span><span class="token comment" spellcheck="true">#--------------------------------------------------------------------</span><span class="token comment" spellcheck="true">## 案例二：</span><span class="token keyword">import</span> repartten <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'(\w+) (\w+)'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># \w = [A-Za-z0-9]  按空格分为两组，每一组内容是单词字符（匹配\w）</span>s <span class="token operator">=</span> <span class="token string">'hello 123, hello 456'</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token string">'hi'</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#分组，即分组中的第二个</span>resu <span class="token operator">=</span> partten<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>func<span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 不指定替换的次数</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hi 123, hi 456</span>resu <span class="token operator">=</span> partten<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>func<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 最多替换一次</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># hi 123, hello 456</span></code></pre></li></ul><h3 id="匹配中文"><a href="#匹配中文" class="headerlink" title="匹配中文"></a>匹配中文</h3><p>中文的 unicode 编码范围 主要在 [u4e00-u9fa5]，这里说主要是因为这个范围并不完整，比如没有包括全角（中文）标点，不过，在大部分情况下，应该是够用的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> retitle <span class="token operator">=</span> u<span class="token string">'你好，hello，世界'</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'[\u4e00-\u9fa5]+'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#['你好', '世界']</span></code></pre><h3 id="爬虫中应用正则"><a href="#爬虫中应用正则" class="headerlink" title="爬虫中应用正则"></a>爬虫中应用正则</h3><p>如，我们这里想获取<a href="http://127.0.0.1：4000" target="_blank" rel="noopener">http://127.0.0.1：4000</a> 主页（地址也可以是本网站首页：<a href="http://baiyazi.top" target="_blank" rel="noopener">http://baiyazi.top</a> ）的文章的标题。浏览器检查一下，然后和标题相关的代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-title<span class="token punctuation">"</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name headline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post-title-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/2019/usehexo-9/<span class="token punctuation">"</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hexo官网阅读笔记 | 来必力<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>那么正则表达式就可以是：<code>r&#39;&lt;h2 .*&gt;\s+.*&lt;/h2&gt;&#39;</code><br>可以在一个程序中测试一下，如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> retitle <span class="token operator">=</span> r<span class="token triple-quoted-string string">"""&lt;h2 class="post-title" itemprop="name headline">                &lt;a class="post-title-link" href="/2019/scrapy-8/" itemprop="url">seo-7 |  用Item数据封装&lt;/a>&lt;/h2>"""</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;h2 .*>\s+.*&lt;/h2>'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> </code></pre><p>那么完整的程序如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span>urlopen<span class="token keyword">import</span> reheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span><span class="token punctuation">}</span>request <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://127.0.0.1:4000"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>page <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#正则处理，找到发布的每一篇文章的标题</span>pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'&lt;h2 .*>\s+.*&lt;/h2>'</span><span class="token punctuation">)</span>resu <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>resu<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 10</span><span class="token keyword">for</span> i <span class="token keyword">in</span> resu<span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"\s{2}"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 有空格，替换多个空格的</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果如下：</p><pre><code>10&lt;h2 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;&lt;a class=&quot;post-title-link&quot; href=&quot;/2019/introspection/&quot; itemprop=&quot;url&quot;&gt;My Reflective Notes&lt;/a&gt;&lt;/h2&gt;&lt;h2 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;&lt;a class=&quot;post-title-link&quot; href=&quot;/2019/usehexo-9/&quot; itemprop=&quot;url&quot;&gt;Hexo官网阅读笔记 | 来必力&lt;/a&gt;&lt;/h2&gt;&lt;h2 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;&lt;a class=&quot;post-title-link&quot; href=&quot;/2019/scrapy-8/&quot; itemprop=&quot;url&quot;&gt;seo-7 |用Item数据封装&lt;/a&gt;&lt;/h2&gt;&lt;h2 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;&lt;a class=&quot;post-title-link&quot; href=&quot;/2019/scrapy-7/&quot; itemprop=&quot;url&quot;&gt;scrapy-7 |Response内置CSS选择器&lt;/a&gt;&lt;/h2&gt;&lt;h2 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;&lt;a class=&quot;post-title-link&quot; href=&quot;/2019/scrapy-6/&quot; itemprop=&quot;url&quot;&gt;scrapy-6 |Response内置XPath选择器&lt;/a&gt;&lt;/h2&gt;&lt;h2 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;&lt;a class=&quot;post-title-link&quot; href=&quot;/2019/scrapy-5/&quot; itemprop=&quot;url&quot;&gt;scrapy-5 |Response内置Selector&lt;/a&gt;&lt;/h2&gt;&lt;h2 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;&lt;a class=&quot;post-title-link&quot; href=&quot;/2019/scrapy-4/&quot; itemprop=&quot;url&quot;&gt;scrapy-4 |Selector提取数据&lt;/a&gt;&lt;/h2&gt;&lt;h2 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;&lt;a class=&quot;post-title-link&quot; href=&quot;/2019/scrapy-3/&quot; itemprop=&quot;url&quot;&gt;scrapy-3 |Spider开发流程&lt;/a&gt;&lt;/h2&gt;&lt;h2 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;&lt;a class=&quot;post-title-link&quot; href=&quot;/2019/scrapy-2/&quot; itemprop=&quot;url&quot;&gt;scrapy-2 |第一个爬虫程序&lt;/a&gt;&lt;/h2&gt;&lt;h2 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;&lt;a class=&quot;post-title-link&quot; href=&quot;/2019/scrapy-0/&quot; itemprop=&quot;url&quot;&gt;scrapy-0 |Python爬虫基础类库&lt;/a&gt;&lt;/h2&gt;</code></pre><h2 id="XPath选择器"><a href="#XPath选择器" class="headerlink" title="XPath选择器"></a>XPath选择器</h2><p>无疑，正则比较不怎么好用。需要比较熟悉正则表达式的规则，还是比较麻烦的。所以有比较简单的<code>XPath</code>来处理<code>xml</code>文档。由于<code>html</code>是特殊的<code>xml</code>文档，故而也可使用<code>XPath</code>。<br>可以安装：<code>Chrome</code>插件 <code>XPath Helper</code>，比较方便编程。</p><table border="1">  <tr>    <td>表达式</td>    <td>说明</td>  </tr>  <tr>    <td colspan="2" style="text-align:center;">选取节点</td>  </tr>  <tr>    <td>nodename</td>    <td>选取此节点的所有子节点。</td>  </tr>  <tr>    <td>/</td>    <td>从根节点选取。</td>  </tr>  <tr>    <td>//</td>    <td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td>  </tr>  <tr>    <td>.</td>    <td>选取当前节点。</td>  </tr>  <tr>    <td>..</td>    <td>选取当前节点的父节点。</td>  </tr>  <tr>    <td>@</td>    <td>选取属性。</td>  </tr>  <tr>    <td colspan="2" style="text-align:center;">谓语用来查找某个特定的节点或者包含某个指定的值的节点，被嵌在方括号中。</td>  </tr>  <tr>    <td>/bookstore/book[1]</td>    <td>选取属于 bookstore 子元素的第一个 book 元素。</td>  </tr>  <tr>    <td>/bookstore/book[last()]</td>    <td>选取属于 bookstore 子元素的最后一个 book 元素。</td>  </tr>  <tr>    <td>/bookstore/book[last()-1]</td>    <td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td>  </tr>  <tr>    <td>/bookstore/book[position()< 3]</td>    <td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>  </tr>  <tr>    <td>//title[@lang]</td>    <td>选取所有拥有名为 lang 的属性的 title 元素。</td>  </tr>  <tr>    <td>//title[@lang=’eng’]</td>    <td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>  </tr>  <tr>    <td>/bookstore/book[price>35.00]</td>    <td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>  </tr>  <tr>    <td>/bookstore/book<br>[price>35.00]/title</td>    <td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00</td>  </tr>  <tr>    <td colspan="2" style="text-align:center;">通配符</td>  </tr>  <tr>    <td>*</td>    <td>匹配任何元素节点。</td>  </tr>  <tr>    <td>@</td>    <td>匹配任何属性节点。</td>  </tr>  <tr>    <td>node()</td>    <td>匹配任何类型的节点。</td>  </tr>  <tr>    <td>/bookstore/</td>    <td>选取 bookstore 元素的所有子元素。</td>  </tr>  <tr>    <td>//</td>    <td>选取文档中的所有元素。</td>  </tr>  <tr>    <td>//title[@*]</td>    <td>选取所有带有属性的 title 元素。</td>  </tr>  <tr>    <td colspan="2" style="text-align:center;">多选路径</td>  </tr><tr><td>//book/title | //book/price</td><td>选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td>//title | //price</td><td>选取文档中的所有 title 和 price 元素。</td></tr><tr><td>/bookstore/book/title | //price</td><td>选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr>  </table><p>值得注意的是<code>XPath</code>全名是<code>XML Path Language</code>。也就是它是基于<code>xml</code>的一种路径选择语言，在<code>xml</code>文档中查找信息。<strong>在运用到<code>Python</code>抓取时要先转换为<code>xml</code>。</strong><br>故而我们需要先了解如何将一个文本页转换成xml节点树。</p><h3 id="lxml解析器"><a href="#lxml解析器" class="headerlink" title="lxml解析器"></a>lxml解析器</h3><p><code>lxml</code> 是 一个<code>HTML/XML</code>的解析器，主要的功能是如何解析和提取 <code>HTML/XML</code> 数据。<br><code>lxml python</code> 官方文档：<a href="http://lxml.de/index.html" target="_blank" rel="noopener">http://lxml.de/index.html</a><br>下面简单看一个案例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用 lxml 的 etree 库</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreecontent <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>&lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>&lt;/ul>"""</span><span class="token comment" spellcheck="true"># 利用etree.HTML，将字符串解析为HTML文档, 返回根结点</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'lxml.etree._Element'></span><span class="token comment" spellcheck="true"># 序列化HTML文档，到一个特定编码的字符串</span>result <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> pretty_print<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 默认的编码是 ASCII</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>class</span> <span class="token attr-name">'lxml.etree._Element'</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link1.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>壹 item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>link2.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>贰 item<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>不难看出，大致补全了<code>HTML</code>文档结构。<br>下面，我们看看<code>xpath</code>是如何使用的，我们这里就来查找一下<code>a</code>标签：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用 lxml 的 etree 库</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreecontent <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>&lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>&lt;/ul>"""</span><span class="token comment" spellcheck="true"># 利用etree.HTML，将字符串解析为HTML文档, 返回根结点</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'lxml.etree._Element'></span>ul_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//li'</span><span class="token punctuation">)</span>a_list <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> ul_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>i<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li></span>    <span class="token comment" spellcheck="true"># &lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li></span><span class="token keyword">for</span> i <span class="token keyword">in</span> a_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 壹 item</span>    <span class="token comment" spellcheck="true"># 贰 item</span></code></pre><p>当然，不止是常量字符串，还可以读取<code>HTML</code>文档。所用的方法是：<code>etree.parse()</code>，不妨看看原型：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> parser<span class="token operator">=</span>None<span class="token punctuation">,</span> base_url<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># real signature unknown; restored from __doc__</span>    <span class="token triple-quoted-string string">"""    parse(source, parser=None, base_url=None)        Return an ElementTree object loaded with source elements.  If no parser        is provided as second argument, the default parser is used.        The ``source`` can be any of the following:        - a file name/path        - a file object        - a file-like object        - a URL using the HTTP or FTP protocol        To parse from a string, use the ``fromstring()`` function instead.        Note that it is generally faster to parse from a file path or URL        than from an open file object or file-like object.  Transparent        decompression from gzip compressed sources is supported (unless        explicitly disabled in libxml2).        The ``base_url`` keyword allows setting a URL for the document        when parsing from a file-like object.  This is needed when looking        up external entities (DTD, XInclude, ...) with relative paths.    """</span>    <span class="token keyword">pass</span></code></pre><p>可以放置的资源文件可以是一个文件路径、文件对象、文件链接地址。比较方便。<br>案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token comment" spellcheck="true"># 读取外部文件 hello.html</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'./hello.html'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span>， pretty_print<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="爬虫-使用XPath解析案例"><a href="#爬虫-使用XPath解析案例" class="headerlink" title="爬虫+使用XPath解析案例"></a>爬虫+使用XPath解析案例</h3><p>下面一起看看案例，我们下载<a href="http://127.0.0.1:4000" target="_blank" rel="noopener">http://127.0.0.1:4000</a> 即网站主页的图片，检查代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site-author-image<span class="token punctuation">"</span></span> <span class="token attr-name">itemprop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/avatar.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>无涯明月<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>很容易得出<code>img</code>标签的<code>src</code>地址<code>XPath</code>，可以是<code>//img/@src</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span>urlopen<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> reheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span><span class="token punctuation">}</span>request <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://127.0.0.1:4000"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>page <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 解析html 为 HTML 文档</span>selector <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page<span class="token punctuation">)</span>links <span class="token operator">=</span> selector<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//img/@src'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用xpath选择器，取出所有img标签，的src。得到列表集</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>links<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;class 'list'></span>resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 正则匹配一下，我不想要fork me on github的图片，只想要本网站的图片</span><span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'/images/.*.[(jpg)(png)]'</span><span class="token punctuation">)</span>    resu <span class="token operator">+=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>link<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># ['/images/avatar.jpg'， '/images/beian/beian.png']</span><span class="token comment" spellcheck="true"># 下载图片</span><span class="token keyword">for</span> i <span class="token keyword">in</span> resu<span class="token punctuation">:</span>    request <span class="token operator">=</span> Request<span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:4000"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    file <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'[A-Za-z0-9_]+\.[a-z]{3}'</span><span class="token punctuation">)</span>    filename <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始下载'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"d:/"</span> <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>file<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'完成下载'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span></code></pre><p>然后，在<code>D</code>盘中就可以看见下载的两种图片。</p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p>和<code>lxml</code> 一样，<code>Beautiful Soup</code> 也是一个<code>HTML/XML</code>的解析器，主要的功能也是如何解析和提取 <code>HTML/XML</code> 数据。<br>官方文档：<a href="http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0" target="_blank" rel="noopener">http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0</a><br><code>pip</code> 安装：<code>pip install beautifulsoup4</code><br><code>lxml</code> 只会局部遍历，而<code>Beautiful Soup</code> 是基于<code>HTML DOM</code>的，会载入整个文档，解析整个<code>DOM</code>树，因此时间和内存开销都会大很多，所以性能要低于<code>lxml</code>。</p><table><thead><tr><th style="text-align:center">抓取工具</th><th style="text-align:center">速度</th><th style="text-align:center">使用难度</th><th style="text-align:center">安装难度</th></tr></thead><tbody><tr><td style="text-align:center">正则</td><td style="text-align:center">最快</td><td style="text-align:center">困难</td><td style="text-align:center">无（内置）</td></tr><tr><td style="text-align:center">BeautifulSoup</td><td style="text-align:center">慢</td><td style="text-align:center">最简单</td><td style="text-align:center">简单</td></tr><tr><td style="text-align:center">lxml</td><td style="text-align:center">快</td><td style="text-align:center">简单</td><td style="text-align:center">一般</td></tr></tbody></table>### 常见的文档树处理函数Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象。* 常见的标签处理：TagTag 通俗点讲就是 HTML 中的一个个标签。但是注意，**它查找的是在所有内容中的第一个符合要求的标签。** 还有值得注意的是：**对于 Tag，它有两个重要的属性，是 name 和 attrs**看看下面的例子：<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupcontent <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>&lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>&lt;/ul>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>content<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>li <span class="token operator">=</span> soup<span class="token punctuation">.</span>li<span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li></span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'bs4.element.Tag'></span><span class="token comment" spellcheck="true"># 两个属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># li</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># {'class': ['item-0']}</span></code></pre><ul><li>获取标签文本域内容<br>获取标签内部的文字对象。有三种方式，看看下面简单的例子：</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupcontent <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>&lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>&lt;/ul>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>content<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>li <span class="token operator">=</span> soup<span class="token punctuation">.</span>li<span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li></span><span class="token comment" spellcheck="true"># print(li.next_siblings)  # li</span><span class="token comment" spellcheck="true"># 获取文本节点</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>string<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 壹 item</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>text<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 壹 item</span><span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 壹 item</span></code></pre><ul><li>find-搜索文档树</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupcontent <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>&lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>&lt;/ul>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>content<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;class 'bs4.BeautifulSoup'></span><span class="token comment" spellcheck="true"># find  匹配第一个满足的</span>li <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'li'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li></span><span class="token comment" spellcheck="true"># find_all   匹配所有，返回列表集</span>li_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'li'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [&lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li>, &lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>]</span><span class="token comment" spellcheck="true"># find_next 在当前标签向后查找给定的标签，匹配第一个</span>li <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'li'</span><span class="token punctuation">)</span>next_li <span class="token operator">=</span> li<span class="token punctuation">.</span>find_next<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li></span>next_a <span class="token operator">=</span> li<span class="token punctuation">.</span>find_next<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;a href="link1.html">壹 item&lt;/a></span><span class="token comment" spellcheck="true"># find_all_next  在当前标签向后查找给定的标签，匹配所有</span>ul <span class="token operator">=</span> soup<span class="token punctuation">.</span>ula_list <span class="token operator">=</span> ul<span class="token punctuation">.</span>find_all_next<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [&lt;a href="link1.html">壹 item&lt;/a>, &lt;a href="link2.html">贰 item&lt;/a>]</span><span class="token comment" spellcheck="true"># find_previous 在当前标签向前查找给定的标签，匹配首个</span>last_a <span class="token operator">=</span> a_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true"># &lt;a href="link2.html">贰 item&lt;/a></span>li <span class="token operator">=</span> last_a<span class="token punctuation">.</span>find_previous<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li></span>a <span class="token operator">=</span> last_a<span class="token punctuation">.</span>find_previous<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;a href="link1.html">壹 item&lt;/a></span><span class="token comment" spellcheck="true"># find_all_previous  在当前标签向前查找给定的标签，匹配所有</span>li_list <span class="token operator">=</span> last_a<span class="token punctuation">.</span>find_all_previous<span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [&lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>, &lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li>]</span>a_list <span class="token operator">=</span> last_a<span class="token punctuation">.</span>find_all_previous<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [&lt;a href="link1.html">壹 item&lt;/a>]</span><span class="token comment" spellcheck="true"># find_parent  name默认None,返回直接父辈元素。写name可以是上上级，就返回上上级父元素标签</span>li <span class="token operator">=</span> last_a<span class="token punctuation">.</span>find_parent<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 直接父元素 &lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li></span>ul <span class="token operator">=</span> last_a<span class="token punctuation">.</span>find_parent<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 指定父元素 &lt;ul>&lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>&lt;/ul></span><span class="token comment" spellcheck="true"># find_parents</span>parents <span class="token operator">=</span> last_a<span class="token punctuation">.</span>find_parents<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 直接父元素 和上层所有父辈元素</span><span class="token comment" spellcheck="true"># [&lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>, &lt;ul>&lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>&lt;/ul>,</span><span class="token comment" spellcheck="true"># &lt;ul>&lt;li class="item-0">&lt;a href="link1.html">壹 item&lt;/a>&lt;/li>&lt;li class="item-1">&lt;a href="link2.html">贰 item&lt;/a>&lt;/li>&lt;/ul>,</span><span class="token comment" spellcheck="true"># ]</span><span class="token comment" spellcheck="true"># 下面四个方法是兄弟元素的相关方法，不演示了。</span><span class="token comment" spellcheck="true">#  'find_next_sibling', 'find_next_siblings'</span><span class="token comment" spellcheck="true">#  'find_previous_sibling', 'find_previous_siblings',</span></code></pre><h3 id="select方法-按照CSS选择器查找"><a href="#select方法-按照CSS选择器查找" class="headerlink" title="select方法-按照CSS选择器查找"></a>select方法-按照CSS选择器查找</h3><p>不妨看一个简单的案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupbody <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;ul>&lt;li class='s'>1 2 3&lt;/li>&lt;li id='t'>one two three&lt;/li>&lt;li>壹 贰 叁&lt;/li>&lt;li>一 二 三&lt;/li>&lt;/ul>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>body<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 标签选择器，直接使用名字</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># [&lt;ul>...&lt;/ul>]</span><span class="token comment" spellcheck="true"># 类选择器</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul li.s'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># [&lt;li class="s">1 2 3&lt;/li>]</span><span class="token comment" spellcheck="true"># id选择器</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'li#t'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   # <span class="token punctuation">[</span><span class="token operator">&lt;</span>li id<span class="token operator">=</span><span class="token string">"t"</span><span class="token operator">></span>one two three<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 子元素选择器 ></span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'ul > li'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># [&lt;li class="s">1 2 3&lt;/li>, &lt;li id="t">one two three&lt;/li>, &lt;li>壹 贰 叁&lt;/li>, &lt;li>一 二 三&lt;/li>]</span></code></pre><p>不妨看看本网站关于<a href="/2019/css-2/">CSS选择器的教程</a></p><h3 id="按照属性查找"><a href="#按照属性查找" class="headerlink" title="按照属性查找"></a>按照属性查找</h3><p>当然，标签中可能有其他的属性，我们可以按照属性查找：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupbody <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;input type="text" name="user"/>&lt;input type="email" name="em"/>&lt;input type="password" name="ps"/>"""</span><span class="token comment" spellcheck="true"># 使用字符串常量，创建 Beautiful Soup 对象</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>body<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用本地HTML文件，创建对象 Beautiful Soup 对象</span><span class="token comment" spellcheck="true"># soup = BeautifulSoup(open('index.html'))</span><span class="token comment" spellcheck="true"># 格式化输出 soup 对象的内容</span><span class="token comment" spellcheck="true"># print soup.prettify()</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'input[type="password"]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#  [&lt;input name="ps" type="password"/>]</span><span class="token comment" spellcheck="true"># soup.select('p a[href="http://example.com/elsie"]')</span></code></pre><h3 id="获取标签文本内容"><a href="#获取标签文本内容" class="headerlink" title="获取标签文本内容"></a>获取标签文本内容</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoupbody <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;span class="w">&lt;b>挡泥&lt;/b>&lt;/span>&lt;span id="r">老路&lt;/span> """</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>body<span class="token punctuation">,</span> features<span class="token operator">=</span><span class="token string">'html.parser'</span><span class="token punctuation">)</span>resu <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>resu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;class 'bs4.element.Tag'></span><span class="token comment" spellcheck="true"># bs4.element.Tag.get_text()  # Get all child strings, concatenated using the given separator.</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 挡泥</span><span class="token comment" spellcheck="true"># 获取文本节点三种方式都可以：</span><span class="token comment" spellcheck="true"># resu[0].string  </span><span class="token comment" spellcheck="true"># resu[0].text   </span><span class="token comment" spellcheck="true"># resu[0].get_text()  </span></code></pre><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>和<code>xml</code>的地位不相上下，很厉害。<code>Json</code>在线解析网站：<a href="http://www.json.cn/#" target="_blank" rel="noopener">http://www.json.cn/#</a><br><code>json</code>简单说就是<code>javascript</code>中的对象和数组，所以这两种结构就是对象和数组两种结构，通过这两种结构可以表示各种复杂的结构<br><code>json</code>模块提供了四个功能：<code>dumps</code>、<code>dump</code>、<code>loads</code>、<code>load</code>，用于字符串 和 <code>python</code>数据类型间进行转换。</p><ol><li><code>loads</code><br><code>Json</code>格式字符串解码转换成<code>Python</code>对象</li></ol><ul><li>JSON object ==&gt; Python dict</li><li>JSON array  ==&gt; Python list</li><li>JSON string ==&gt; Python unicode</li><li>JSON number(int)  ==&gt; Python int,long</li><li>JSON number(real) ==&gt; Python float</li><li>JSON true ==&gt; Python True</li><li>JSON false  ==&gt; Python False</li><li>JSON null  ==&gt; Python None</li></ul><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span>  jsonjstr <span class="token operator">=</span> <span class="token string">'{"city": "北京", "name": "大猫"}'</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>jstr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;class 'dict'></span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>jstr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'city': '北京', 'name': '大猫'}</span></code></pre><ol start="2"><li><code>dumps</code><br>把一个<code>Python</code>对象编码转换成Json字符串，返回一个<code>str</code>对象。<br>转换的规则，刚好和上面的相反。</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span>  jsonjstr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"city"</span><span class="token punctuation">:</span> <span class="token string">"北京"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"大猫"</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>jstr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;class 'str'></span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>jstr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {"city": "\u5317\u4eac", "name": "\u5927\u732b"}</span><span class="token comment" spellcheck="true"># json.dumps() 序列化时默认使用的ascii编码</span><span class="token comment" spellcheck="true"># 添加参数 ensure_ascii=False 禁用ascii编码，按utf-8编码</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>jstr<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># &lt;class 'str'></span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>jstr<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {"city": "北京", "name": "大猫"}</span></code></pre><p>另外的<code>dump</code>、<code>load</code>就不介绍了，是操作文件的。下面就介绍解析<code>JSON</code>文件的<code>JsonPath</code></p><h3 id="JsonPath"><a href="#JsonPath" class="headerlink" title="JsonPath"></a>JsonPath</h3><p><code>JsonPath</code> 是一种信息抽取类库，是从<code>JSON</code>文档中抽取指定信息的工具，提供多种语言实现版本，包括：<code>Javascript</code>, <code>Python</code>， <code>PHP</code> 和 <code>Java</code>。<br>下载地址：<a href="https://pypi.python.org/pypi/jsonpath" target="_blank" rel="noopener">https://pypi.python.org/pypi/jsonpath</a><br>安装方法：点击<code>Download URL</code>链接下载<code>jsonpath</code>，解压之后执行<code>python setup.py install</code><br>官方文档：<a href="http://goessner.net/articles/JsonPath" target="_blank" rel="noopener">http://goessner.net/articles/JsonPath</a><br>由于我使用的是<code>Pycharm</code>工具，比较方便，直接设置中安装就可以了。<br><code>JsonPath</code>与<code>XPath</code>语法对比：</p><table><thead><tr><th style="text-align:center">XPath</th><th>JSONPath</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>/</code></td><td><code>$</code></td><td>根节点</td></tr><tr><td style="text-align:center"><code>.</code></td><td><code>@</code></td><td>现行节点</td></tr><tr><td style="text-align:center"><code>/</code></td><td><code>.</code>or<code>[]</code></td><td>取子节点</td></tr><tr><td style="text-align:center"><code>..</code></td><td>n/a</td><td>取父节点，Jsonpath未支持</td></tr><tr><td style="text-align:center"><code>//</code></td><td><code>..</code></td><td>就是不管位置，选择所有符合条件的条件</td></tr><tr><td style="text-align:center"><code>\*</code></td><td><code>\*</code></td><td>匹配所有元素节点</td></tr><tr><td style="text-align:center"><code>@</code></td><td>n/a</td><td>根据属性访问，Json不支持，因为Json是个Key-value递归结构，不需要。</td></tr><tr><td style="text-align:center"><code>[]</code></td><td><code>[]</code></td><td>迭代器标示（可以在里边做简单的迭代操作，如数组下标，根据内容选值等）</td></tr><tr><td style="text-align:center">|</td><td><code>[,]</code></td><td>支持迭代器中做多选。</td></tr><tr><td style="text-align:center"><code>[]</code></td><td><code>?()</code></td><td>支持过滤操作.</td></tr><tr><td style="text-align:center">n/a</td><td><code>()</code></td><td>支持表达式计算</td></tr><tr><td style="text-align:center"><code>()</code></td><td>n/a</td><td>分组，JsonPath不支持</td></tr></tbody></table><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>以<a href="http://www.lagou.com/lbs/getAllCitySearchLabels.json" target="_blank" rel="noopener">http://www.lagou.com/lbs/getAllCitySearchLabels.json</a> 为例。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span>urlopen<span class="token keyword">import</span> jsonpath<span class="token keyword">import</span> jsonheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span><span class="token punctuation">}</span>request <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://www.lagou.com/lbs/getAllCitySearchLabels.json"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>page <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(page)</span><span class="token comment" spellcheck="true"># 把json格式字符串转换成python对象</span>jsonobj <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从根节点开始，匹配name节点</span>resu <span class="token operator">=</span> jsonpath<span class="token punctuation">.</span>jsonpath<span class="token punctuation">(</span>jsonobj<span class="token punctuation">,</span> <span class="token string">'$..name'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resu<span class="token punctuation">)</span></code></pre><h2 id="案例：爬取主页中的内容"><a href="#案例：爬取主页中的内容" class="headerlink" title="案例：爬取主页中的内容"></a>案例：爬取主页中的内容</h2><p>要求：</p><ul><li>使用requests获取页面信息，用XPath / re 做数据提取</li><li>获取每个帖子里的标题、标题链接、发文日期、字数统计、缩略内容</li><li>保存到 json 文件内</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> Request<span class="token punctuation">,</span>urlopen<span class="token keyword">import</span> json<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etreeheaders <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36"</span><span class="token punctuation">}</span>request <span class="token operator">=</span> Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">"http://127.0.0.1:4000"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>response <span class="token operator">=</span> urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span>page <span class="token operator">=</span> response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token operator">=</span>page<span class="token punctuation">)</span>articles <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="posts"]/article'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># for i in articles:</span><span class="token comment" spellcheck="true">#     print(etree.tostring(i, encoding='utf-8').decode('utf-8'))</span><span class="token keyword">for</span> article <span class="token keyword">in</span> articles<span class="token punctuation">:</span>    title <span class="token operator">=</span> article<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div/header/h2/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    link <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:4000"</span> <span class="token operator">+</span> article<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div/header/h2/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 标题、标题链接、发文日期、字数统计、缩略内容</span>    time <span class="token operator">=</span> article<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div/header/div/span[1]/time/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> article<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div/header/div/div/span[3]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> article<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//div/div[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">]</span>    file_content <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"title"</span><span class="token punctuation">:</span>title<span class="token punctuation">,</span>        <span class="token string">"link"</span><span class="token punctuation">:</span>link<span class="token punctuation">,</span>        <span class="token string">"time"</span><span class="token punctuation">:</span>time<span class="token punctuation">,</span>        <span class="token string">"count"</span><span class="token punctuation">:</span>count<span class="token punctuation">,</span>        <span class="token string">"content"</span><span class="token punctuation">:</span>content    <span class="token punctuation">}</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 转换字典成为json字符串</span>    <span class="token comment" spellcheck="true"># print(json.dumps(file_content,ensure_ascii=False).encode('utf-8').decode('utf-8'))</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"d:/a.json"</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>file_content<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span></code></pre><p>结果截图：<br><img src="/images/201906/2019-06-25_105226.jpg" alt="e"></p>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫初识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy-1 |  安装scrapy</title>
      <link href="/2019/06/scrapy-1/"/>
      <url>/2019/06/scrapy-1/</url>
      
        <content type="html"><![CDATA[<p>决定系统化的学习爬虫，使用Python实现。以下内容来自博客园、CSDN等。非原创。</p><h1 id="1、安装wheel（安装后，便支持通过wheel文件安装软件）"><a href="#1、安装wheel（安装后，便支持通过wheel文件安装软件）" class="headerlink" title="1、安装wheel（安装后，便支持通过wheel文件安装软件）"></a>1、安装wheel（安装后，便支持通过wheel文件安装软件）</h1><pre class=" language-text"><code class="language-text">pip3 install wheel</code></pre><h1 id="2、安装lxml、pyopenssl"><a href="#2、安装lxml、pyopenssl" class="headerlink" title="2、安装lxml、pyopenssl"></a>2、安装lxml、pyopenssl</h1><p>lxml：解析XML的库，很强大，做爬虫BS4,selenium,XPATH都会用到</p><pre class=" language-text"><code class="language-text">pip3 install lxmlpip3 install pyopenssl</code></pre><h1 id="3、安装pywin32"><a href="#3、安装pywin32" class="headerlink" title="3、安装pywin32"></a>3、安装pywin32</h1><p>进入<a href="https://sourceforge.net/projects/pywin32/files/pywin32/" target="_blank" rel="noopener">https://sourceforge.net/projects/pywin32/files/pywin32/</a><br>下载与已安装python版本对应的pywin64安装包，例如python3.4 64位对应的安装包为pywin32-218.win-amd64-py3.4.exe，下载完成后一直next安装。<br>运行cmd，然后输入python ，可以看见python的版本以及是多少位<br>我的如下：</p><pre class=" language-text"><code class="language-text">Python 3.6.0 (v3.6.0:41df79263a11, Dec 23 2016, 08:06:12) [MSC v.1900 64 bit (AMD64)] on win32</code></pre><p>我是python3.6， 是32位的。找到所需的pywin32所在页：<a href="https://sourceforge.net/projects/pywin32/files/pywin32/Build%20220/" target="_blank" rel="noopener">https://sourceforge.net/projects/pywin32/files/pywin32/Build%20220/</a><br>我选择的是：pywin32-220.win32-py3.6.exe（32位）<br>而不是：pywin32-220.win-amd64-py3.6.exe（64位）<br>然后我们开始安装：<br>运行我们下载的pywin32-220.win-amd64-py3.6.exe，以完成安装。</p><h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p>import win32api<br>然后很不幸，报错了。<br>报错:ImportError: DLL load failed: %1 不是有效的 Win32 应用程序</p><p>尝试着解决：<br>在python包的页面中：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pywin32</a><br>我看见了pywin32的包，故而也是可以用pip来安装的。<br>故而我们删除之前安装的东西，也就是在python安装目录中删除与pywin32相关的文件，<br>我的在：E:\python\Lib\site-packages，然后删除相关目录和文件后，在cmd中执行：</p><pre class=" language-text"><code class="language-text">C:\Users\o\Downloads>pip3 install pywin32Collecting pywin32  Downloading https://files.pythonhosted.org/packages/b2/1a/7727b406391b0178b6ccb7e447e963df5ebf1ce9e0f615fc6ce23b6f6753/pywin32-224-cp36-cp36m-win_amd64.whl (9.1MB)     |████████████████████████████████| 9.1MB 61kB/sInstalling collected packages: pywin32Successfully installed pywin32-224</code></pre><h1 id="4、下载twisted"><a href="#4、下载twisted" class="headerlink" title="4、下载twisted"></a>4、下载twisted</h1><p>下载twisted的wheel文件：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a><br>打开链接，下载，然后安装：</p><blockquote><p>Twisted‑19.2.0‑cp36‑cp36m‑win32.whl<br>Twisted-19.2.0-cp36-cp36m-win_amd64.whl</p></blockquote><p>cp后面跟的数字是python的版本，比如现在我的python版本是3.6，那么需要下载cp36；<br>如果还提示不支持platform，就把win32和win64的版本都下下来分别试一下。<br>我这里安装的是win32.whl</p><pre class=" language-text"><code class="language-text">C:\Users\o>pip3 install C:\Users\o\Downloads\Twisted-19.2.0-cp36-cp36m-win_amd64.whlSuccessfully installed Twisted-19.2.0</code></pre><h1 id="5、安装scrapy"><a href="#5、安装scrapy" class="headerlink" title="5、安装scrapy"></a>5、安装scrapy</h1><pre class=" language-text"><code class="language-text">C:\Users\o>pip3 install scrapyInstalling collected packages: pyasn1, pyasn1-modules, service-identity, queuelib, scrapySuccessfully installed pyasn1-0.4.5 pyasn1-modules-0.2.5 queuelib-1.5.0 scrapy-1.6.0 service-identity-18.1.0</code></pre><h1 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h1><pre class=" language-text"><code class="language-text">C:\Users\o>scrapyScrapy 1.6.0 - no active projectUsage:  scrapy <command> [options] [args]</code></pre><hr><p>参考：<br>链接1：<a href="https://segmentfault.com/a/1190000010377113" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010377113</a><br>链接2：<a href="https://www.cnblogs.com/liluning/p/8338219.html" target="_blank" rel="noopener">https://www.cnblogs.com/liluning/p/8338219.html</a><br>下载pywin32地址：<a href="https://sourceforge.net/projects/pywin32/files/pywin32/Build%20220/" target="_blank" rel="noopener">https://sourceforge.net/projects/pywin32/files/pywin32/Build%20220/</a><br>下载twisted地址：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a></p>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-922 | 按奇偶排序数组 II</title>
      <link href="/2019/06/leetcode-922/"/>
      <url>/2019/06/leetcode-922/</url>
      
        <content type="html"><![CDATA[<h1 id="922-按奇偶排序数组-II"><a href="#922-按奇偶排序数组-II" class="headerlink" title="922. 按奇偶排序数组 II"></a>922. 按奇偶排序数组 II</h1><p>给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。</p><p>对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。</p><p>你可以返回任何满足上述条件的数组作为答案。</p><blockquote><p><span>示例 1：</span><br>输入：[4,2,5,7]<br>输出：[4,5,2,7]<br>解释：[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。</p></blockquote><blockquote><p><span>提示：</span><br>2 &lt;= A.length &lt;= 20000<br>A.length % 2 == 0<br>0 &lt;= A[i] &lt;= 1000</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>转化一下就是奇数位置放置奇数，偶数位置放置偶数的列表。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortArrayByParityII</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: List[int]        :rtype: List[int]        """</span>        ou <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> A <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>        ji <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> A <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">]</span>        resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        oui <span class="token operator">=</span> jii <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> oui <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>ou<span class="token punctuation">)</span><span class="token punctuation">:</span>                    resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ou<span class="token punctuation">[</span>oui<span class="token punctuation">]</span><span class="token punctuation">)</span>                    oui <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> jii <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>ji<span class="token punctuation">)</span><span class="token punctuation">:</span>                    resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ji<span class="token punctuation">[</span>jii<span class="token punctuation">]</span><span class="token punctuation">)</span>                    jii<span class="token operator">+=</span><span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> resu</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 252 ms, 在Sort Array By Parity II的Python提交中击败了69.54% 的用户<br>内存消耗 : 13.6 MB, 在Sort Array By Parity II的Python提交中击败了37.28% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>252 ms</td><td>13.6MB</td><td>python</td></tr></table>## 优化]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-999 |  车的可用捕获量</title>
      <link href="/2019/06/leetcode-999/"/>
      <url>/2019/06/leetcode-999/</url>
      
        <content type="html"><![CDATA[<h1 id="999-车的可用捕获量"><a href="#999-车的可用捕获量" class="headerlink" title="999. 车的可用捕获量"></a>999. 车的可用捕获量</h1><p>在一个 8 x 8 的棋盘上，有一个白色车（rook）。也可能有空方块，白色的象（bishop）和黑色的卒（pawn）。它们分别以字符 “R”，“.”，“B” 和 “p” 给出。大写字符表示白棋，小写字符表示黑棋。</p><p>车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。另外，车不能与其他友方（白色）象进入同一个方格。</p><p>返回车能够在一次移动中捕获到的卒的数量。</p><p><span>示例 1：</span><br><img src="/images/201906/1253_example_1_improved.PNG" alt="e"></p><blockquote><p>输入：<br>[[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”p”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”R”,”.”,”.”,”.”,”p”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”p”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”]]<br>输出：3<br>解释：<br>在本例中，车能够捕获所有的卒。</p></blockquote><p><span>示例 2：</span><br><img src="/images/201906/1253_example_2_improved.PNG" alt="e"></p><blockquote><p>输入：<br>[[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”p”,”p”,”p”,”p”,”p”,”.”,”.”],[“.”,”p”,”p”,”B”,”p”,”p”,”.”,”.”],[“.”,”p”,”B”,”R”,”B”,”p”,”.”,”.”],[“.”,”p”,”p”,”B”,”p”,”p”,”.”,”.”],[“.”,”p”,”p”,”p”,”p”,”p”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”]]<br>输出：0<br>解释：<br>象阻止了车捕获任何卒。</p></blockquote><p><span>示例 3：</span><br><img src="/images/201906/1253_example_3_improved.PNG" alt="e"></p><blockquote><p>输入：<br>[[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”p”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”p”,”.”,”.”,”.”,”.”],[“p”,”p”,”.”,”R”,”.”,”p”,”B”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”B”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”p”,”.”,”.”,”.”,”.”],[“.”,”.”,”.”,”.”,”.”,”.”,”.”,”.”]]<br>输出：3<br>解释：<br>车可以捕获位置 b5，d6 和 f5 的卒。</p></blockquote><blockquote><p><span>提示：</span><br>board.length == board[i].length == 8<br>board[i][j] 可以是 ‘R’，’.’，’B’ 或 ‘p’<br>只有一个格子上存在 board[i][j] == ‘R’</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>看着题目挺难得，认真读一下题就会发现其实就是判断白色车所在行列中，可以吃几个黑色的卒。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">numRookCaptures</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type board: List[List[str]]        :rtype: int        """</span>        <span class="token comment" spellcheck="true">#首先定位R所在的位置</span>        i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>        posx <span class="token punctuation">,</span> posy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'R'</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">True</span>                    posx <span class="token operator">=</span> i                    posy <span class="token operator">=</span> j                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                <span class="token keyword">break</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">#找到后R的位置就是[i][j]</span>        <span class="token comment" spellcheck="true">#然后需要判断所在行列</span>        <span class="token comment" spellcheck="true">#行方向</span>        i <span class="token punctuation">,</span> j <span class="token operator">=</span> posx<span class="token punctuation">,</span> posy        lcol <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> lcol <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>lcol<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>lcol<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">:</span>                count<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">break</span>            lcol<span class="token operator">-=</span><span class="token number">1</span>        rcol <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">while</span> rcol <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rcol<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>rcol<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">break</span>            rcol <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">#列方向</span>        trow <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span> trow <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> board<span class="token punctuation">[</span>trow<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> board<span class="token punctuation">[</span>trow<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">:</span>                count<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">break</span>            trow <span class="token operator">-=</span> <span class="token number">1</span>        brow <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">while</span> brow <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> board<span class="token punctuation">[</span>brow<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'B'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> board<span class="token punctuation">[</span>brow<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"p"</span><span class="token punctuation">:</span>                count<span class="token operator">+=</span><span class="token number">1</span>                <span class="token keyword">break</span>            brow <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> count</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 32 ms, 在Available Captures for Rook的Python提交中击败了88.14% 的用户<br>内存消耗 : 11.6 MB, 在Available Captures for Rook的Python提交中击败了21.05% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>32 ms</td><td>11.6MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1002 | 查找常用字符 I</title>
      <link href="/2019/06/leetcode-1002/"/>
      <url>/2019/06/leetcode-1002/</url>
      
        <content type="html"><![CDATA[<h1 id="1002-查找常用字符"><a href="#1002-查找常用字符" class="headerlink" title="1002. 查找常用字符"></a>1002. 查找常用字符</h1><p>给定仅有小写字母组成的字符串数组 A，返回列表中的每个字符串中都显示的全部字符（包括重复字符）组成的列表。例如，如果一个字符在每个字符串中出现 3 次，但不是 4 次，则需要在最终答案中包含该字符 3 次。</p><p>你可以按任意顺序返回答案。</p><blockquote><p><span>示例 1：</span><br>输入：[“bella”,”label”,”roller”]<br>输出：[“e”,”l”,”l”]<br><span>示例 2：</span><br>输入：[“cool”,”lock”,”cook”]<br>输出：[“c”,”o”]</p></blockquote><blockquote><p><span>提示：</span><br>*1 &lt;= A.length &lt;= 100<br>*1 &lt;= A[i].length &lt;= 100<br>*A[i][j] 是小写字母</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>取的是每个字符串都含有的字符，那么我们可以用任意一个字符串，逐位统计每个字符的个数，然后在每次遍历其余的字符串的时候，减去没有出现的就可以了。<br>最红还在的就是都有的。</p><p>这里我们不使用这种传统的方式，我们考虑python特有的集合特性，我们将数据封装成集合，然后简单的可以得出相同的字符，并且在每次判断的过程中统计字符的个数，然后就可以达到条件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">commonChars</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: List[str]        :rtype: List[str]        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#从这里开始列表的长度至少是2，这里我们可以拼凑出基础的子串</span>        base <span class="token operator">=</span> set<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>set<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> set<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 剩余的是相同的字符</span>        ele <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> base<span class="token punctuation">:</span>            n <span class="token operator">=</span> min<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            ele <span class="token operator">+=</span> n <span class="token operator">*</span> i        <span class="token keyword">if</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> ele            <span class="token comment" spellcheck="true">## a = t | s # t 和 s的并集</span>            <span class="token comment" spellcheck="true">##  b = t &amp; s # t 和 s的交集</span>            <span class="token comment" spellcheck="true">## c = t – s # 求差集（项在t中，但不在s中）</span>        <span class="token comment" spellcheck="true">#至少含有三项</span>        i <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>            base <span class="token operator">=</span> base <span class="token operator">&amp;</span> set<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            sele <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> base<span class="token punctuation">:</span>                n <span class="token operator">=</span> min<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> ele<span class="token punctuation">.</span>count<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>                sele <span class="token operator">+=</span> j <span class="token operator">*</span> n            ele <span class="token operator">=</span> sele            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> list<span class="token punctuation">(</span>ele<span class="token punctuation">)</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 44 ms, 在Find Common Characters的Python提交中击败了97.06% 的用户<br>内存消耗 : 11.9 MB, 在Find Common Characters的Python提交中击败了25.82% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>44 ms</td><td>11.9MB</td><td>python</td></tr></table>---<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">commonChars</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: List[str]        :rtype: List[str]        """</span>        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">not</span> A<span class="token punctuation">:</span>            <span class="token keyword">return</span> res        key<span class="token operator">=</span>set<span class="token punctuation">(</span>A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> key<span class="token punctuation">:</span>            minnum<span class="token operator">=</span>min<span class="token punctuation">(</span>a<span class="token punctuation">.</span>count<span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token keyword">for</span> a <span class="token keyword">in</span> A<span class="token punctuation">)</span>            res<span class="token operator">+=</span>minnum<span class="token operator">*</span>k        <span class="token keyword">return</span> res</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 44 ms, 在Find Common Characters的Python提交中击败了97.06% 的用户<br>内存消耗 : 11.9 MB, 在Find Common Characters的Python提交中击败了27.47% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>44 ms</td><td>11.9MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-561 }  数组拆分 I</title>
      <link href="/2019/06/leetcode-561/"/>
      <url>/2019/06/leetcode-561/</url>
      
        <content type="html"><![CDATA[<h1 id="561-数组拆分-I"><a href="#561-数组拆分-I" class="headerlink" title="561. 数组拆分 I"></a>561. 数组拆分 I</h1><p>给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。</p><blockquote><p><span>示例 3：</span><br>输入: [1,4,3,2]<br>输出: 4<br>解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4).</p></blockquote><blockquote><p><span>提示：</span><br>n 是正整数,范围在 [1, 10000].<br>数组中的元素范围在 [-10000, 10000].</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>由于是取两个数的二元组中的最小值，需要求和的最大值，也就是说当我们需要值最大的时候，而整个2n数组，最大值是一定抛弃的（因为min(a, b)），那么次大值必在其中。<br>不妨将之排序，从后到前组成二元组，此时绝壁是最大的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">arrayPairSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        i<span class="token punctuation">,</span> j  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            m <span class="token operator">=</span> min<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            sum <span class="token operator">+=</span> m            i <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span>            j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> sum</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 536 ms, 在Array Partition I的Python提交中击败了15.09% 的用户<br>内存消耗 : 14.1 MB, 在Array Partition I的Python提交中击败了35.37% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>536 ms</td><td>14.1MB</td><td>python</td></tr></table>## 优化由于我们已经确定了所取的位置的数据，所以我们可以直接取数<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">arrayPairSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        i <span class="token operator">=</span>  <span class="token number">1</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i <span class="token operator">+=</span> <span class="token number">2</span>        <span class="token keyword">return</span> sum</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 384 ms, 在Array Partition I的Python提交中击败了29.24% 的用户<br>内存消耗 : 14 MB, 在Array Partition I的Python提交中击败了39.74% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>384 ms</td><td>14MB</td><td>python</td></tr></table><h2 id="再次优化"><a href="#再次优化" class="headerlink" title="再次优化"></a>再次优化</h2><p>不难发现，解法还是不好，不难理解因为我们使用的是sort函数<br>我们不妨反过来理解一下，由于取次大，所以我们需要取最小<br>故而我们都不需要逆排序，直接排序然后计算就可以了</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">arrayPairSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> sum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">=</span>  <span class="token number">0</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i <span class="token operator">+=</span> <span class="token number">2</span>        <span class="token keyword">return</span> sum</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 352 ms, 在Array Partition I的Python提交中击败了85.38% 的用户<br>内存消耗 : 14.1 MB, 在Array Partition I的Python提交中击败了32.31% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>352 ms</td><td>14.1MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1051 | 高度检查器</title>
      <link href="/2019/06/leetcode-1051/"/>
      <url>/2019/06/leetcode-1051/</url>
      
        <content type="html"><![CDATA[<h1 id="1051-高度检查器"><a href="#1051-高度检查器" class="headerlink" title="1051. 高度检查器"></a>1051. 高度检查器</h1><p>学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。</p><p>请你返回至少有多少个学生没有站在正确位置数量。该人数指的是：能让所有学生以 非递减 高度排列的必要移动人数。</p><blockquote><p><span>示例：</span><br>输入：[1,1,4,2,1,3]<br>输出：3<br>解释：<br>高度为 4、3 和最后一个 1 的学生，没有站在正确的位置。</p></blockquote><blockquote><p><span>提示：</span><br>1 &lt;= heights.length &lt;= 100<br>1 &lt;= heights[i] &lt;= 100</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>不妨将用例排序：[1，1，1，2，3，4]<br>移动最少的人数，使得排列的高度是递增的，故而找到不合法的元素，直接交换。<br>因为如果学生高度是递增的，在只考虑学生高度的时候，也就是判断是否在最终位置上。<br>如果在最终位置上，我们不需要移动元素，而移动的元素一定是不在最终位置上，也就是需要移动的人数。<br>这里我们亦可以使用排序后的列表，和原来的列表进行比较。<br>不同的位置就是需要移动的位置</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">heightChecker</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heights<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type heights: List[int]        :rtype: int        """</span>        count <span class="token operator">=</span> <span class="token number">0</span>        cop <span class="token operator">=</span> heights<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        cop<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        j <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> cop<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">!=</span>heights<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> count</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 44 ms, 在Height Checker的Python3提交中击败了88.89% 的用户<br>内存消耗 : 13.1 MB, 在Height Checker的Python3提交中击败了100.00% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>44 ms</td><td>13.1MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-509 | 斐波那契数</title>
      <link href="/2019/06/leetcode-509/"/>
      <url>/2019/06/leetcode-509/</url>
      
        <content type="html"><![CDATA[<h1 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a>509. 斐波那契数</h1><p>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><blockquote><p>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</p></blockquote><p>给定 N，计算 F(N)。</p><blockquote><p><span>示例 1：</span><br>输入：2<br>输出：1<br>解释：F(2) = F(1) + F(0) = 1 + 0 = 1.<br><span>示例 2：</span><br>输入：3<br>输出：2<br>解释：F(3) = F(2) + F(1) = 1 + 1 = 2.<br><span>示例 3：</span><br>输入：4<br>输出：3<br>解释：F(4) = F(3) + F(2) = 2 + 1 = 3.</p></blockquote><blockquote><p><span>提示：</span><br>0 ≤ N ≤ 30</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>比较简单，按照规律操作。<br>第一种方法，我这里采用递归的方式。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type N: int        :rtype: int        """</span>        <span class="token keyword">if</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> N<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>N<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>N<span class="token number">-2</span><span class="token punctuation">)</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 968 ms, 在Fibonacci Number的Python提交中击败了21.76% 的用户<br>内存消耗 : 11.5 MB, 在Fibonacci Number的Python提交中击败了43.87% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>968 ms</td><td>11.5MB</td><td>python</td></tr></table>## 优化递归的方式，虽然容易理解，但是效率确实不高，这里我们改用循环来实现。<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type N: int        :rtype: int        """</span>        <span class="token keyword">if</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> N<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>        a <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>        switch <span class="token operator">=</span> <span class="token boolean">True</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> N <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> switch<span class="token punctuation">:</span>                a <span class="token operator">=</span> a <span class="token operator">+</span> b                resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span>                switch <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                b <span class="token operator">=</span> a <span class="token operator">+</span> b                resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span>                switch <span class="token operator">=</span> <span class="token boolean">True</span>            i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> resu<span class="token punctuation">[</span>N<span class="token punctuation">]</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 28 ms, 在Fibonacci Number的Python提交中击败了79.77% 的用户<br>内存消耗 : 11.8 MB, 在Fibonacci Number的Python提交中击败了26.77% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>28 ms</td><td>11.8MB</td><td>python</td></tr></table><h2 id="再次优化"><a href="#再次优化" class="headerlink" title="再次优化"></a>再次优化</h2><p>下面的方式更好，不用像我上面那样设置开关去判断这次计算的值应该放置在哪个位置，直接交换ab，就统一了计算，也就简化了代码。<br>同时不需要设置辅助的列表来存储数据，需要数列就是每一次b的值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type N: int        :rtype: int        """</span>        <span class="token keyword">if</span> N <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> N        a <span class="token operator">=</span> <span class="token number">0</span>        b <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> a <span class="token operator">+</span> b            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a        <span class="token keyword">return</span> b</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 20 ms, 在Fibonacci Number的Python提交中击败了93.89% 的用户<br>内存消耗 : 11.6 MB, 在Fibonacci Number的Python提交中击败了40.15% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>20 ms</td><td>11.6MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-905 | 按奇偶排序数组</title>
      <link href="/2019/06/leetcode-905/"/>
      <url>/2019/06/leetcode-905/</url>
      
        <content type="html"><![CDATA[<h1 id="905-按奇偶排序数组"><a href="#905-按奇偶排序数组" class="headerlink" title="905. 按奇偶排序数组"></a>905. 按奇偶排序数组</h1><p>给定一个非负整数数组 A，返回一个数组，在该数组中， A 的所有偶数元素之后跟着所有奇数元素。</p><p>你可以返回满足此条件的任何数组作为答案。</p><blockquote><p><span>示例：</span><br>输入：[3,1,2,4]<br>输出：[2,4,3,1]<br>输出 [4,2,3,1]，[2,4,1,3] 和 [4,2,1,3] 也会被接受。</p></blockquote><blockquote><p><span>提示：</span><br>1 &lt;= A.length &lt;= 5000<br>0 &lt;= A[i] &lt;= 5000</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>比较简单，不妨逐位判断，偶数前置。<br>为了操作方便，不妨将之分成两个部分，用两个列表存储。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortArrayByParity</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: List[int]        :rtype: List[int]        """</span>        ou <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ji <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                ou<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ji<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> ou<span class="token operator">+</span>ji</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 136 ms, 在Sort Array By Parity的Python提交中击败了19.30% 的用户<br>内存消耗 : 12.2 MB, 在Sort Array By Parity的Python提交中击败了35.03% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>136 ms</td><td>12.2MB</td><td>python</td></tr></table>## 简化``` pythonclass Solution(object):    def sortArrayByParity(self, A):        """        :type A: List[int]        :rtype: List[int]        """        return [i for i in A if i % 2 ==0] + [i for i in A if i % 2 != 0]```<p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 92 ms, 在Sort Array By Parity的Python提交中击败了79.82% 的用户<br>内存消耗 : 12.2 MB, 在Sort Array By Parity的Python提交中击败了36.06% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>92 ms</td><td>12.2MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-977 | 有序数组的平方</title>
      <link href="/2019/06/leetcode-977/"/>
      <url>/2019/06/leetcode-977/</url>
      
        <content type="html"><![CDATA[<h1 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h1><p>给定一个按非递减顺序排序的整数数组 A，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。</p><blockquote><p><span>例如</span><br>输入：[-4,-1,0,3,10]<br>输出：[0,1,9,16,100]<br><span>例如</span><br>输入：[-7,-3,2,3,11]<br>输出：[4,9,9,49,121]</p></blockquote><blockquote><p><span>提示：</span></p><ul><li>1 &lt;= A.length &lt;= 10000</li><li>-10000 &lt;= A[i] &lt;= 10000</li><li>A 已按非递减顺序排序。</li></ul></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按照题意操作就可以了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: List[int]        :rtype: List[int]        """</span>        resu <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">*</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">]</span>        resu<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> resu</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 240 ms, 在Squares of a Sorted Array的Python提交中击败了97.70% 的用户<br>内存消耗 : 13.8 MB, 在Squares of a Sorted Array的Python提交中击败了20.62% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>240 ms</td><td>13.8MB</td><td>python</td></tr></table>## 简化<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: List[int]        :rtype: List[int]        """</span>        <span class="token keyword">return</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token operator">*</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> A<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 244 ms, 在Squares of a Sorted Array的Python提交中击败了95.74% 的用户<br>内存消耗 : 13.7 MB, 在Squares of a Sorted Array的Python提交中击败了27.20% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>244 ms</td><td>13.7MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-709 | 转换成小写字母</title>
      <link href="/2019/06/leetcode-709/"/>
      <url>/2019/06/leetcode-709/</url>
      
        <content type="html"><![CDATA[<h1 id="709-转换成小写字母"><a href="#709-转换成小写字母" class="headerlink" title="709. 转换成小写字母"></a>709. 转换成小写字母</h1><p>实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p><blockquote><p><span>例如</span><br>输入: “Hello”<br>输出: “hello”</p></blockquote><blockquote><p><span>例如</span><br>输入: “here”<br>输出: “here”</p></blockquote><blockquote><p><span>例如</span><br>输入: “LOVELY”<br>输出: “lovely”</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按照题意操作就可以了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type str: str        :rtype: str        """</span>        resu <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> str<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> i<span class="token punctuation">.</span>islower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>               i <span class="token operator">=</span> i<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>            resu <span class="token operator">+=</span> i        <span class="token keyword">return</span> resu</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 24 ms, 在To Lower Case的Python提交中击败了86.17% 的用户<br>内存消耗 : 11.7 MB, 在To Lower Case的Python提交中击败了28.09% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>24 ms</td><td>11.7MB</td><td>python</td></tr></table>## 简化<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type str: str        :rtype: str        """</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 16 ms, 在To Lower Case的Python提交中击败了99.21% 的用户<br>内存消耗 : 11.9 MB, 在To Lower Case的Python提交中击败了5.06% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>16 ms</td><td>11.9MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-832 | 翻转图像</title>
      <link href="/2019/06/leetcode-832/"/>
      <url>/2019/06/leetcode-832/</url>
      
        <content type="html"><![CDATA[<h1 id="832-翻转图像"><a href="#832-翻转图像" class="headerlink" title="832. 翻转图像"></a>832. 翻转图像</h1><p>给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。</p><p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。</p><p>反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。</p><blockquote><p><span>例如</span><br>输入: [[1,1,0],[1,0,1],[0,0,0]]<br>输出: [[1,0,0],[0,1,0],[1,1,1]]<br>解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；<br>     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]</p></blockquote><blockquote><p><span>例如</span><br>输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]<br>输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]<br>解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；<br>     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p></blockquote><blockquote><p><span>说明</span><br>1 &lt;= A.length = A[0].length &lt;= 20<br>0 &lt;= A[i][j] &lt;= 1</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>按照题意操作就可以了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">flipAndInvertImage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: List[List[int]]        :rtype: List[List[int]]        """</span>        <span class="token comment" spellcheck="true">#遍历一次，得到列表</span>        i <span class="token operator">=</span> <span class="token number">0</span>        resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>            ele <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            ele<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 反转行</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>            j <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">:</span>                ele<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token number">1</span> <span class="token keyword">if</span> ele<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 写入进去</span>            resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ele<span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> resu </code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 48 ms, 在Flipping an Image的Python提交中击败了88.93% 的用户<br>内存消耗 : 11.7 MB, 在Flipping an Image的Python提交中击败了30.61% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>48 ms</td><td>11.7MB</td><td>python</td></tr></table>## 简化<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">flipAndInvertImage</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: List[List[int]]        :rtype: List[List[int]]        """</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">1</span>        <span class="token keyword">return</span> A</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 48 ms, 在Flipping an Image的Python提交中击败了88.93% 的用户<br>内存消耗 : 11.5 MB, 在Flipping an Image的Python提交中击败了42.86% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>48 ms</td><td>11.5MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-448 | 找到所有数组中消失的数字</title>
      <link href="/2019/06/leetcode-448/"/>
      <url>/2019/06/leetcode-448/</url>
      
        <content type="html"><![CDATA[<h1 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="448. 找到所有数组中消失的数字"></a>448. 找到所有数组中消失的数字</h1><p>给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。</p><p>找到所有在 [1, n] 范围之间没有出现在数组中的数字。<br>您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。</p><blockquote><p><span>例如</span><br>输入:<br>[4,3,2,7,8,2,3,1]<br>输出:<br>[5,6]</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>很简单的题目，但是关键是不要使用额外的空间。<br>在解答区，看见了下面两个比较好的解题方法。值得学习。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findDisappearedNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[int]        """</span>        s <span class="token operator">=</span> set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> s<span class="token punctuation">]</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 416 ms, 在Find All Numbers Disappeared in an Array的Python提交中击败了98.48% 的用户<br>内存消耗 : 21.2 MB, 在Find All Numbers Disappeared in an Array的Python提交中击败了8.02% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>416 ms</td><td>21.2MB</td><td>python</td></tr></table>## 方式二集合特性，很牛皮的解答方式。<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findDisappearedNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[int]        """</span>        <span class="token keyword">return</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>    </code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 412 ms, 在Find All Numbers Disappeared in an Array的Python提交中击败了99.49% 的用户<br>内存消耗 : 20.5 MB, 在Find All Numbers Disappeared in an Array的Python提交中击败了17.90% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>412 ms</td><td>20.5MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-442 | 数组中重复的数据</title>
      <link href="/2019/06/leetcode-442/"/>
      <url>/2019/06/leetcode-442/</url>
      
        <content type="html"><![CDATA[<h1 id="442-数组中重复的数据"><a href="#442-数组中重复的数据" class="headerlink" title="442. 数组中重复的数据"></a>442. 数组中重复的数据</h1><p>给定一个整数数组 a，其中1 ≤ a[i] ≤ n （n为数组长度）, 其中有些元素出现两次而其他元素出现一次。</p><p>找到所有出现两次的元素。</p><p>你可以不用到任何额外空间并在O(n)时间复杂度内解决这个问题吗？</p><blockquote><p><span>例如</span><br>输入:<br>[4,3,2,7,8,2,3,1]<br>输出:<br>[2,3]</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>比较传统的解法，就是先排序，然后定义前后两个指针，然后判断两个指针的位置之间的距离，然后据此判断是否元素的个数是2.加入结果集合中即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[int]        """</span>        <span class="token comment" spellcheck="true">#边界处理</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#len > 2</span>        i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>        flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                j<span class="token operator">+=</span><span class="token number">1</span>                <span class="token comment" spellcheck="true">#由于两个数有可能在最后，所以这里需要一个开关</span>                flag <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token boolean">False</span>                step <span class="token operator">=</span> j <span class="token operator">-</span> i                <span class="token keyword">if</span> step <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                    resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> j        <span class="token comment" spellcheck="true">#边界，如：[1, 1, 2, 3, 4, 5, 7, 9, 10, 10]，i指向第一个10，j退出后指向len(nums)位置</span>        step <span class="token operator">=</span> j <span class="token operator">-</span> i        <span class="token keyword">if</span> flag <span class="token operator">and</span> step <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> resu</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 580 ms, 在Find All Duplicates in an Array的Python提交中击败了21.36% 的用户<br>内存消耗 : 18.8 MB, 在Find All Duplicates in an Array的Python提交中击败了29.35% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>580 ms</td><td>18.8MB</td><td>python</td></tr></table>## 另一种思路换种思路，我们还是使用两个指针，但是此时我们使用一个前，一个后，然后指针同步移动，搭配一个开关，加上一个计数变量，然后就可以做到，代码如下：``` pythonclass Solution(object):    def findDuplicates(self, nums):        """        :type nums: List[int]        :rtype: List[int]        """        #边界处理        if len(nums)<2: return [] if len(nums)="=" 2: nums[0]="=" nums[1]: [nums[0]] else: <pre><code>    nums.sort()    resu = []    #不妨使用2个指针同步遍历    i , j = 0, 1    flag = False    count = 0    while j &lt; len(nums):        if nums[i] == nums[j]:            flag = True            count += 1        else:            if flag and count &lt; 2:                resu.append(nums[i])            flag = False            count = 0        #指针同步移动        i = j        j = j + 1    #边界判断    if flag and count &lt; 2:        resu.append(nums[i])    return resu</code><pre><code>&lt;span class=&quot;title2&quot;&gt;结果：&lt;/span&gt;&gt;执行用时 : 500 ms, 在Find All Duplicates in an Array的Python提交中击败了48.54% 的用户内存消耗 : 19 MB, 在Find All Duplicates in an Array的Python提交中击败了14.13% 的用户&lt;table&gt;&lt;tr&gt;&lt;td&gt;提交时间&lt;/td&gt;&lt;td&gt;状态&lt;/td&gt;&lt;td&gt;执行用时&lt;/td&gt;&lt;td&gt;内存消耗&lt;/td&gt;&lt;td&gt;语言&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;几秒前&lt;/td&gt;&lt;td&gt;通过&lt;/td&gt;&lt;td&gt;500 ms&lt;/td&gt;&lt;td&gt;19MB&lt;/td&gt;&lt;td&gt;python&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></pre></2:>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-119 | 杨辉三角II</title>
      <link href="/2019/06/leetcode-119/"/>
      <url>/2019/06/leetcode-119/</url>
      
        <content type="html"><![CDATA[<h1 id="119-杨辉三角II"><a href="#119-杨辉三角II" class="headerlink" title="119. 杨辉三角II"></a>119. 杨辉三角II</h1><p>给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。</p><blockquote><p><span>例如</span><br>输入: 4<br>输出:<br>[1,4,6,4,1]</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>不难发现，是从0开始的。<br>其实这个问题我们在118中已经解决了，因为当时我用的是一个base的列表，然后直接返回该列表就可以了。我们不妨修改一下上一题的程序。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getRow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rowIndex<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type rowIndex: int        :rtype: List[int]        """</span>        numRows <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> rowIndex        <span class="token comment" spellcheck="true">#基础情况</span>        <span class="token keyword">if</span> numRows <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">elif</span> numRows <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#其他情况，以[1,1]为基础计算</span>        base <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#不妨假设是3，此时，中间计算一次，故而从第三行开始，每一行计算的次数是：1 2 3 4 5 依次增加</span>        <span class="token comment" spellcheck="true">#而需要计算的行数row = numrows - 2</span>        row <span class="token operator">=</span> numRows <span class="token operator">-</span> <span class="token number">2</span>        i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> row<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#按照行计算，循环的次数一次增加</span>            <span class="token comment" spellcheck="true">#第一行计算一次，第二行计算两次，刚好对应</span>            j <span class="token operator">=</span> <span class="token number">0</span>            temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">:</span>                ele <span class="token operator">=</span> base<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> base<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ele<span class="token punctuation">)</span>                j<span class="token operator">+=</span><span class="token number">1</span>            temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            base <span class="token operator">=</span> temp            i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> base</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 16 ms, 在Pascal’s Triangle II的Python提交中击败了98.96% 的用户<br>内存消耗 : 11.6 MB, 在Pascal’s Triangle II的Python提交中击败了30.99% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>16 ms</td><td>11.6MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-118 | 杨辉三角</title>
      <link href="/2019/06/leetcode-118/"/>
      <url>/2019/06/leetcode-118/</url>
      
        <content type="html"><![CDATA[<h1 id="118-杨辉三角"><a href="#118-杨辉三角" class="headerlink" title="118. 杨辉三角"></a>118. 杨辉三角</h1><p>给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。</p><p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p><blockquote><p><span>例如</span><br>输入: 5<br>输出:<br>[<br>     [1],<br>    [1,1],<br>   [1,2,1],<br>  [1,3,3,1],<br> [1,4,6,4,1]<br>]</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>不妨使用二维数组存放数据，初始化的数据均是0，然后我们按照规则填入数据<br>当h=4，行4，列7=2*4-1，首个1在7/2=3，然后开始计算</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numRows<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type numRows: int        :rtype: List[List[int]]        """</span>        <span class="token keyword">if</span> numRows <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> numRows <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        cols <span class="token operator">=</span> numRows <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span>        rows <span class="token operator">=</span> numRows        i <span class="token operator">=</span> <span class="token number">0</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>rows<span class="token punctuation">:</span>            j <span class="token operator">=</span> <span class="token number">0</span>            cli <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>cols<span class="token punctuation">:</span>                cli<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                j<span class="token operator">+=</span><span class="token number">1</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cli<span class="token punctuation">)</span>            i<span class="token operator">+=</span><span class="token number">1</span>        li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>numRows<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>        li<span class="token punctuation">[</span>numRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        li<span class="token punctuation">[</span>numRows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>cols<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        col <span class="token operator">=</span> row <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> row <span class="token operator">&lt;</span> rows<span class="token punctuation">:</span>            col <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> col <span class="token operator">&lt;</span> cols<span class="token number">-1</span><span class="token punctuation">:</span>                li<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>row<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> li<span class="token punctuation">[</span>row<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>                col <span class="token operator">+=</span> <span class="token number">1</span>            row <span class="token operator">+=</span> <span class="token number">1</span>        resu <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        col <span class="token operator">=</span> row <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> row <span class="token operator">&lt;</span> rows<span class="token punctuation">:</span>            col <span class="token operator">=</span> <span class="token number">0</span>            sr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> col <span class="token operator">&lt;</span> cols<span class="token punctuation">:</span>                <span class="token keyword">if</span> li<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                    sr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>                col <span class="token operator">+=</span> <span class="token number">1</span>            resu<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sr<span class="token punctuation">)</span>            row <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> resu</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 24 ms, 在Pascal’s Triangle的Python提交中击败了85.93% 的用户<br>内存消耗 : 11.7 MB, 在Pascal’s Triangle的Python提交中击败了23.85% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>24 ms</td><td>11.7MB</td><td>python</td></tr></table>---上面我自己用的比较low，是以前使用C语言数组方式来操作的。我们看看别个的代码：``` pythonclass Solution(object):    def generate(self, numRows):        """        :type numRows: int        :rtype: List[List[int]]        """        res=[]        if numRows == 0:            return res<pre><code>    for i in range(1,numRows+1):        if i == 1:            res.append([1])        if i == 2:            res.append([1,1])        if i &gt; 2:            m = [1]            for j in range(1,i-1):                m.append(res[i-2][j-1]+res[i-2][j])            m.append(1)            res.append(m)    return res</code></pre><pre><code>上面的程序很容易理解，下标从1开始的。不过我还是模拟了一个，如下：小标开始从0开始计算，然后做了注释，比较容易理解。``` pythonclass Solution(object):    def generate(self, numRows):        &quot;&quot;&quot;        :type numRows: int        :rtype: List[List[int]]        &quot;&quot;&quot;        #基础情况        if numRows == 0:            return []        elif numRows == 1:            return [[1]]        elif numRows == 2:            return [[1],[1,1]]        resu = [[1],[1,1]]        #其他情况，以[1,1]为基础计算        base = [1,1]        #不妨假设是3，此时，中间计算一次，故而从第三行开始，每一行计算的次数是：1 2 3 4 5 依次增加        #而需要计算的行数row = numrows - 2        row = numRows - 2        i = 1        while i &lt;= row:            #按照行计算，循环的次数一次增加            #第一行计算一次，第二行计算两次，刚好对应            j = 0            temp = [1]            while j &lt; i:                ele = base[j] + base[j+1]                temp.append(ele)                j+=1            temp.append(1)            base = temp            resu.append(base)            i+=1        return resu</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 20 ms, 在Pascal’s Triangle的Python提交中击败了93.62% 的用户<br>内存消耗 : 11.7 MB, 在Pascal’s Triangle的Python提交中击败了26.70% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>20 ms</td><td>11.7MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS | 选择器</title>
      <link href="/2019/05/css-2/"/>
      <url>/2019/05/css-2/</url>
      
        <content type="html"><![CDATA[<h1 id="最常用的四种选择器"><a href="#最常用的四种选择器" class="headerlink" title="最常用的四种选择器"></a>最常用的四种选择器</h1><p>元素选择器、类选择器、ID选择器、通配符选择器<br>由于比较简单，不介绍了。</p><h2 id="多类选择器"><a href="#多类选择器" class="headerlink" title="多类选择器"></a>多类选择器</h2><p>如：<code>&lt;p class=&quot;important warning&quot;&gt;&lt;/p&gt;</code><br>在设置<code>CSS</code>样式值的时候，可以分开写，也可以采用下面的写法：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.important.warning</span> </span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>silver<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="其他选择器"><a href="#其他选择器" class="headerlink" title="其他选择器"></a>其他选择器</h1><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>如果希望选择有某个属性的元素，而不论属性值是什么，可以使用简单属性选择器。<br>①单一属性：</p><blockquote><p>[attribute]    用于选取带有指定属性的元素。</p></blockquote><p>如：对有 <code>href</code> 属性的锚（a 元素）应用样式：</p><pre class=" language-css"><code class="language-css"><span class="token selector">a<span class="token attribute">[href]</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>②多属性：<br>如：将同时有 <code>href</code> 和 <code>title</code> 属性的<code>HTML</code> 超链接的文本设置为红色，可以这样写：</p><pre class=" language-css"><code class="language-css"><span class="token selector">a<span class="token attribute">[href]</span><span class="token attribute">[title]</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>③根据具体属性值选择：</p><blockquote><p>[attribute=value]    用于选取带有指定属性和值的元素。</p></blockquote><p>例如，假设希望将指向 <code>Web 服务器</code>上某个指定文档的超链接变成红色，可以这样写：</p><pre class=" language-css"><code class="language-css"><span class="token selector">a[href="http://www<span class="token class">.w3school.com.cn</span>/about_us<span class="token class">.asp</span>"] </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>④类似的：<br>可以把多个属性-值选择器链接在一起来选择一个文档。</p><pre class=" language-css"><code class="language-css"><span class="token selector">a[href="http://www<span class="token class">.w3school.com.cn</span>/"]<span class="token attribute">[title="W3School"]</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><span class="title2">注意：</span></h2><h3 id="1-根据具体属性值选择"><a href="#1-根据具体属性值选择" class="headerlink" title="1. 根据具体属性值选择"></a>1. 根据具体属性值选择</h3><p><strong>属性与属性值必须完全匹配</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>important warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>可以两个分开设置，如果要一起设置，就必须按照下面的形式：</p><pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token attribute">[class="important warning"]</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-根据部分属性值选择"><a href="#2-根据部分属性值选择" class="headerlink" title="2. 根据部分属性值选择"></a>2. 根据部分属性值选择</h3><blockquote><p>[attribute~=value]    用于选取属性值中包含指定词汇的元素。</p></blockquote><p><strong>需要使用波浪号（~）</strong><br>假设您想选择 <code>class</code> 属性中包含<code>important</code> 的元素，可以用下面这个选择器做到这一点：</p><pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token attribute">[class~="important"]</span> </span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="特定属性选择类型"><a href="#特定属性选择类型" class="headerlink" title="特定属性选择类型"></a>特定属性选择类型</h2><blockquote><p>[attribute|=value]    用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。</p></blockquote><p>假设一个 HTML 文档中有一系列图片，其中每个图片的文件名都形如 figure-1.jpg 和 figure-2.jpg。就可以使用以下选择器匹配所有这些图像：</p><pre class=" language-css"><code class="language-css"><span class="token selector">img<span class="token attribute">[src|="figure"]</span> </span><span class="token punctuation">{</span><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="子串匹配属性选择器"><a href="#子串匹配属性选择器" class="headerlink" title="子串匹配属性选择器 ^"></a>子串匹配属性选择器 ^</h2><p>[attribute^=value]    匹配属性值以指定值开头的每个元素。<br>[abc^=”def”]    选择 abc 属性值以 “def” 开头的所有元素</p><h2 id="子串匹配属性选择器-1"><a href="#子串匹配属性选择器-1" class="headerlink" title="子串匹配属性选择器 $"></a>子串匹配属性选择器 $</h2><p>[attribute$=value]    匹配属性值以指定值结尾的每个元素。<br>[abc$=”def”]    选择 abc 属性值以 “def” 结尾的所有元素</p><h2 id="子串匹配属性选择器-2"><a href="#子串匹配属性选择器-2" class="headerlink" title="子串匹配属性选择器 *"></a>子串匹配属性选择器 *</h2><p>[attribute*=value]    匹配属性值中包含指定值的每个元素。</p><p>[abc*=”def”]选择 abc 属性值中包含子串 “def” 的所有元素</p><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>根据上下文选择元素如果您希望只对 h1 元素中的 em 元素应用样式，可以这样写：</p><pre class=" language-CSS"><code class="language-CSS">h1 em {color:red;}</code></pre><p>需要注意的是：两个元素之间的层次间隔可以是无限的。（只要是后代就应用）</p><h2 id="子元素选择器-gt"><a href="#子元素选择器-gt" class="headerlink" title="子元素选择器 &gt;"></a>子元素选择器 &gt;</h2><p>子元素选择器（Child selectors）只能选择作为某元素子元素的元素。<br>例如，如果您希望选择只作为 h1 元素子元素的 strong 元素，可以这样写：</p><pre class=" language-CSS"><code class="language-CSS">h1 > strong {color:red;}</code></pre><h2 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器 +"></a>相邻兄弟选择器 +</h2><p>如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。<br>例如，如果要增加紧接在 h1 元素后出现的段落的上边距，可以这样写：</p><pre class=" language-CSS"><code class="language-CSS">h1 + p {margin-top:50px;}</code></pre><h2 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器 ~"></a>通用兄弟选择器 ~</h2><p>通用兄弟元素选择器通过两个简单选择符通过波浪号（~）分隔组成。<br>它匹配第二个简单选择符中所匹配的元素，而且与第一个简单选择符中匹配的元素要出现在他的前面。<br>这两个元素必须具有同一个父元素，但是第二个元素不一定必须紧跟在第一个元素之后（非直接兄弟）。<br>如：这条CSS规则将会匹配所有p元素之后ul元素：  </p><pre class=" language-CSS"><code class="language-CSS">p ~ ul { background:#ff0; }</code></pre><p>这个选择器读作：“选择紧接在 h1 元素后出现的段落，h1 和 p 元素拥有共同的父元素”。</p><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><blockquote><p>:active    向被激活的元素添加样式。<br>:focus    向拥有键盘输入焦点的元素添加样式。<br>:hover    当鼠标悬浮在元素上方时，向元素添加样式。<br>:link    向未被访问的链接添加样式。<br>:visited    向已被访问的链接添加样式。<br>:first-child    向元素的第一个子元素添加样式。</p></blockquote><p>伪类的语法：</p><pre class=" language-CSS"><code class="language-CSS">selector : pseudo-class {property: value}或者:selector.class : pseudo-class {property: value}</code></pre><h3 id="如，使用a标签的例子："><a href="#如，使用a标签的例子：" class="headerlink" title="如，使用a标签的例子："></a>如，使用a标签的例子：</h3><pre class=" language-CSS"><code class="language-CSS">a:link {color: #FF0000}        /* 未访问的链接 */a:visited {color: #00FF00}    /* 已访问的链接 */a:hover {color: #FF00FF}    /* 鼠标移动到链接上 */a:active {color: #0000FF}    /* 选定的链接 */</code></pre><p>提示：在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。<br>提示：在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。</p><h3 id="first-child-伪类"><a href="#first-child-伪类" class="headerlink" title=":first-child 伪类"></a>:first-child 伪类</h3><p>:first-child 伪类来选择元素的第一个子元素。</p><pre class=" language-css"><code class="language-css"><span class="token selector">li<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span><span class="token property">text-transform</span><span class="token punctuation">:</span>uppercase<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>解释：“第一个子元素是li的应用，而不是选择 p 元素的第一个子元素。”<br>如下面的案例：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">p<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>some text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>some text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>如果是：选择 p 元素的第一个子元素。因该按照下面的案例书写：<br>案例：所有 &lt;p&gt; 元素中的第一个 &lt;i&gt; 元素：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token selector">p > i<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span>  <span class="token punctuation">}</span> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>some <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>. some <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>some <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>. some <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><blockquote><p>:first-letter    向文本的第一个字母添加特殊样式。<br>:first-line    向文本的首行添加特殊样式。<br>:before    在元素之前添加内容。<br>:after    在元素之后添加内容。</p></blockquote><h3 id="first-line-伪元素"><a href="#first-line-伪元素" class="headerlink" title=":first-line 伪元素"></a>:first-line 伪元素</h3><p>“first-line” 伪元素用于向文本的首行设置特殊样式。<br>如：p 元素的第一行文本进行格式化：</p><pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token pseudo-element">:first-line</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ff0000</span><span class="token punctuation">;</span>  <span class="token property">font-variant</span><span class="token punctuation">:</span>small-caps<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注释：”first-line” 伪元素只能用于块级元素。<br>注释：下面的属性可<strong>应用于</strong> “first-line” 伪元素：</p><ul><li>font</li><li>color</li><li>background</li><li>word-spacing</li><li>letter-spacing</li><li>text-decoration</li><li>vertical-align</li><li>text-transform</li><li>line-height</li><li>clear<h3 id="first-letter-伪元素"><a href="#first-letter-伪元素" class="headerlink" title=":first-letter 伪元素"></a>:first-letter 伪元素</h3>“first-letter” 伪元素用于向文本的首字母设置特殊样式：<pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token pseudo-element">:first-letter</span></span><span class="token punctuation">{</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ff0000</span><span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>xx-large<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul><p>注释：”first-letter” 伪元素只能用于块级元素。<br>注释：下面的属性可应用于 “first-letter” 伪元素：</p><ul><li>font</li><li>color</li><li>background</li><li>margin</li><li>padding</li><li>border</li><li>text-decoration</li><li>vertical-align (仅当 float 为 none 时)</li><li>text-transform</li><li>line-height</li><li>float</li><li>clear</li></ul><h3 id="before-伪元素"><a href="#before-伪元素" class="headerlink" title=":before 伪元素"></a>:before 伪元素</h3><p>“:before” 伪元素可以在元素的内容前面插入新内容。</p><p>下面的例子在每个 &lt;h1&gt; 元素前面插入一幅图片：</p><pre class=" language-css"><code class="language-css"><span class="token selector">h1<span class="token pseudo-element">:before</span></span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span><span class="token url">url(logo.gif)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="after-伪元素"><a href="#after-伪元素" class="headerlink" title=":after 伪元素"></a>:after 伪元素</h3><p>“:after” 伪元素可以在元素的内容之后插入新内容。</p><p>下面的例子在每个 &lt;h1&gt; 元素后面插入一幅图片：</p><pre class=" language-css"><code class="language-css"><span class="token selector">h1<span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span><span class="token url">url(logo.gif)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS样式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-16 | 最接近的三数之和  中等难度</title>
      <link href="/2019/05/leetcode-16/"/>
      <url>/2019/05/leetcode-16/</url>
      
        <content type="html"><![CDATA[<h1 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16. 最接近的三数之和"></a>16. 最接近的三数之和</h1><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p><blockquote><p><span>例如</span><br>给定数组 nums = [-1，2，1，-4], 和 target = 1.<br>与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>由于我们取的三个数肯定是不相同的，所以，我们可以思考用双重循环，使用三指针遍历<br>也就是，第二重循环中使用首尾指针，第一重循环遍历到数组尾部，就可以保证三个数是不同的。<br>i = 0<br>j = i+1<br>k = len(nums) - 1</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        resu <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>            k <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>                sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>abs<span class="token punctuation">(</span>sum <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">&lt;</span> abs<span class="token punctuation">(</span>resu <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    resu <span class="token operator">=</span> sum                <span class="token keyword">if</span> sum <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> sum <span class="token operator">></span> target<span class="token punctuation">:</span>                    k <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true">#sum == target</span>                    <span class="token keyword">return</span> target            i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> resu</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 160 ms, 在3Sum Closest的Python提交中击败了30.13% 的用户<br>内存消耗 : 11.5 MB, 在3Sum Closest的Python提交中击败了41.60% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>160 ms</td><td>11.5MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-18 | 四数之和  中等难度</title>
      <link href="/2019/05/leetcode-18/"/>
      <url>/2019/05/leetcode-18/</url>
      
        <content type="html"><![CDATA[<h1 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16. 最接近的三数之和"></a>16. 最接近的三数之和</h1><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。</p><p><span>注意：</span><br>答案中不可以包含重复的四元组。</p><blockquote><p><span>例如</span><br>给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。<br>满足要求的四元组集合为：<br>[<br>  [-1,  0, 0, 1],<br>  [-2, -1, 1, 2],<br>  [-2,  0, 0, 2]<br>]</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>类似16，我们考虑到不重复，所以还是使用首尾指针方式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type target: int        :rtype: int        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        resu <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>            k <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">:</span>                sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>abs<span class="token punctuation">(</span>sum <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">&lt;</span> abs<span class="token punctuation">(</span>resu <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    resu <span class="token operator">=</span> sum                <span class="token keyword">if</span> sum <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                    j <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> sum <span class="token operator">></span> target<span class="token punctuation">:</span>                    k <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true">#sum == target</span>                    <span class="token keyword">return</span> target            i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> resu</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 160 ms, 在3Sum Closest的Python提交中击败了30.13% 的用户<br>内存消耗 : 11.5 MB, 在3Sum Closest的Python提交中击败了41.60% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>160 ms</td><td>11.5MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 没做出来 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter 编程  | pack布局</title>
      <link href="/2019/05/tkinter-5/"/>
      <url>/2019/05/tkinter-5/</url>
      
        <content type="html"><![CDATA[<h1 id="pack简介"><a href="#pack简介" class="headerlink" title="pack简介"></a>pack简介</h1><p>pack(包装)是tkinter中的一个布局管理模块</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>我们在将控件添加到win时，如下：</p><pre class=" language-python"><code class="language-python">tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>按住ctrl，点击pack，然后我们追踪，可以看见注释的属性：</p><pre class=" language-text"><code class="language-text">在父控件中包装一个组件。使用下面的选项：anchor=NSEW (or subset) -  依据给定的方向，定位组件。expand=bool - 父控件大小增加，是否扩展组件大小fill=NONE or X or Y or BOTH - 组件变大，是否填充，是否向水平或垂直方向填充ipadx=amount - add internal padding in x directionipady=amount - add internal padding in y directionpadx=amount - add padding in x directionpady=amount - add padding in y directionside=TOP or BOTTOM or LEFT or RIGHT -  设置组件的对齐方式</code></pre><p>案例①：anchor</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwin <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x200+200+50"</span><span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token punctuation">[</span>tk<span class="token punctuation">.</span>N<span class="token punctuation">,</span>tk<span class="token punctuation">.</span>E<span class="token punctuation">,</span>tk<span class="token punctuation">.</span>S<span class="token punctuation">,</span>tk<span class="token punctuation">.</span>W<span class="token punctuation">,</span>tk<span class="token punctuation">.</span>NW<span class="token punctuation">,</span>tk<span class="token punctuation">.</span>NE<span class="token punctuation">,</span>tk<span class="token punctuation">.</span>SW<span class="token punctuation">,</span>tk<span class="token punctuation">.</span>SE<span class="token punctuation">,</span>tk<span class="token punctuation">.</span>CENTER<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span>    tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>anchor<span class="token operator">=</span>i<span class="token punctuation">)</span>win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>案例②：expand   &amp;&amp; fill<br>只使用expand=True，是组件在父容器中居中显示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwin <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x200+200+50"</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"12346"</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>使用expand=True, 和fill = tk.X or tk.Y，就会对应方向上的组件填充<br>在expand = True 和fill = tk.BOTH的时候，填充父控件为设置的背景，内容居中。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwin <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x200+200+50"</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"12346"</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>expand <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> tk<span class="token punctuation">.</span>BOTH<span class="token punctuation">)</span>win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/201905/2019-05-19_144311.jpg" alt="e"></p><p>案例③：side</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwin <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x200+200+50"</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"12346789"</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side <span class="token operator">=</span> tk<span class="token punctuation">.</span>LEFT<span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"12"</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side <span class="token operator">=</span> tk<span class="token punctuation">.</span>TOP<span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"12346789"</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side <span class="token operator">=</span> tk<span class="token punctuation">.</span>BOTTOM<span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"12"</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side <span class="token operator">=</span> tk<span class="token punctuation">.</span>RIGHT<span class="token punctuation">)</span>win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/201905/2019-05-19_145010.jpg" alt="e"></p><hr><p>side 加载图片的案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> <span class="token triple-quoted-string string">"""At present, only GIF and PPM/PGMformats are supported, but an interface exists to allow additional image fileformats to be added easily."""</span>w2 <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>           justify<span class="token operator">=</span>LEFT<span class="token punctuation">,</span>           padx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>           text<span class="token operator">=</span>txt<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"left"</span><span class="token punctuation">)</span>logo <span class="token operator">=</span> PhotoImage<span class="token punctuation">(</span>file<span class="token operator">=</span><span class="token string">"H:/avatar.png"</span><span class="token punctuation">)</span>w1 <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> image<span class="token operator">=</span>logo<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"right"</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/201905/2019-05-19_150031.jpg" alt="e"></p>]]></content>
      
      
      <categories>
          
          <category> tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter 编程  | grid布局</title>
      <link href="/2019/05/tkinter-4/"/>
      <url>/2019/05/tkinter-4/</url>
      
        <content type="html"><![CDATA[<h1 id="grid简介"><a href="#grid简介" class="headerlink" title="grid简介"></a>grid简介</h1><p>grid布局又被称作网格布局，是最被推荐使用的布局。<br>程序大多数都是矩形的界面，我们可以很容易把它划分为一个几行几列的网格，然后根据行号和列号，将组件放置于网格之中。<br>使用grid 布局时，需要在里面指定两个参数，分别用row 表示行，column 表示列。<br>需要注意的是 row 和 column 的序号都从0 开始。</p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>我们在将控件添加到win时，如下：</p><pre class=" language-python"><code class="language-python">label <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span>textvariable <span class="token operator">=</span> txt<span class="token punctuation">,</span>bg <span class="token operator">=</span> <span class="token string">"#50AC40"</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>按住ctrl，点击grid，然后我们追踪，可以看见注释的属性：</p><pre class=" language-text"><code class="language-text">在父控件的网格中定位一个控件，使用下面的选项：column=number - 列编号，从0开始(starting with 0)columnspan=number - 跨越几列，取值为跨越占用的列数ipadx=amount - 垂直内边距,类似padding-left and padding-rightipady=amount - 水平内边距,类似padding-top and padding-bottompadx=amount - 垂直外边距，类似margin-left and margin-rightpady=amount - 水平外边距，类似margin-top and margin-bottomrow=number - 列编号，从0开始 (starting with 0)rowspan=number - 跨越几行，取值为跨越占用的行数</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwin <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x200+200+50"</span><span class="token punctuation">)</span>th <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Phone"</span><span class="token punctuation">,</span> <span class="token string">"Number"</span><span class="token punctuation">,</span> <span class="token string">"Number"</span><span class="token punctuation">]</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> th<span class="token punctuation">:</span>    label <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span>k<span class="token punctuation">,</span>ipadx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> ipady <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>    k<span class="token operator">+=</span><span class="token number">1</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ipadx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> ipady <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"15128459508"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ipadx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> ipady <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> columnspan <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ipadx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> ipady <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"4008887575"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>ipadx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> ipady <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"15128459507"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>ipadx <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> ipady <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/201905/2019-05-19_141936.jpg" alt="e"></p>]]></content>
      
      
      <categories>
          
          <category> tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter 编程  | Label</title>
      <link href="/2019/05/tkinter-3/"/>
      <url>/2019/05/tkinter-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h1><pre class=" language-text"><code class="language-text">w = Label ( master, option=value, ... )</code></pre><ul><li>master: 按钮的父容器。</li><li>options: 可选项，即该按钮的可设置的属性。这些选项可以用键 = 值的形式设置，并以逗号分隔。<br>(options)属性：</li></ul><h2 id="标准选项-部分"><a href="#标准选项-部分" class="headerlink" title="标准选项(部分)"></a>标准选项(部分)</h2><p>注：下面的内容，其实和<a href="../Tkinter-2">Button</a>中的差不多，这里就不做额外讲解。</p><h3 id="文本相关"><a href="#文本相关" class="headerlink" title="文本相关"></a>文本相关</h3><p>text    设置按钮的文本内容<br>textvariable   可以修改文本内容的变量<br>font    文本字体<br>underline    下划线。默认按钮上的文本都不带下划线。取值就是带下划线的字符串索引，为 0 时，第一个字符带下划线，为 1 时，前两个字符带下划线，以此类推<br>justify    显示多行文本的时候,设置不同行之间的对齐方式，可选项包括LEFT, RIGHT, CENTER<br>wraplength    限制按钮每行显示的字符的数量<br>anchor          锚选项，控制文本的位置，默认为center， 取值：  n, ne, e, se, s, sw, w, nw, or center</p><h3 id="颜色相关"><a href="#颜色相关" class="headerlink" title="颜色相关"></a>颜色相关</h3><p>background（可简写：bg）   按钮的背景色，可以设置white或者#eee格式的颜色<br>foreground（可简写：fg）    按钮的前景色，也就是文本的颜色<br>activebackground    当鼠标按下时，按钮的背景色<br>activeforeground     当鼠标按下时，按钮的前景色，也即是字体颜色</p><h3 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h3><p>image    按钮上要显示的图片，可以使用png和gif图像，不过gif也只是一张图像。图像的加载方法image = PhotoImage(file = filepath)<br>bitmap          位图，可选的值如下：”error”，”hourglass”，”info”，’questhead’，’question’，’warning’，’gray12’<br>，’gray25’，’gray50’，’gray75’</p><h3 id="边框相关"><a href="#边框相关" class="headerlink" title="边框相关"></a>边框相关</h3><p>borderwidth    按钮边框的大小，默认为 2 个像素<br>padx    按钮在x轴方向上的内边距(padding)，是指按钮的内容与按钮边缘的距离<br>pady    按钮在y轴方向上的内边距(padding)<br>relief    边框样式，设置控件3D效果，可选的有：flat, groove, raised, ridge, solid, or sunken。默认为 RAISED 。(注：赋值的时候可以使用小写字符串，也可以直接使用大写)</p><h3 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h3><p>cursor</p><h2 id="组件特有选项："><a href="#组件特有选项：" class="headerlink" title="组件特有选项："></a>组件特有选项：</h2><p>width 按钮的宽度，如未设置此项，其大小以适应按钮的内容（文本或图片的大小）<br>height 按钮的高度<br>state 设置按钮组件状态,可选的有normal、active、 disabled。默认 narmal。</p><hr><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例①：普通文本"><a href="#案例①：普通文本" class="headerlink" title="案例①：普通文本"></a>案例①：普通文本</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwin <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"test button"</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x200+200+50"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#背景设置绿色，前景色（即字体颜色）设置白色</span>label <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">"这里是Label控件演示"</span><span class="token punctuation">,</span>bg <span class="token operator">=</span> <span class="token string">"#50AC40"</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>label<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>效果图：<br><img src="/images/201905/2019-05-18_161637.jpg" alt="e" title="Label"></p><h3 id="案例②：修改代码文本内容"><a href="#案例②：修改代码文本内容" class="headerlink" title="案例②：修改代码文本内容"></a>案例②：修改代码文本内容</h3><p>点击按钮，就可以修改Label的文字内容</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwin <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x200+200+50"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>txt<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"这里是Label控件演示"</span><span class="token punctuation">)</span>label <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span>textvariable <span class="token operator">=</span> txt<span class="token punctuation">,</span>bg <span class="token operator">=</span> <span class="token string">"#50AC40"</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    txt<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"修改过后的文本"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#添加事件处理函数, 设置和间距为10</span>button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">"修改上面的Label文本内容"</span><span class="token punctuation">,</span> command <span class="token operator">=</span> change<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>pady<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#pady 设置控件的垂直间距</span>win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>结果图：<br><img src="/images/201905/2019-05-19_03.gif" alt="e"></p><p>不难发现我们的文本和按钮是默认各占据一行的。这样不利于布局。看看下面的例子：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwin <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x200+200+50"</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>txt<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"这里是Label控件演示"</span><span class="token punctuation">)</span>label <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>win<span class="token punctuation">,</span>textvariable <span class="token operator">=</span> txt<span class="token punctuation">,</span>bg <span class="token operator">=</span> <span class="token string">"#50AC40"</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"黑体"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    txt<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"修改过后的文本"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#添加事件处理函数, 设置和间距为10</span>button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">"修改上面的Label文本内容"</span><span class="token punctuation">,</span> command <span class="token operator">=</span> change<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/201905/2019-05-19_134847.jpg" alt="e" title="使用grid布局"><br>上面使用了grid布局，而不是pack，直接添加到窗口。详细的grid布局，将会在下一章讲解。<br><a href="../Tkinter-4/">下一章：grid布局</a></p><h3 id="案例③：内置位图"><a href="#案例③：内置位图" class="headerlink" title="案例③：内置位图"></a>案例③：内置位图</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"hourglass"</span><span class="token punctuation">,</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">'questhead'</span><span class="token punctuation">,</span><span class="token string">'question'</span><span class="token punctuation">,</span><span class="token string">'warning'</span><span class="token punctuation">,</span><span class="token string">'gray12'</span><span class="token punctuation">,</span><span class="token string">'gray25'</span><span class="token punctuation">,</span><span class="token string">'gray50'</span><span class="token punctuation">,</span><span class="token string">'gray75'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#compound设置图片在文字的哪边 bottom, center, left, none, right, or top</span>    Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text <span class="token operator">=</span> i <span class="token punctuation">,</span>bitmap<span class="token operator">=</span>i<span class="token punctuation">,</span> compound<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>如果不设置compound属性，那么此时图片就会覆盖文字。不显示文字内容。<br>效果图：<br><img src="/images/201905/2019-05-18_164957.jpg" alt="e" title="使用位图"></p><h3 id="案例④：显示png或gif图片"><a href="#案例④：显示png或gif图片" class="headerlink" title="案例④：显示png或gif图片"></a>案例④：显示png或gif图片</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> <span class="token triple-quoted-string string">"""At present, only GIF and PPM/PGMformats are supported, but an interface exists to allow additional image fileformats to be added easily."""</span>w2 <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>           justify<span class="token operator">=</span>LEFT<span class="token punctuation">,</span>           padx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>           text<span class="token operator">=</span>txt<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"left"</span><span class="token punctuation">)</span>logo <span class="token operator">=</span> PhotoImage<span class="token punctuation">(</span>file<span class="token operator">=</span><span class="token string">"H:/avatar.png"</span><span class="token punctuation">)</span>w1 <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> image<span class="token operator">=</span>logo<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"right"</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>“justify” 参数指示文字的对齐方向, 可选值为 RIGHT, CENTER, LEFT, 默认为 Center.<br><img src="/images/201905/2019-05-19_150031.jpg" alt="e"></p><p>从上面的代码中不难发现，我们使用了两个Label，一个显示文字，一个显示图片。使用side来定位。但是，当使用一个Label的情况又是什么呢?<br>默认情况下, 如果为一个 Label 控件指定了图片, 那么这个 Label就会只显示图片. 要让图片和文字一同显示, 就要使用 compound 选项. 设置 compound 为 CENTER 将使文字显示在图片上方:</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>logo <span class="token operator">=</span> PhotoImage<span class="token punctuation">(</span>file<span class="token operator">=</span><span class="token string">"H:/avatar.png"</span><span class="token punctuation">)</span>explanation <span class="token operator">=</span> <span class="token triple-quoted-string string">"""At present, only GIF and PPM/PGMformats are supported, but an interface exists to allow additional image fileformats to be added easily."""</span>w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>          compound<span class="token operator">=</span>RIGHT<span class="token punctuation">,</span>          text<span class="token operator">=</span>explanation<span class="token punctuation">,</span>          image<span class="token operator">=</span>logo<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"right"</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>使用了compound属性，指示图片在文字的位置，就可以使用一个Label实现上面的效果：<br><img src="/images/201905/2019-05-19_150031.jpg" alt="e"></p><h3 id="案例⑤：图片做背景图层"><a href="#案例⑤：图片做背景图层" class="headerlink" title="案例⑤：图片做背景图层"></a>案例⑤：图片做背景图层</h3><p>当然了，当compound=center的时候，也就是图片是背景图层，如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>logo <span class="token operator">=</span> PhotoImage<span class="token punctuation">(</span>file<span class="token operator">=</span><span class="token string">"H:/avatar.png"</span><span class="token punctuation">)</span>explanation <span class="token operator">=</span> <span class="token triple-quoted-string string">"""At present, only GIF and PPM/PGMformats are supported, but an interface exists to allow additional image fileformats to be added easily."""</span>w <span class="token operator">=</span> Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span>          compound<span class="token operator">=</span>CENTER<span class="token punctuation">,</span>          text<span class="token operator">=</span>explanation<span class="token punctuation">,</span>          image<span class="token operator">=</span>logo<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span>side<span class="token operator">=</span><span class="token string">"right"</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/201905/2019-05-19_150948.jpg" alt="e"></p>]]></content>
      
      
      <categories>
          
          <category> tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter 编程  | Button</title>
      <link href="/2019/05/tkinter-2/"/>
      <url>/2019/05/tkinter-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h1><pre class=" language-text"><code class="language-text">w = Button ( master, option=value, ... )</code></pre><ul><li>master: 按钮的父容器。</li><li>options: 可选项，即该按钮的可设置的属性。这些选项可以用键 = 值的形式设置，并以逗号分隔。<br>(options)属性：</li></ul><h2 id="标准选项：（有些选项，测试的时候，发现无多大用处，这里没列举出来。）"><a href="#标准选项：（有些选项，测试的时候，发现无多大用处，这里没列举出来。）" class="headerlink" title="标准选项：（有些选项，测试的时候，发现无多大用处，这里没列举出来。）"></a>标准选项：（有些选项，测试的时候，发现无多大用处，这里没列举出来。）</h2><h3 id="文本相关"><a href="#文本相关" class="headerlink" title="文本相关"></a>文本相关</h3><p>text    设置按钮的文本内容<br>textvariable   可以修改文本内容的变量<br>font    文本字体<br>underline    下划线。默认按钮上的文本都不带下划线。取值就是带下划线的字符串索引，为 0 时，第一个字符带下划线，为 1 时，前两个字符带下划线，以此类推<br>justify    显示多行文本的时候,设置不同行之间的对齐方式，可选项包括LEFT, RIGHT, CENTER<br>wraplength    限制按钮每行显示的字符的数量<br>anchor          锚选项，控制文本的位置，默认为center， 取值：  n, ne, e, se, s, sw, w, nw, or center</p><p>案例1，使用textvariable做可修改文本内容的案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>txt <span class="token operator">=</span> StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>txt<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"before set"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置txt的文本内容</span>b <span class="token operator">=</span> Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span>textvariable <span class="token operator">=</span> txt<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#得到原文本内容，输出</span>b<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>txt<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"789"</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>不难发现，我们的按钮的文本就可以在pack()后，使用代码修改文本内容。<br>另一种方式：</p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span>text <span class="token operator">=</span> <span class="token string">"before set"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#使用text设置，而不是textvariable</span>b<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123456</span></code></pre><p>案例2，指定文本字体：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 字体使用tuple，（字体名称，字体大小）</span><span class="token keyword">for</span> ft <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'Arial'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Courier New'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Comic Sans MS'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Fixdsys'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'MS Sans Serif'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'MS Serif'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Symbol'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'System'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'Times New Roman'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Verdana'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span>ft<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> font<span class="token operator">=</span>ft<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>直接使用font指定字体，需要用元组（字体名称，字体大小）<br><img src="/images/201905/2019-05-19_092914.jpg" alt="e"></p><p>另一种方式：<br>由于我们上面使用的是元组，所以只能传入两个字体参数，下面我们自创建字体样式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> tkinter<span class="token punctuation">.</span>font <span class="token keyword">as</span> tfroot <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># size 设置字体大小，整型值</span>ft <span class="token operator">=</span> tf<span class="token punctuation">.</span>Font<span class="token punctuation">(</span>family <span class="token operator">=</span> <span class="token string">'Comic Sans MS'</span><span class="token punctuation">,</span>size <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">,</span> font<span class="token operator">=</span>ft<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># weight 设置字体加粗，可取值: tf.BOLD  tf.NORMAL(不加粗)</span>ft <span class="token operator">=</span> tf<span class="token punctuation">.</span>Font<span class="token punctuation">(</span>family <span class="token operator">=</span> <span class="token string">'Comic Sans MS'</span><span class="token punctuation">,</span>size <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>BOLD<span class="token punctuation">)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">,</span> font<span class="token operator">=</span>ft<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># underline 设置下划线，可取值：True False(无下划线)</span>ft <span class="token operator">=</span> tf<span class="token punctuation">.</span>Font<span class="token punctuation">(</span>family <span class="token operator">=</span> <span class="token string">'Comic Sans MS'</span><span class="token punctuation">,</span>size <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> underline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">,</span> font<span class="token operator">=</span>ft<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># slant 设置字体倾斜，可取值：tf.ITALIC  tf.ROMAN(不倾斜)</span>ft <span class="token operator">=</span> tf<span class="token punctuation">.</span>Font<span class="token punctuation">(</span>family <span class="token operator">=</span> <span class="token string">'Comic Sans MS'</span><span class="token punctuation">,</span>size <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> underline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>slant <span class="token operator">=</span> tf<span class="token punctuation">.</span>ITALIC<span class="token punctuation">)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">,</span> font<span class="token operator">=</span>ft<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># overstrike 设置字体删除线，可取值True, False</span>ft <span class="token operator">=</span> tf<span class="token punctuation">.</span>Font<span class="token punctuation">(</span>family <span class="token operator">=</span> <span class="token string">'Comic Sans MS'</span><span class="token punctuation">,</span>size <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> tf<span class="token punctuation">.</span>BOLD<span class="token punctuation">,</span> underline<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>slant <span class="token operator">=</span> tf<span class="token punctuation">.</span>ITALIC<span class="token punctuation">,</span>overstrike <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">,</span> font<span class="token operator">=</span>ft<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/201905/2019-05-19_095835.jpg" alt="e"></p><h3 id="颜色相关"><a href="#颜色相关" class="headerlink" title="颜色相关"></a>颜色相关</h3><p>background（可简写：bg）   按钮的背景色，可以设置white或者#eee格式的颜色<br>foreground（可简写：fg）    按钮的前景色，也就是文本的颜色<br>activebackground    当鼠标按下时，按钮的背景色<br>activeforeground     当鼠标按下时，按钮的前景色，也即是字体颜色</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Comic Sans MS"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">"#8EBAE1"</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Comic Sans MS"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">"#8EBAE1"</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span> activebackground <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Comic Sans MS"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">"#8EBAE1"</span><span class="token punctuation">,</span> fg <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">,</span> activeforeground <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/201905/2019-05-19_101703.gif" alt="e"></p><h3 id="图片相关"><a href="#图片相关" class="headerlink" title="图片相关"></a>图片相关</h3><p>image    按钮上要显示的图片，可以使用png和gif图像，不过gif也只是一张图像。图像的加载方法image = PhotoImage(file = filepath)<br>bitmap          位图，可选的值如下：”error”，”hourglass”，”info”，’questhead’，’question’，’warning’，<br>‘gray12’，’gray25’，’gray50’，’gray75’<br>但是在同时设置了text和位图的时候，就默认显示位图，不显示文本内容。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>img1 <span class="token operator">=</span> PhotoImage<span class="token punctuation">(</span>file <span class="token operator">=</span> <span class="token string">"H:/avatar.png"</span><span class="token punctuation">)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"123"</span><span class="token punctuation">,</span> image <span class="token operator">=</span> img1<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>img2 <span class="token operator">=</span> PhotoImage<span class="token punctuation">(</span>file <span class="token operator">=</span> <span class="token string">"D:/blog/weizu/source/images/201905/2019-05-19_101703.gif"</span><span class="token punctuation">)</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> image <span class="token operator">=</span> img2<span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/201905/2019-05-19_104613.jpg" alt="e"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> tkinter <span class="token keyword">import</span> <span class="token operator">*</span>root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span><span class="token string">"hourglass"</span><span class="token punctuation">,</span><span class="token string">"info"</span><span class="token punctuation">,</span><span class="token string">'questhead'</span><span class="token punctuation">,</span><span class="token string">'question'</span><span class="token punctuation">,</span><span class="token string">'warning'</span><span class="token punctuation">,</span><span class="token string">'gray12'</span><span class="token punctuation">,</span><span class="token string">'gray25'</span><span class="token punctuation">,</span><span class="token string">'gray50'</span><span class="token punctuation">,</span><span class="token string">'gray75'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#compound设置图片在文字的哪边 bottom, center, left, none, right, or top</span>    Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text <span class="token operator">=</span> i <span class="token punctuation">,</span>bitmap<span class="token operator">=</span>i<span class="token punctuation">,</span> compound<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="/images/201905/2019-05-19_105312.jpg" alt="e"></p><h3 id="边框相关"><a href="#边框相关" class="headerlink" title="边框相关"></a>边框相关</h3><p>边框默认2个像素，左边和上边（内：#E3E3E3，外：#FFF），右边和下边（内：A0A0A0，外：#696969），按钮颜色：#F0F0F0；<br>如下面的案例3D样式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#F0F0F0</span><span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token punctuation">;</span><span class="token property">border-left</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#FFF</span><span class="token punctuation">;</span><span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#FFF</span><span class="token punctuation">;</span><span class="token property">border-right</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#696969</span><span class="token punctuation">;</span><span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#696969</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><div style="width:30px;background-color:#F0F0F0; height:30px;border-left:1px solid #FFF;border-top:1px solid #FFF;border-right:1px solid #696969;border-bottom:1px solid #696969;"></div>borderwidth    按钮边框的大小，默认为 2 个像素padx    按钮在x轴方向上的内边距(padding)，是指按钮的内容与按钮边缘的距离pady    按钮在y轴方向上的内边距(padding)relief    边框样式，设置控件3D效果，可选的有：flat, groove, raised, ridge, solid, or sunken。默认为 RAISED 。(注：赋值的时候可以使用小写字符串，也可以直接使用大写)``` pythonfrom tkinter import *<p>root = Tk()</p><h1 id="flat-groove-raised-ridge-solid-or-sunken"><a href="#flat-groove-raised-ridge-solid-or-sunken" class="headerlink" title="flat, groove, raised, ridge, solid, or sunken"></a>flat, groove, raised, ridge, solid, or sunken</h1><p>Button(root, text=’default’).pack()<br>Button(root, text=’flat’, relief=FLAT).pack()<br>Button(root, text=’groove’, relief=”groove”).pack()<br>Button(root, text=’raised’, relief=”raised”).pack()<br>Button(root, text=’ridge’, relief=”ridge”).pack()<br>Button(root, text=’solid’, relief=”solid”).pack()<br>Button(root, text=’sunken’, relief=”sunken”).pack()</p><p>root.mainloop()</p><pre><code>![e](/images/201905/2019-05-19_113555.jpg)### 鼠标cursor 鼠标的样式``` pythonimport tkinter as tkwin = tk.Tk()tk.Button(win, text=&quot;123&quot;, cursor=&quot;hand2&quot;).pack()tk.Button(win, text=&quot;123&quot;, cursor=&quot;left_ptr&quot;).pack()win.mainloop()</code></pre><h2 id="组件特有选项："><a href="#组件特有选项：" class="headerlink" title="组件特有选项："></a>组件特有选项：</h2><p>command     按钮关联的函数，当按钮被点击时，执行该函数<br>width    按钮的宽度，如未设置此项，其大小以适应按钮的内容（文本或图片的大小）<br>height    按钮的高度<br>state  设置按钮组件状态,可选的有normal、active、 disabled。默认 narmal。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkwin <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"test button"</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x200+200+50"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建按钮</span>button1  <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">"按钮1"</span><span class="token punctuation">,</span> command <span class="token operator">=</span> <span class="token keyword">lambda</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> bg <span class="token operator">=</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span> activebackground <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">)</span>button1<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>button2  <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">"按钮2"</span><span class="token punctuation">,</span> command <span class="token operator">=</span> func<span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> activeforeground <span class="token operator">=</span> <span class="token string">"#eee"</span><span class="token punctuation">)</span>button2<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 进入消息循环</span>win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>效果图：<br><img src="/images/201905/2019-05-18_160458.jpg" alt="e" title="Button"></p>]]></content>
      
      
      <categories>
          
          <category> tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tkinter 编程  | 初识tkinter</title>
      <link href="/2019/05/tkinter-1/"/>
      <url>/2019/05/tkinter-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Tkinter-简介"><a href="#Tkinter-简介" class="headerlink" title="Tkinter 简介"></a>Tkinter 简介</h1><p>Tkinter 是 Python 的标准 GUI 库。内置在 python 的安装包中，故而只要安装好 Python 之后就能 import Tkinter 库。对于简单的图形界面 Tkinter 还是能应付自如。导入包就可以直接使用，如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token comment" spellcheck="true">#创建窗口</span>win <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#设置窗口标题</span>win<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"first window program"</span><span class="token punctuation">)</span>win<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x200+200+50"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 大小400x200 位置200 50</span>win<span class="token punctuation">.</span>resizable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#阻止Python GUI的大小调整</span><span class="token comment" spellcheck="true"># 进入消息循环</span>win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="Tkinter-控件"><a href="#Tkinter-控件" class="headerlink" title="Tkinter 控件"></a>Tkinter 控件</h1><p>kinter的提供各种控件，如按钮，标签和文本框，一个GUI应用程序中使用。这些控件通常被称为控件或者部件。Tkinter的部件。如下：</p><ol><li><a href="../Tkinter-2">Button</a></li><li><a href="../Tkinter-3">Label</a></li><li>Entry</li><li>Checkbutton</li><li>Frame</li><li>Canvas</li><li>Listbox</li><li>Menubutton</li><li>Menu</li><li>Message</li><li>Radiobutton</li><li>Scale</li><li>Srollbar</li><li>Text</li><li>Toplevel</li><li>Spinbox</li><li>PanedWindow</li><li>LabelFrame</li><li>tkMessageBox</li></ol>]]></content>
      
      
      <categories>
          
          <category> tkinter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构精讲 | 基本概念</title>
      <link href="/2019/05/datastructures-1/"/>
      <url>/2019/05/datastructures-1/</url>
      
        <content type="html"><![CDATA[<h2 id="何为数据？"><a href="#何为数据？" class="headerlink" title="何为数据？"></a>何为数据？</h2><p>数据是信息的载体，在计算机科学中指的是所有能够输入到计算机中并能够被计算机程序识别和处理的符号集合。<br>可分为两类：一类是整数、实数等数值数据；另一类是文字、图像、声音等非数值数据。</p><h2 id="何为数据结构？"><a href="#何为数据结构？" class="headerlink" title="何为数据结构？"></a>何为数据结构？</h2><p>数据结构（data structure）是指相互之间存在一定关系的数据元素的集合。</p><blockquote><p>数据元素：是数据的基本单位，也是在讨论数据结构时候涉及的最小数据单位。由数据项构成，数据项是不可分割的最小单位。</p></blockquote><p>也就是，数据结构是由数据元素和数据元素之间的关系构成的一个集合。</p><h2 id="按逻辑结构如何分类？"><a href="#按逻辑结构如何分类？" class="headerlink" title="按逻辑结构如何分类？"></a>按逻辑结构如何分类？</h2><blockquote><p>逻辑结构：数据元素之间的逻辑关系，是抽象出来的数据模型。</p></blockquote><p>按照数据元素之间的逻辑关系，分为一下四类：</p><ul><li>集合：属于同一个集合，彼此之间无关系。</li><li>线性结构：一对一的线性关系。</li><li>树结构：一对多的层次关系。</li><li>图结构：多对多的任意关系。</li></ul><h2 id="按存储结构如何分类？"><a href="#按存储结构如何分类？" class="headerlink" title="按存储结构如何分类？"></a>按存储结构如何分类？</h2><blockquote><p>存储结构：即物理结构，是数据的逻辑结构在计算机内存中的映象（即表示）。即存储两个部分：数据元素，以及数据元素之间的逻辑关系。</p></blockquote><p>通常有两种存储结构：</p><ul><li>顺序存储结构，采用连续的存储单元依次存放数据。数据元素之间的逻辑关系由元素的存储位置来表示。最常见的如：数组。</li><li>链式存储结构，用任意一组存储单元存储数据元素，数据元素之间的逻辑关系用指针来表示。最常见的如：链表。</li></ul><h2 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h2><ul><li>抽象：抽出问题的本质特征，忽视非本质的细节。如：地图</li><li>数据类型：一组值的集合以及定义在这个集合上的一组操作的总称。即：数据+该数据的操作。如C语言中的int，规定了值的取值范围，允许操作有算术运算、关系运算、逻辑运算等。</li><li>抽象数据类型（Abstract Data Type，ADT）：是一个数据结构，以及定义在该结构上的一组操作的总称。可以理解为事数据类型的进一步抽象。<br>不妨看看线性表的抽象数据类型的定义：<blockquote><p>ADT List<br>Data<br>  线性表中的数据元素具有相同的类型，相邻元素具有前驱和后继关系<br>Operation<br>  InitList</p><pre><code>  前置条件：线性表不存在  输入：无  功能：线性表的初始化  输出：无  后置条件：一个空的线性表</code></pre><p>  Create</p><pre><code>  前置条件：线性表不存在  输入：n个数据元素  功能：建立一个具有n个元素的线性表  输出：无  后置条件：一个具有n个元素的线性表</code></pre><p>  Length</p><pre><code>  前置条件：线性表存在  输入：无  功能：求线性表的长度  输出：线性表中数据元素的个数  后置条件：线性表不变</code></pre><p>  Get</p><pre><code>  前置条件：线性表存在  输入：元素的序号  功能：按位查找，在线性表中查找序号为i的数据元素  输出：如果需要合法，返回序号为i的元素值，否则抛出异常  后置条件：线性表不变</code></pre><p>  Locate</p><pre><code>  前置条件：线性表存在  输入：数据元素  功能：按值查找，在线性表中查找值等于x的元素  输出：如果查找成功，返回元素x在表中的序号，否则返回0  后置条件：线性表不变</code></pre><p>  Insert</p><pre><code>  前置条件：线性表存在  输入：插入位置；待插入元素  功能：插入操作，在线性表的第i个位置处插入一个新的元素x  输出：若插入不成功，抛出异常  后置条件：若插入成功，表中增加了一个新元素</code></pre><p>  Delete</p><pre><code>  前置条件：线性表存在  输入：删除位置i  功能：删除第i个位置的元素  输出：若删除成功，返回被删除元素，否则抛出异常  后置条件：若删除成功，表中减少一个元素</code></pre><p>  Empty</p><pre><code>  前置条件：线性表存在  输入：无  功能：判空操作，判断线性表是否为空表  输出：若是空表，返回1，否则返回0  后置条件：线性表不变</code></pre><p>  PrintList</p><pre><code>  前置条件：线性表存在  输入：无  功能：遍历操作，按序号一次输出线性表中的元素  输出：线性表的各个数据元素  后置条件：线性表不变</code></pre><p>endADT </p></blockquote></li></ul><p>然后，根据ADT，我们可以采用顺序表实现，也可以采用链表实现上述操作。</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Data Structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> datastructures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-38 | 报数  简单难度</title>
      <link href="/2019/05/leetcode-38/"/>
      <url>/2019/05/leetcode-38/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：</p><blockquote><ol><li>1</li><li>11</li><li>21</li><li>1211</li><li>111221</li></ol></blockquote><p>1 被读作  “one 1”  (“一个一”) , 即 11。<br>11 被读作 “two 1s” (“两个一”）, 即 21。<br>21 被读作 “one 2”,  “one 1” （”一个二” ,  “一个一”) , 即 1211。</p><p>给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。<br>注意：整数顺序将表示为一个字符串。</p><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>采用循环计数，然后取当前的值和数字的个数，组成这一组相同的元素的报数，如：<br>11112<br>当前的数值是1，然后循环计数1有4个，故而我们组成：41<br>当前的数值是2，然后循环计数2有1个，故而我们组成：12<br>也即是：4112</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">calc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        count <span class="token operator">=</span> <span class="token number">0</span>        temp <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>                j <span class="token operator">+=</span> <span class="token number">1</span>            temp <span class="token operator">+=</span> str<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i <span class="token operator">=</span> j            count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">return</span> temp    <span class="token keyword">def</span> <span class="token function">countAndSay</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: str        """</span>        s <span class="token operator">=</span> <span class="token string">"1"</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#n-1是因为我的初始值是1，此时n=1是进入循环，变成了11，很明显这是第二项的值。</span>            s <span class="token operator">=</span> self<span class="token punctuation">.</span>calc<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">return</span> s</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 24 ms, 在Count and Say的Python提交中击败了100.00% 的用户<br>内存消耗 : 11.5 MB, 在Count and Say的Python提交中击败了36.80% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>24 ms</td><td>11.5MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发 | rpx</title>
      <link href="/2019/05/weixinprogram-2/"/>
      <url>/2019/05/weixinprogram-2/</url>
      
        <content type="html"><![CDATA[<h1 id="相关常识"><a href="#相关常识" class="headerlink" title="相关常识"></a>相关常识</h1><h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><p>分辨率是屏幕像素的数量，一般用屏幕宽度的像素点乘以屏幕高度的像素点。如描述iphone6的分辨率是750*1334。分为下面两类：</p><ul><li>物理分辨率是硬件所支持的分辨率。</li><li>逻辑分辨率是软件可以达到的分辨率。</li><li>实际工作中设计师常常给的是物理分辨率，程序中用到的是逻辑分辨率，但是都称为分辨率，容易混淆。</li></ul><p>如iphone6的逻辑分辨率：375<em>667；物理分辨率：750</em>1334。</p><h2 id="像素倍率dpr"><a href="#像素倍率dpr" class="headerlink" title="像素倍率dpr"></a>像素倍率dpr</h2><p>物理分辨率和逻辑分辨率的商称为像素倍率dpr，也就是常说的几倍屏。<br>所以iphone6的像素倍率=（750<em>1334）/（375</em>667）=2，也就是2倍屏</p><h2 id="px"><a href="#px" class="headerlink" title="px"></a>px</h2><p>px就是Pixel的缩写，就是指像素。像素是图像的基本采样单位，它不是一个确定的物理量，因为像素点的物理大小是不确定的。</p><h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>在做移动端适配是最常用的方法就是使用rem作为单位，因为rem是根据html的fontsize去动态计算实际的px的。<br>所以常常应用这点，做反向使用。即根据屏幕大小动态的设置fontsize.来达到不同的分辨率下有一样的效果。<br>故而在设置字体的时候，可以使用rem。</p><h1 id="微信-rpx"><a href="#微信-rpx" class="headerlink" title="微信-rpx"></a>微信-rpx</h1><p>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应。<br>微信规定屏幕宽为750rpx。<br>如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，<br>故而，在iPhone6中：1rpx = 0.5px = 1物理像素。<br>rpx换算px   逻辑屏幕宽度/750<br>px换算rpx  750/逻辑屏幕宽度)</p><hr><p>也即是：在开发小程序的时候，可以用 iPhone6 作为视觉稿的标准，此时，1rpx=1物理像素，最大宽度是750rpx</p>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rpx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发 | wx:for</title>
      <link href="/2019/05/weixinprogram-3/"/>
      <url>/2019/05/weixinprogram-3/</url>
      
        <content type="html"><![CDATA[<h1 id="bindtap"><a href="#bindtap" class="headerlink" title="bindtap"></a>bindtap</h1><p>组件事件处理函数<br>事件是<strong>视图层到逻辑层的通讯方式。</strong></p><p>bindtap，当用户点击该组件的时候会在该页面对应的Page中找到相应的事件处理函数。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tapTest<span class="token punctuation">"</span></span> <span class="token attr-name">data-hi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WeChat<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tapName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>在相应的Page定义中写上相应的事件处理函数，参数是event。</p><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function">tapName</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>更多事件可以访问：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html</a></p><h1 id="wx-for"><a href="#wx-for" class="headerlink" title="wx:for"></a>wx:for</h1><p>默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item<br>如，在data存入下面的数据：</p><pre class=" language-js"><code class="language-js">array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>message<span class="token punctuation">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>然后，在wxml中使用该数组：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{array}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{index}}: {{item.message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>使用 wx:for-item 可以指定数组当前元素的变量名，<br>使用 wx:for-index 可以指定数组当前下标的变量名：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{array}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idx<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{idx}}: {{itemName.message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p>wx:for 也可以嵌套，下边是一个九九乘法表</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>j<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{i &lt;<span class="token punctuation">=</span> j}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> {{i}} * {{j}}="{{i" j}} &lt; view> view>&lt; code>&lt;/=></code></pre><h1 id="this-setData"><a href="#this-setData" class="headerlink" title="this.setData"></a>this.setData</h1><p>Page.prototype.setData(Object data, Function callback)<br>setData 函数用于将数据从逻辑层发送到视图层（异步），同时改变对应的 this.data 的值（同步）。<br>参数说明<br>字段                类型          必填              描 述<br>data           Object         是              这次要改变的数据<br>callback     Function    否              setData引起的界面更新渲染完毕后的回调函数</p><p>Object 以 key: value 的形式表示，将 this.data 中的 key 对应的值改变成 value。<br>其中 key 可以以数据路径的形式给出，支持改变数组中的某一项或对象的某个属性，如 array[2].message，a.b.c.d，并且<strong>不需要在 this.data 中预先定义。</strong></p><p><span class="title2">注意：</span><br><strong>直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。</strong><br>仅支持设置可 JSON 化的数据。<br>单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。<br>请不要把 data 中任何一项的 value 设为 undefined ，否则这一项将不被设置并可能遗留一些潜在问题。</p><p>不要直接修改 this.data，以达到期望的修改：<br>this.data.text = ‘changed data’  </p><p>应该使用 setData</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>text<span class="token punctuation">:</span> <span class="token string">'changed data'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>或者，可以修改 this.data 之后马上用 setData 设置一下修改了的字段</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>num<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>num<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>对于对象或数组字段，可以直接修改一个其下的子字段，这样做通常比修改整个对象或数组更好</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'array[0].text'</span><span class="token punctuation">:</span> <span class="token string">'changed data'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>甚至都不需要再this.data中申明，直接设置数据，然后就可以使用</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>{{object.text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeItemInObject<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Change Object data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">changeItemInObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token string">'text'</span><span class="token punctuation">:</span> <span class="token string">'changed data'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wx_for </tag>
            
            <tag> bindtap </tag>
            
            <tag> this_setData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发 | display:flex</title>
      <link href="/2019/05/weixinprogram-1/"/>
      <url>/2019/05/weixinprogram-1/</url>
      
        <content type="html"><![CDATA[<p><i class="fa  fa-bookmark fa-lg"></i> 看微信小程序中样式有：display:flex，然后学习一下<br>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p><p>flex 属性用于设置或检索弹性盒模型对象的子元素如何分配空间。<br>注意：如果元素不是弹性盒模型对象的子元素，则 flex 属性不起作用。<br>下面看看两个入门案例：</p><p><strong>让所有弹性盒模型对象的子元素都有相同的长度，且忽略它们内部的内容：</strong><br><img src="/images/201905/2019-05-14_082020.jpg" alt="e" title="代码效果图"><br><span class="title2">注：</span> 在tab中直接插入代码会显示undefined，需要先在非tab处插入，然后看html中生成的html代码，然后拷贝&lt;figure&gt;&lt;/figure&gt;中代码，用浏览器检查一下就知道了。（可以看见是一个一行两列的table表格，然后添加的颜色）</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span></span></span><br><span class="line"><span class="undefined">{</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:220px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span></span></span><br><span class="line"><span class="undefined">{</span></span><br><span class="line"><span class="css">    <span class="selector-tag">flex</span><span class="selector-pseudo">:1</span>;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:coral;"</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightblue;"</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightgreen;"</span>&gt;</span>带有更多内容的绿色 div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个例子，是使用JavaScript动态的为案例一中的每个小div添加flex:1的样式。<br><img src="/images/201905/2019-05-14_094803.jpg" alt="e"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="css"><span class="selector-id">#myDIV</span></span></span><br><span class="line"><span class="undefined">{</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:220px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>点击“尝试一下”按钮设置<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"myFunction()"</span>&gt;</span>尝试一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDIV"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:coral;"</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightblue;"</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightgreen;"</span>&gt;</span>带有更多内容的绿色 div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> x = <span class="built_in">document</span>.getElementById(<span class="string">"myDIV"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> y = x.getElementsByTagName(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; y.length; i++) {</span></span><br><span class="line"><span class="javascript">    y[i].style.flex=<span class="string">"1"</span>;</span></span><br><span class="line"><span class="undefined">  }</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><p>flex有6中相关的属性，我们这里来逐一学习。</p><p>flex-basis 属性用于设置或检索弹性盒伸缩基准值。<br>注意：如果元素不是弹性盒对象的元素，则 flex-basis 属性不起作用。</p><blockquote><p>flex-basis: number|auto|initial|inherit;</p><ul><li>number    一个长度单位或者一个百分比，规定灵活项目的初始长度。</li><li>auto    默认值。长度等于灵活项目的长度。如果该项目未指定长度，则长度将根据内容决定。</li></ul></blockquote><p>默认值：    auto<br>JavaScript 语法：    object.style.flexBasis=”200px”</p><p>设置第二个弹性盒元素的初始长度为 80 像素：<br><img src="/images/201905/2019-05-14_101920.jpg" alt="e"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> {</span></span><br><span class="line"><span class="undefined">    width: 350px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c3c3c3</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">display</span>: <span class="selector-tag">-webkit-flex</span>; <span class="comment">/* Safari */</span></span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span> {</span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-flex-grow</span>: 0; <span class="comment">/* Safari 6.1+ */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-flex-shrink</span>: 0; <span class="comment">/* Safari 6.1+ */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-flex-basis</span>: 40<span class="selector-tag">px</span>; <span class="comment">/* Safari 6.1+ */</span></span></span><br><span class="line"><span class="undefined">    flex-grow: 0;</span></span><br><span class="line"><span class="undefined">    flex-shrink: 0;</span></span><br><span class="line"><span class="undefined">    flex-basis: 40px;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span> {</span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-flex-basis</span>: 80<span class="selector-tag">px</span>; <span class="comment">/* Safari 6.1+ */</span></span></span><br><span class="line"><span class="undefined">    flex-basis: 80px;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:coral;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightblue;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:khaki;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:pink;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightgrey;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>:nth-of-type(n) 是CSS的伪类元素，查看所有的伪类可以访问：https://www.runoob.com/css/css-pseudo-classes.html    举例：p:nth-of-type(2)    选择所有p元素第二个为p的子元素<p>flex-direction 属性规定灵活项目的方向。<br>注意：如果元素不是弹性盒对象的元素，则 flex-direction 属性不起作用。</p><blockquote><p>flex-direction: row|row-reverse|column|column-reverse|initial|inherit;</p><ul><li>row                       默认值。灵活的项目将水平显示，正如一个行一样。从左至右</li><li>row-reverse          与 row 相同，但是以相反的顺序。</li><li>column               灵活的项目将垂直显示，正如一个列一样。    </li><li>column-reverse        与 column 相同，但是以相反的顺序。</li></ul></blockquote><p>默认值：    row<br>JavaScript 语法：    object.style.flexDirection=”column-reverse”</p><p>设置 <div> 元素内弹性盒元素的方向为相反的顺序：<br><img src="/images/201905/2019-05-14_102753.jpg" alt="e" title="column"></div></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> {</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">flex-direction</span><span class="selector-pseudo">:column</span>;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span> {</span></span><br><span class="line"><span class="undefined">    width: 40px;</span></span><br><span class="line"><span class="undefined">    height: 40px;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:coral;"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightblue;"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:khaki;"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:pink;"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightgrey;"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightgreen;"</span>&gt;</span>F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性。<br>flex-flow 属性用于设置或检索弹性盒模型对象的子元素排列方式。<br>flex-direction 属性规定灵活项目的方向。<br>flex-wrap 属性规定灵活项目是否拆行或拆列。<br>注意：如果元素不是弹性盒对象的元素，则 flex-flow 属性不起作用。</p><blockquote><p>flex-flow: flex-direction flex-wrap|initial|inherit;</p><ul><li>flex-direction    可能的值：row  row-reverse  column  column-reverse  initial  inherit  默认值是 “row”。  规定灵活项目的方向。</li><li>flex-wrap    可能的值：nowrap  wrap  wrap-reverse  initial  inherit  默认值是 “nowrap”。  规定灵活项目是否拆行或拆列。</li></ul></blockquote><p>默认值：    row nowrap<br>JavaScript 语法：    object.style.flexFlow=”column nowrap”</p><p>让弹性盒的元素以相反的顺序显示，且在必要的时候进行拆行：<br><img src="/images/201905/2019-05-14_104108.jpg" alt="e"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> {</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c3c3c3</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">display</span>: <span class="selector-tag">-webkit-flex</span>; <span class="comment">/* Safari */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-flex-flow</span>: <span class="selector-tag">row-reverse</span> <span class="selector-tag">wrap</span>; <span class="comment">/* Safari 6.1+ */</span></span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    flex-flow: row-reverse wrap;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span> {</span></span><br><span class="line"><span class="undefined">    width: 50px;</span></span><br><span class="line"><span class="undefined">    height: 50px;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:coral;"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightblue;"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:khaki;"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:pink;"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightgrey;"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightgreen;"</span>&gt;</span>F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>flex-grow 属性用于设置或检索弹性盒子的扩展比率。<br>注意：如果元素不是弹性盒对象的元素，则 flex-grow 属性不起作用。</p><blockquote><p>flex-grow: number|initial|inherit;<br>*number    一个数字，规定项目将相对于其他灵活的项目进行扩展的量。默认值是 0。</p></blockquote><p>默认值：    0<br>JavaScript 语法：    object.style.flexGrow=”5”</p><p>让第二个元素的宽度为其他元素的三倍：<br><img src="/images/201905/2019-05-14_104952.jpg" alt="e"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> {</span></span><br><span class="line"><span class="undefined">  width: 350px;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c3c3c3</span>;</span></span><br><span class="line"><span class="undefined">  display: flex;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span> {<span class="attribute">flex-grow</span>: <span class="number">1</span>;}</span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(2)</span> {<span class="attribute">flex-grow</span>: <span class="number">3</span>;}</span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(3)</span> {<span class="attribute">flex-grow</span>: <span class="number">1</span>;}</span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(4)</span> {<span class="attribute">flex-grow</span>: <span class="number">1</span>;}</span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(5)</span> {<span class="attribute">flex-grow</span>: <span class="number">1</span>;}</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:coral;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightblue;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:khaki;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:pink;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightgrey;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>flex-shrink 属性指定了 flex 元素的收缩规则。flex 元素仅在默认宽度之和大于容器的时候才会发生收缩，其收缩的大小是依据 flex-shrink 的值。<br>注意：如果元素不是弹性盒对象的元素，则 flex-shrink 属性不起作用。</p><blockquote><p>flex-shrink: number|initial|inherit;</p><ul><li>number    一个数字，规定项目将相对于其他灵活的项目进行收缩的量。默认值是 1。</li></ul></blockquote><p>默认值：    1<br>JavaScript 语法：    object.style.flexShrink=”5”<br><img src="/images/201905/2019-05-14_112812.jpg" alt="e"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#content</span> {</span></span><br><span class="line"><span class="undefined">  display: flex;</span></span><br><span class="line"><span class="undefined">  width: 500px;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#content</span> <span class="selector-tag">div</span> {</span></span><br><span class="line"><span class="undefined">  flex-basis: 120px;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 3<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.2</span>);</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> { </span></span><br><span class="line"><span class="undefined">  flex-shrink: 1;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box1</span> { </span></span><br><span class="line"><span class="undefined">  flex-shrink: 2; </span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color:red;"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color:lightblue;"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"background-color:yellow;"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">style</span>=<span class="string">"background-color:brown;"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">style</span>=<span class="string">"background-color:lightgreen;"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>flex-wrap 属性规定flex容器是单行或者多行，同时横轴的方向决定了新行堆叠的方向。<br>注意：如果元素不是弹性盒对象的元素，则 flex-wrap 属性不起作用。</p><blockquote><p>flex-wrap: nowrap|wrap|wrap-reverse|initial|inherit;</p><ul><li>nowrap    默认值。规定灵活的项目不拆行或不拆列。</li><li>wrap    规定灵活的项目在必要的时候拆行或拆列。</li><li>wrap-reverse    规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。</li></ul></blockquote><p>默认值：    nowrap<br>JavaScript 语法：    object.style.flexWrap=”nowrap”</p><p>让弹性盒元素在必要的时候拆行：<br><img src="/images/201905/2019-05-14_103513.jpg" alt="e" title="flex-wrap"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> {</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c3c3c3</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">display</span>: <span class="selector-tag">-webkit-flex</span>; <span class="comment">/* Safari */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-flex-wrap</span>: <span class="selector-tag">wrap</span>; <span class="comment">/* Safari 6.1+ */</span></span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    flex-wrap: wrap;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#main</span> <span class="selector-tag">div</span> {</span></span><br><span class="line"><span class="undefined">    width: 50px;</span></span><br><span class="line"><span class="undefined">    height: 50px;</span></span><br><span class="line"><span class="undefined">}</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:coral;"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightblue;"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:khaki;"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:pink;"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightgrey;"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:lightgreen;"</span>&gt;</span>F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微信小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-234 | 回文链表</title>
      <link href="/2019/05/leetcode-234/"/>
      <url>/2019/05/leetcode-234/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>请判断一个链表是否为回文链表。</p><blockquote><p><span>示例 1：</span><br>输入: 1-&gt;2<br>输出: false</p></blockquote><blockquote><p><span>示例 1：</span><br>输入: 1-&gt;2-&gt;2-&gt;1<br>输出: true<br>进阶：<br>你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>回文判断，很简单的想到栈来判断<br>也不妨将数据加入列表中，然后用首尾指针遍历判断<br>也可以直接使用python中的链表反转，然后判断相等</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        p <span class="token operator">=</span> head        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        rp <span class="token operator">=</span> li<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        li<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> li<span class="token operator">==</span>rp</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 96 ms, 在Palindrome Linked List的Python3提交中击败了94.91% 的用户<br>内存消耗 : 23.9 MB, 在Palindrome Linked List的Python3提交中击败了27.37% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>96 ms</td><td>23.9MB</td><td>python</td></tr></table>## 直接操作链表还是使用链表反向的思路。<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        pre <span class="token operator">=</span> None        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> next        <span class="token keyword">return</span> pre    <span class="token keyword">def</span> <span class="token function">getlength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token number">0</span>        p <span class="token operator">=</span> head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            n <span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> n    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: bool        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token comment" spellcheck="true">#类似的，反转链表，然后判断</span>        length <span class="token operator">=</span> self<span class="token punctuation">.</span>getlength<span class="token punctuation">(</span>head<span class="token punctuation">)</span>        mid <span class="token operator">=</span> length<span class="token operator">//</span><span class="token number">2</span>        pre<span class="token punctuation">,</span> cur <span class="token operator">=</span> None<span class="token punctuation">,</span> head        <span class="token keyword">while</span> mid<span class="token punctuation">:</span>            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            mid <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">#判断奇数偶数,奇数，再移动一次</span>        <span class="token keyword">if</span> length<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> None        left <span class="token operator">=</span> head        right <span class="token operator">=</span> self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>cur<span class="token punctuation">)</span>        <span class="token keyword">while</span> left <span class="token operator">and</span> right<span class="token punctuation">:</span>            <span class="token keyword">if</span> left<span class="token punctuation">.</span>val <span class="token operator">!=</span> right<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            left <span class="token operator">=</span> left<span class="token punctuation">.</span>next            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 104 ms, 在Palindrome Linked List的Python提交中击败了64.41% 的用户<br>内存消耗 : 31 MB, 在Palindrome Linked List的Python提交中击败了17.87% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>104 ms</td><td>31MB</td><td>python</td></tr></table><h2 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getlength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> <span class="token number">0</span>        p <span class="token operator">=</span> head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            n <span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> n    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: bool        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token comment" spellcheck="true">#类似的，反转链表，然后判断</span>        length <span class="token operator">=</span> self<span class="token punctuation">.</span>getlength<span class="token punctuation">(</span>head<span class="token punctuation">)</span>        mid <span class="token operator">=</span> length<span class="token operator">//</span><span class="token number">2</span>        cur <span class="token operator">=</span> head        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#一次性开关</span>        flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token keyword">if</span> mid<span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                mid <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#判断奇数偶数,奇数，再移动一次</span>                <span class="token keyword">if</span> length<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">and</span> flag<span class="token punctuation">:</span>                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                    flag <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token comment" spellcheck="true">#取栈顶元素判断，当前的结点的值是否相等</span>                <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">!=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 76 ms, 在Palindrome Linked List的Python提交中击败了99.44% 的用户<br>内存消耗 : 30.9 MB, 在Palindrome Linked List的Python提交中击败了28.32% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>76 ms</td><td>30.9 MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-143 | 重排链表</title>
      <link href="/2019/05/leetcode-143/"/>
      <url>/2019/05/leetcode-143/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个单链表 L：L0→L1→…→Ln-1→Ln ，<br>将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…<br>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><blockquote><p><span>示例 1：</span><br>给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.</p></blockquote><blockquote><p><span>示例 2：</span><br>给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>观察示例，分别是偶数和奇数的案例，也就说明了各自的特色。<br>如果是奇数，中间的那个节点在末尾<br>所以就可以有如下的简单思路：<br>如果是偶数，从中间拆分成两个链表，右边的逆序，然后分别重构链表。<br>如果是奇数，5//2=2，右端的结点，忽略中间节点，最后在加入中间结点到末尾。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        pre<span class="token punctuation">,</span> cur <span class="token operator">=</span> None<span class="token punctuation">,</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> next        <span class="token keyword">return</span> pre    <span class="token keyword">def</span> <span class="token function">getlength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> head        n <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            n <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> n    <span class="token keyword">def</span> <span class="token function">reorderList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: None Do not return anything, modify head in-place instead.        """</span>        <span class="token comment" spellcheck="true">#[]或者[1]，情况，都返回Head就可以了</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head       <span class="token comment" spellcheck="true">#得到链表的长度</span>        length <span class="token operator">=</span> self<span class="token punctuation">.</span>getlength<span class="token punctuation">(</span>head<span class="token punctuation">)</span>        mid <span class="token operator">=</span> length <span class="token operator">//</span> <span class="token number">2</span>        pre<span class="token punctuation">,</span> p <span class="token operator">=</span> None<span class="token punctuation">,</span> head        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 最终结点</span>        endNone <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">#统一移动，奇数偶数最后判断，处理</span>        <span class="token keyword">while</span> p <span class="token operator">and</span> count <span class="token operator">&lt;</span> mid<span class="token punctuation">:</span>            pre <span class="token operator">=</span> p            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 奇数,继续后移一位</span>        <span class="token keyword">if</span> length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> None            endNone <span class="token operator">=</span> p            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            endNone<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#偶数，就直接划分成两个链表就可以了</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> None        right <span class="token operator">=</span> self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#虚拟节点，方便串成线</span>        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        vp <span class="token operator">=</span> virtualhead        <span class="token comment" spellcheck="true">#为了直观，将左边的头结点指针定义为left</span>        left <span class="token operator">=</span> head        <span class="token keyword">while</span> left <span class="token operator">and</span> right<span class="token punctuation">:</span>            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> left            vp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next            left <span class="token operator">=</span> left<span class="token punctuation">.</span>next            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> right            vp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next            right <span class="token operator">=</span> right<span class="token punctuation">.</span>next        <span class="token keyword">if</span> endNone<span class="token punctuation">:</span>            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> endNone            vp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> None        head <span class="token operator">=</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 108 ms, 在Reorder List的Python提交中击败了100.00% 的用户<br>内存消耗 : 29.6 MB, 在Reorder List的Python提交中击败了28.67% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>108 ms</td><td>29.6MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-61 |  旋转链表</title>
      <link href="/2019/05/leetcode-61/"/>
      <url>/2019/05/leetcode-61/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。</p><blockquote><p><span>示例 1：</span><br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2<br>输出: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL<br>解释:<br>向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL<br>向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL</p></blockquote><blockquote><p><span>示例 2：</span><br>输入: 0-&gt;1-&gt;2-&gt;NULL, k = 4<br>输出: 2-&gt;0-&gt;1-&gt;NULL<br>解释:<br>向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL<br>向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL<br>向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL<br>向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>初一看，和删除倒数第k个结点有些类似，但是却实际不同，因为k值可以大于链表的长度<br>不妨将它链接成一个环形链表，但是由于链表指向的是下一个节点，这里我们可以采用两次翻转<br>不妨看看图解：<br><img src="/images/201905/2019-05-12_204458.jpg" alt="e"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getlength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> head        n <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            n<span class="token operator">+=</span><span class="token number">1</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        <span class="token keyword">return</span> n    <span class="token keyword">def</span> <span class="token function">reversel</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        pre <span class="token operator">=</span> None        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> next        <span class="token keyword">return</span> pre<span class="token punctuation">,</span> head    <span class="token keyword">def</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type k: int        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        length <span class="token operator">=</span> self<span class="token punctuation">.</span>getlength<span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 翻转链表</span>        newhead<span class="token punctuation">,</span> oldhead <span class="token operator">=</span> self<span class="token punctuation">.</span>reversel<span class="token punctuation">(</span>head<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 链接成环</span>        oldhead<span class="token punctuation">.</span>next <span class="token operator">=</span> newhead        <span class="token comment" spellcheck="true"># 从老节点的位置处，移动k个位置</span>        p <span class="token operator">=</span> oldhead        <span class="token comment" spellcheck="true">#比如当链表长度是3的时候，我们移动3次就会回到原链表，故而我们可以使用</span>        k <span class="token operator">=</span> k <span class="token operator">%</span> length        <span class="token keyword">while</span> k<span class="token punctuation">:</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            k <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># 到达最终头，需要断链，然后翻转</span>        end <span class="token operator">=</span> p<span class="token punctuation">.</span>next        p<span class="token punctuation">.</span>next <span class="token operator">=</span> None        newhead<span class="token punctuation">,</span> oldhead <span class="token operator">=</span> self<span class="token punctuation">.</span>reversel<span class="token punctuation">(</span>end<span class="token punctuation">)</span>        <span class="token keyword">return</span> newhead</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 40 ms, 在Rotate List的Python提交中击败了52.38% 的用户<br>内存消耗 : 11.7 MB, 在Rotate List的Python提交中击败了31.41% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>40 ms</td><td>11.7MB</td><td>python</td></tr></table>## 优化始终是末尾节点放置到头结点，所以这种移动可以看做是循环链表中头结点的改变，看下图：![e](/images/201905/2019-05-13_165909.jpg)不妨采用和删除倒数第K个结点类似的处理方式，就是用双指针，next和cur的距离刚好是需要移动的次数的余数，K = K % length，以减少计算次数。<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getlength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> head        n <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            n<span class="token operator">+=</span><span class="token number">1</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        <span class="token keyword">return</span> n    <span class="token keyword">def</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type k: int        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        length <span class="token operator">=</span> self<span class="token punctuation">.</span>getlength<span class="token punctuation">(</span>head<span class="token punctuation">)</span>        k <span class="token operator">=</span> k <span class="token operator">%</span> length        <span class="token comment" spellcheck="true">#k==0，说明不用移动</span>        <span class="token keyword">if</span> k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#nextpre记录next的前一个结点，也就是在while循环退出后，指向最后一个结点</span>        pre<span class="token punctuation">,</span>cur<span class="token punctuation">,</span> nextpre<span class="token punctuation">,</span> next <span class="token operator">=</span> None<span class="token punctuation">,</span>head<span class="token punctuation">,</span> head<span class="token punctuation">,</span> head        <span class="token keyword">while</span> next<span class="token punctuation">:</span>            <span class="token keyword">if</span> k<span class="token punctuation">:</span>                next <span class="token operator">=</span> next<span class="token punctuation">.</span>next                k<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                nextpre <span class="token operator">=</span> next                next <span class="token operator">=</span> next<span class="token punctuation">.</span>next        <span class="token comment" spellcheck="true">#循环完毕，短链</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">#尾首相连</span>        nextpre<span class="token punctuation">.</span>next <span class="token operator">=</span> head        <span class="token keyword">return</span> cur</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 28 ms, 在Rotate List的Python提交中击败了100.00% 的用户<br>内存消耗 : 11.8 MB, 在Rotate List的Python提交中击败了28.27% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>28 ms</td><td>11.8MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-19 | 删除链表的倒数第N个节点 中等难度</title>
      <link href="/2019/05/leetcode-19/"/>
      <url>/2019/05/leetcode-19/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</p><blockquote><p><span>示例 1：</span><br>给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.<br>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</p></blockquote><blockquote><p><span>说明：</span><br>给定的 n 保证是有效的。</p></blockquote><blockquote><p><span>进阶：</span><br>你能尝试使用一趟扫描实现吗？</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>不妨使用n值来计算指针的位置，到尾指针到达末尾节点的时候，前面的指针说明到达删除节点的前一个节点位置，可以删除。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type n: int        :rtype: ListNode        """</span>        <span class="token comment" spellcheck="true">#直接翻译,如果只有一个元素，删除的肯定是本身</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token comment" spellcheck="true">#不妨定义两个指针，per,end</span>        <span class="token comment" spellcheck="true">#由于n是有效的，所以下面我们大胆操作</span>        pre <span class="token operator">=</span> None         cur <span class="token operator">=</span> end <span class="token operator">=</span> head        <span class="token keyword">while</span> n<span class="token punctuation">:</span>            end <span class="token operator">=</span> end<span class="token punctuation">.</span>next            n<span class="token operator">-=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#扫描链表</span>        <span class="token keyword">while</span> end<span class="token punctuation">:</span>            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            end <span class="token operator">=</span> end<span class="token punctuation">.</span>next        <span class="token comment" spellcheck="true">#pre is None 说明删除的目标结点是第一个元素</span>        <span class="token keyword">if</span> pre <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head<span class="token punctuation">.</span>next        <span class="token comment" spellcheck="true">#退出后，end.next=None，也就是退出后end到达末尾，可以删除</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">return</span> head</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 32 ms, 在Remove Nth Node From End of List的Python提交中击败了100.00% 的用户<br>内存消耗 : 11.7 MB, 在Remove Nth Node From End of List的Python提交中击败了31.95% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>32 ms</td><td>11.7MB</td><td>python</td></tr></table>## 代码调整当然，可以将找元素的两个while合并在一起<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type n: int        :rtype: ListNode        """</span>        <span class="token comment" spellcheck="true">#直接翻译,如果只有一个元素，删除的肯定是本身</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token comment" spellcheck="true">#不妨定义两个指针，per,end</span>        <span class="token comment" spellcheck="true">#由于n是有效的，所以下面我们大胆操作</span>        pre <span class="token operator">=</span> None         cur <span class="token operator">=</span> end <span class="token operator">=</span> head        <span class="token comment" spellcheck="true">#扫描链表</span>        <span class="token keyword">while</span> end<span class="token punctuation">:</span>            <span class="token keyword">if</span> n<span class="token punctuation">:</span>                end <span class="token operator">=</span> end<span class="token punctuation">.</span>next                n<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                end <span class="token operator">=</span> end<span class="token punctuation">.</span>next        <span class="token keyword">if</span> pre <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#说明删除的是第一个元素</span>            <span class="token keyword">return</span> head<span class="token punctuation">.</span>next        <span class="token comment" spellcheck="true">#退出后，end.next=None，也就是退出后end到达末尾，可以删除</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">return</span> head</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 32 ms, 在Remove Nth Node From End of List的Python提交中击败了100.00% 的用户<br>内存消耗 : 11.9 MB, 在Remove Nth Node From End of List的Python提交中击败了8.43% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>32 ms</td><td>11.9MB</td><td>python</td></tr></table>## 传统做法计算链表长度，计算顺数位置，然后遍历，得到位置元素的前一个元素，删除``` pythonclass Solution(object):    def calLength(self, head):        p = head        n = 0        while p:            n+=1            p=p.next        return n<pre><code>def removeNthFromEnd(self, head, n):    &quot;&quot;&quot;    :type head: ListNode    :type n: int    :rtype: ListNode    &quot;&quot;&quot;    #直接翻译,如果只有一个元素，删除的肯定是本身    if head is None or head.next is None:        return None    length = self.calLength(head)    #由于n是有效的，我们可以用length-n，计数不妨从1开始    num = length - n    pre, cur = None, head    #num=0 , 说明是删除首结点    if num==0:        return head.next    #否则的话扫描链表,定义计数变量    count = 1    #扫描链表    while count&lt;=num:        pre = cur        cur = cur.next        count += 1    #退出后，per到达指定位置    #退出后，end.next=None，也就是退出后end到达末尾，可以删除    pre.next = pre.next.next    return head</code></pre><p>```</p><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 36 ms, 在Remove Nth Node From End of List的Python提交中击败了51.05% 的用户<br>内存消耗 : 11.8 MB, 在Remove Nth Node From End of List的Python提交中击败了23.14% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>36 ms</td><td>11.8MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICP备案的常见问题整理-非原创</title>
      <link href="/2019/05/icp/"/>
      <url>/2019/05/icp/</url>
      
        <content type="html"><![CDATA[<p><strong>Q1：ICP备案之后还要公安备案吗?</strong><br>W：</p><ul><li>ICP备案，目前国内服务器都需要ICP备案，这个就好比是网站的身份证一样。</li><li>公安局备案，是近期有些省份的要求，一般按照当地公安机关制定的地点和方式进行。如果不对网站进行公安备案，就可能会被关闭网站。</li><li>目前部分省份强制要求公安备案，慢慢的所有的省份应该都会要求公安备案。</li></ul><p>备案之后还是需要公安备案的，一步都不可以少。（原文地址：<a href="http://www.chaicp.com/list/165.html）" target="_blank" rel="noopener">http://www.chaicp.com/list/165.html）</a></p><p><strong>Q2：公安备案流程？</strong><br>公安备案官网注册账号，网址为 <a href="http://www.beian.gov.cn" target="_blank" rel="noopener">www.beian.gov.cn</a><br>1：首先访问公安备案官网注册账号，网址为 <a href="http://www.beian.gov.cn" target="_blank" rel="noopener">www.beian.gov.cn</a></p><p>2：按照网站指示逐步填写网站相关信息即可提交审核。核对里面的信息注：已经在公安机关办理过联网备案手续的网站请到 “已办网站认领” 中，手动填写域名或公安备案号进行认领申请。</p><p>3：审核完成后会给你发放一个当地省份开头的公网安备xxxxx号了。查看结果中有html样式，有要求，按要求操作即可。</p><p>　　备案是工信部规定要求，主要是为了规范网络安全化，维护网站经营者的合法权益，保障网民的合法利益;所以部分地区除了完成ICP备案后也要记得公安局备案。</p><blockquote><p>ICP备案和公安部备案一样都属国家要求的网站备案的一种。两者不相冲突，无论企业是否有做过ICP备案，只要接到公安局备案电话，就得按要求去办理备案手续。如果您未接到公安局备案的电话，也建议您去办理下公安局备案哦</p></blockquote><p><strong>Q3：ICP备案流程？</strong><br>首先你的网站需要进行ICP备案，ICP备案是向你的服务器提供商提交资料进行备案，或是自己到官方备案，备案大概需要20元的费用（主要是照像和快递资料的费用）。</p><p>拿到ICP备案号以后，到当地公安局网监支队，进行备案，需要本人身份证，ICP备案证书（证书是你拿到备案号以后，可以免费下载到的，你下载以后打印出来就可以了），在网监支队备案是免费的，不需要任何费用。</p><p>公司，集团，电子商务等经营性网站需要提供公司证件，个人的非经营性网站（就是说是免费开放的，不是赚钱为目的的网站）只需要提供身份证就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> ICP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> icp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-147 | 对链表进行插入排序</title>
      <link href="/2019/05/leetcode-147/"/>
      <url>/2019/05/leetcode-147/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>对链表进行插入排序。<br><img src="/images/201905/Insertion-sort-example-300px.gif" alt="e"></p><p>插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。<br>每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。</p><p>插入排序算法：</p><ul><li>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</li><li>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</li><li>重复直到所有输入数据插入完为止。</li></ul><blockquote><p><span>示例 1：</span><br>输入: 4-&gt;2-&gt;1-&gt;3<br>输出: 1-&gt;2-&gt;3-&gt;4</p></blockquote><blockquote><p><span>示例 1：</span><br>输入: -1-&gt;5-&gt;3-&gt;4-&gt;0<br>输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>思路比较简单，由于链表是从前到后，故而我们的插入排序也是从前到后，这里和图示的不一样。<br>然后就是比较。<br>编程的过程中，忘记了当前待插入结点值比有序链表中所有值都大的情况，调试了半天，终于发现了<br>不得不说边界很重要。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">insertionSortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#正式开始</span>        <span class="token comment" spellcheck="true">#设置虚拟头结点</span>        virturalhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        virturalhead<span class="token punctuation">.</span>next <span class="token operator">=</span> None        vp <span class="token operator">=</span> virturalhead        p <span class="token operator">=</span> cur <span class="token operator">=</span> head        <span class="token comment" spellcheck="true">#由于链表不是双向链表，这里我们从前到后扫描</span>        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#按照要求，需要先移除元素，然后插入</span>            <span class="token comment" spellcheck="true">#记录下一趟链表头结点</span>            p <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            <span class="token comment" spellcheck="true"># 将当前结点从链表中删除</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> None            <span class="token keyword">if</span> vp<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>                vp<span class="token punctuation">.</span>next <span class="token operator">=</span> cur                cur <span class="token operator">=</span> p                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">while</span> vp<span class="token punctuation">:</span>                    pre <span class="token operator">=</span> vp                    temp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next                    <span class="token comment" spellcheck="true">#最后一个，比有序链表中所有的都大，自然，无法比较</span>                    <span class="token keyword">if</span> temp <span class="token keyword">is</span> None<span class="token punctuation">:</span>                        <span class="token comment" spellcheck="true">#到了最终位置，直接插入</span>                        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur                        <span class="token keyword">break</span>                    <span class="token comment" spellcheck="true"># 定义指针同步移动</span>                    <span class="token comment" spellcheck="true"># 判断大小</span>                    <span class="token keyword">if</span> temp<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                        <span class="token comment" spellcheck="true"># 大了，说明在后面，就同步移动指针</span>                        pre <span class="token operator">=</span> temp                        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token comment" spellcheck="true"># 小于等于，说明是插入位置</span>                        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> temp                        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur                        <span class="token comment" spellcheck="true">#插入完成，跳出循环</span>                        <span class="token keyword">break</span>                    vp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next            <span class="token comment" spellcheck="true"># 恢复vp</span>            vp <span class="token operator">=</span> virturalhead            <span class="token comment" spellcheck="true">#由于递归的条件我这里设置成cur，故而，重新赋值cur为下一趟开始的链表头结点</span>            cur <span class="token operator">=</span> p        <span class="token keyword">return</span> virturalhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 3012 ms, 在Insertion Sort List的Python提交中击败了13.48% 的用户<br>内存消耗 : 15.1 MB, 在Insertion Sort List的Python提交中击败了35.71% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>3012 ms</td><td>15.1MB</td><td>python</td></tr></table>## 专空子因为leetcode官网中，提交数据，谁管你是怎么实现的，只要结果对，时间空间合适就可以。使用列表存储，然后排序，然后组成相应的数据结构<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">insertionSortList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token comment" spellcheck="true">#边界</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#正式处理</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        <span class="token comment" spellcheck="true">#排序</span>        li<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        vp <span class="token operator">=</span> virtualhead        <span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span>            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> i            vp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next        vp<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 100 ms, 在Insertion Sort List的Python提交中击败了84.27% 的用户<br>内存消耗 : 15.3 MB, 在Insertion Sort List的Python提交中击败了6.43% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>100 ms</td><td>15.3MB</td><td>python</td></tr></table>当然了，使用辅助的数据结构排序和重构的方式不止这一种，这只是一个引例。其余的都差不多。]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-148 | 排序链表</title>
      <link href="/2019/05/leetcode-148/"/>
      <url>/2019/05/leetcode-148/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。</p><blockquote><p><span>示例 1：</span><br>输入: 4-&gt;2-&gt;1-&gt;3<br>输出: 1-&gt;2-&gt;3-&gt;4</p></blockquote><blockquote><p><span>示例 2：</span><br>输入: -1-&gt;5-&gt;3-&gt;4-&gt;0<br>输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>由于题目要求空间复杂度是 O(1)，因此不能使用递归。因此这里使用 bottom-to-up 的算法来解决。</p><p>bottom-to-up 的归并思路是这样的：先两个两个的 merge，完成一趟后，再 4 个4个的 merge，直到结束。举个简单的例子：<br><code>[4,3,1,7,8,9,2,11,5,6]</code></p><blockquote><p>step=1: (3-&gt;4)-&gt;(1-&gt;7)-&gt;(8-&gt;9)-&gt;(2-&gt;11)-&gt;(5-&gt;6)<br>step=2: (1-&gt;3-&gt;4-&gt;7)-&gt;(2-&gt;8-&gt;9-&gt;11)-&gt;(5-&gt;6)<br>step=4: (1-&gt;2-&gt;3-&gt;4-&gt;7-&gt;8-&gt;9-&gt;11)-&gt;5-&gt;6<br>step=8: (1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;9-&gt;11)</p></blockquote><p>以上的思想来自评论区，看到这里，觉得很厉害。<br>然后，就想到了前面的k个k个一组翻转链表</p><pre class=" language-python"><code class="language-python"></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 3012 ms, 在Insertion Sort List的Python提交中击败了13.48% 的用户<br>内存消耗 : 15.1 MB, 在Insertion Sort List的Python提交中击败了35.71% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>3012 ms</td><td>15.1MB</td><td>python</td></tr></table>## 专空子<pre class=" language-python"><code class="language-python"></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 100 ms, 在Insertion Sort List的Python提交中击败了84.27% 的用户<br>内存消耗 : 15.3 MB, 在Insertion Sort List的Python提交中击败了6.43% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>100 ms</td><td>15.3MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 暂时没有解答 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-25 | k个一组翻转链表</title>
      <link href="/2019/05/leetcode-25/"/>
      <url>/2019/05/leetcode-25/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出一个链表，每 k 个节点一组进行翻转，并返回翻转后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 k 的整数倍，那么将最后剩余节点保持原有顺序。</p><blockquote><p><span>示例：</span><br>给定这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5<br>当 k = 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5<br>当 k = 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p></blockquote><blockquote><p><span>说明：</span></p><ul><li>你的算法只能使用常数的额外空间。</li><li>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</li></ul></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>不妨采用计数变量，当计数变量满足条件，我们就进行链表中子链表反转的操作，直到链表尾部。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        pre <span class="token operator">=</span> None        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            <span class="token comment" spellcheck="true"># 翻转链</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> next        <span class="token keyword">return</span> pre    <span class="token keyword">def</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type k: int        :rtype: ListNode        """</span>        <span class="token comment" spellcheck="true">#k个翻转，很容易想到链表的翻转</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None <span class="token operator">or</span> k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#正式处理</span>        <span class="token comment" spellcheck="true">#定义计数变量count</span>        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        virtualhead<span class="token punctuation">.</span>next <span class="token operator">=</span> head        vp <span class="token operator">=</span> virtualhead        count <span class="token operator">=</span> <span class="token number">0</span>        phead <span class="token operator">=</span> p <span class="token operator">=</span> head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> count<span class="token operator">%</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#记录下一次交换的开始节点</span>                pnext <span class="token operator">=</span> p<span class="token punctuation">.</span>next                <span class="token comment" spellcheck="true">#需要转换的子链表尾置空</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> None                <span class="token comment" spellcheck="true">#换后，头变尾，尾变头，记录头，也即是换后的尾</span>                switchtail <span class="token operator">=</span> phead                vp<span class="token punctuation">.</span>next <span class="token operator">=</span> self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>phead<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#移动vp到交换后的尾部，也就是保存的头部</span>                vp <span class="token operator">=</span> switchtail                <span class="token comment" spellcheck="true">#链接成一个整链表</span>                vp<span class="token punctuation">.</span>next <span class="token operator">=</span> pnext                <span class="token comment" spellcheck="true">#移动指针，开始下一次</span>                phead <span class="token operator">=</span> p <span class="token operator">=</span> pnext            <span class="token keyword">else</span><span class="token punctuation">:</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 56 ms, 在Reverse Nodes in k-Group的Python提交中击败了53.17% 的用户<br>内存消耗 : 13.2 MB, 在Reverse Nodes in k-Group的Python提交中击败了43.17% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>56 ms</td><td>13.2MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-24 |  两两交换链表中的节点 中等难度</title>
      <link href="/2019/05/leetcode-24/"/>
      <url>/2019/05/leetcode-24/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><blockquote><p><span>示例 1：</span><br>给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>不妨看成是奇数和偶数链表，的拆分，然后交换位置。<br>所以我们就回到了之前我们做过的奇偶链表的拆分问题上（leetcode-328 | 奇偶链表）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">split</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> odd<span class="token punctuation">,</span> even<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        op <span class="token operator">=</span> odd        ep <span class="token operator">=</span> even        <span class="token comment" spellcheck="true"># 定义计数变量</span>        i <span class="token operator">=</span> <span class="token number">1</span>        p <span class="token operator">=</span> head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                ep<span class="token punctuation">.</span>next <span class="token operator">=</span> p                ep <span class="token operator">=</span> ep<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                op<span class="token punctuation">.</span>next <span class="token operator">=</span> p                op <span class="token operator">=</span> op<span class="token punctuation">.</span>next            i <span class="token operator">+=</span> <span class="token number">1</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        op<span class="token punctuation">.</span>next <span class="token operator">=</span> ep<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token keyword">return</span> odd<span class="token punctuation">,</span> even<span class="token punctuation">,</span> i<span class="token number">-1</span>    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#正式处理</span>        odd <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        even <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#返回奇偶链表的头指针，和head链表的总长度</span>        op<span class="token punctuation">,</span> ep<span class="token punctuation">,</span> length <span class="token operator">=</span> self<span class="token punctuation">.</span>split<span class="token punctuation">(</span>odd<span class="token punctuation">,</span> even<span class="token punctuation">,</span> head<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#重新赋值，指针后移</span>        op<span class="token punctuation">,</span> ep <span class="token operator">=</span> odd<span class="token punctuation">.</span>next<span class="token punctuation">,</span> even<span class="token punctuation">.</span>next        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        vp <span class="token operator">=</span> virtualhead        <span class="token comment" spellcheck="true">#两次，就不用设置变量，来分奇偶，一次循环加入两次，也减少了循环次数</span>        <span class="token keyword">while</span> op <span class="token operator">and</span> ep<span class="token punctuation">:</span>            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> ep            ep <span class="token operator">=</span> ep<span class="token punctuation">.</span>next            vp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> op            op <span class="token operator">=</span> op<span class="token punctuation">.</span>next            vp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next        <span class="token comment" spellcheck="true">#最后可能剩余奇数链表的最后一个结点，需要另做判断，操作结点</span>        <span class="token keyword">if</span> length <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> op            vp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next        vp<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 32 ms, 在Swap Nodes in Pairs的Python提交中击败了92.25% 的用户<br>内存消耗 : 11.8 MB, 在Swap Nodes in Pairs的Python提交中击败了32.62% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>32 ms</td><td>11.8MB</td><td>python</td></tr></table># 优化类似的，我们可以考虑使用一趟遍历解决问题，不妨试试。不过这里有一点需要注意，也就是我们的指针node1和node2交换过后，我们更新结点应当注意![e](/images/201905/2019-05-08_160649.jpg "图解注意事项")如图所示，下一次更新的时候，我们的pre指向的结点是node1，而不是不经过大脑的Node2<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#正式处理</span>        <span class="token comment" spellcheck="true">#需要定义四个指针</span>        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        virtualhead<span class="token punctuation">.</span>next <span class="token operator">=</span> head        vp <span class="token operator">=</span> virtualhead        <span class="token keyword">while</span> vp<span class="token punctuation">.</span>next <span class="token operator">and</span> vp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            node1 <span class="token operator">=</span> vp<span class="token punctuation">.</span>next            node2 <span class="token operator">=</span> node1<span class="token punctuation">.</span>next            next <span class="token operator">=</span> node2<span class="token punctuation">.</span>next            <span class="token comment" spellcheck="true">#开始</span>            node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node1            node1<span class="token punctuation">.</span>next <span class="token operator">=</span> next            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> node2            <span class="token comment" spellcheck="true">#移动指针,不是node2</span>            vp <span class="token operator">=</span> node1        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 32 ms, 在Swap Nodes in Pairs的Python提交中击败了92.25% 的用户<br>内存消耗 : 11.7 MB, 在Swap Nodes in Pairs的Python提交中击败了37.11% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>32 ms</td><td>11.7MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-21 | 合并两个有序链表 简单难度</title>
      <link href="/2019/05/leetcode-21/"/>
      <url>/2019/05/leetcode-21/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><blockquote><p><span>示例 1：</span><br>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>比较简单，遍历两个链表，比较大小，加入新链表即可。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type l1: ListNode        :type l2: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> l1 <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> l2        <span class="token keyword">if</span> l2 <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> l1        <span class="token comment" spellcheck="true">#正式开始</span>        p<span class="token punctuation">,</span> q <span class="token operator">=</span> l1<span class="token punctuation">,</span> l2        <span class="token comment" spellcheck="true">#不妨设置虚拟头结点</span>        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        vp <span class="token operator">=</span> virtualhead        <span class="token keyword">while</span> p <span class="token operator">or</span> q<span class="token punctuation">:</span>            <span class="token keyword">if</span> p <span class="token operator">and</span> q<span class="token punctuation">:</span>                <span class="token keyword">if</span> p<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> q<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                    vp<span class="token punctuation">.</span>next <span class="token operator">=</span> p                    <span class="token comment" spellcheck="true">#vp = vp.next</span>                    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next                <span class="token keyword">else</span><span class="token punctuation">:</span>                    vp<span class="token punctuation">.</span>next <span class="token operator">=</span> q                    <span class="token comment" spellcheck="true">#vp = vp.next</span>                    q <span class="token operator">=</span> q<span class="token punctuation">.</span>next            <span class="token keyword">elif</span> p<span class="token punctuation">:</span>                vp<span class="token punctuation">.</span>next <span class="token operator">=</span> p                <span class="token comment" spellcheck="true">#vp = vp.next</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                vp<span class="token punctuation">.</span>next <span class="token operator">=</span> q                <span class="token comment" spellcheck="true">#vp = vp.next</span>                q <span class="token operator">=</span> q<span class="token punctuation">.</span>next            vp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 44 ms, 在Merge Two Sorted Lists的Python提交中击败了23.88% 的用户<br>内存消耗 : 11.7 MB, 在Merge Two Sorted Lists的Python提交中击败了34.70% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>44 ms</td><td>11.7MB</td><td>python</td></tr></table>## 优化不必建立列表存储，直接加入<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type l1: ListNode        :type l2: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> l1 <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> l2        <span class="token keyword">if</span> l2 <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> l1        <span class="token comment" spellcheck="true">#正式开始</span>        p<span class="token punctuation">,</span> q <span class="token operator">=</span> l1<span class="token punctuation">,</span> l2        <span class="token comment" spellcheck="true">#不妨设置虚拟头结点</span>        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        vp <span class="token operator">=</span> virtualhead        <span class="token keyword">while</span> p <span class="token operator">and</span> q<span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> q<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                vp<span class="token punctuation">.</span>next <span class="token operator">=</span> p                <span class="token comment" spellcheck="true">#vp = vp.next</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                vp<span class="token punctuation">.</span>next <span class="token operator">=</span> q                <span class="token comment" spellcheck="true">#vp = vp.next</span>                q <span class="token operator">=</span> q<span class="token punctuation">.</span>next            vp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next        <span class="token keyword">if</span> p<span class="token punctuation">:</span>            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> p        <span class="token keyword">if</span> q<span class="token punctuation">:</span>            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> q        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 40 ms, 在Merge Two Sorted Lists的Python提交中击败了53.32% 的用户<br>内存消耗 : 11.7 MB, 在Merge Two Sorted Lists的Python提交中击败了34.09% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>40 ms</td><td>11.7MB</td><td>python</td></tr></table><p>当然了，上面的两个<code>if</code>还可以简化：<code>vp.next = p if p else q</code><br>不过，运算量是一样的，只是代码量减少了。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-82 | 删除排序链表中的重复元素 II</title>
      <link href="/2019/05/leetcode-82/"/>
      <url>/2019/05/leetcode-82/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 没有重复出现 的数字。</p><blockquote><p><span>示例 1：</span><br>输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5<br>输出: 1-&gt;2-&gt;5</p></blockquote><blockquote><p><span>示例 2：</span><br>输入: 1-&gt;1-&gt;1-&gt;2-&gt;3<br>输出: 2-&gt;3</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>以前做过类似的题目，也就是删除重复的结点，判断当前元素和下一个元素是否相等，相等就后移，然后到下一个不等的结点，设置链接即可。<br>这里有所不同，这里是只要重复就删除所有<br>看第二个示例，可以发现，我们需要虚拟头结点<br>这里我们不妨走两趟，第一趟，我们删除重复元素，并记录我们的重复元素是什么<br>第二趟我们删除记录的重复元素</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        virtualhead<span class="token punctuation">.</span>next <span class="token operator">=</span> head        cur <span class="token operator">=</span> head        <span class="token comment" spellcheck="true">#记录元素</span>        record <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> cur <span class="token operator">and</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">:</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">==</span> next<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                temp <span class="token operator">=</span> next<span class="token punctuation">.</span>next                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> temp                record<span class="token punctuation">.</span>add<span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>                              cur <span class="token operator">=</span> temp            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> next        <span class="token comment" spellcheck="true">#将记录的元素删除</span>        pre <span class="token operator">=</span> virtualhead        cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token keyword">in</span> record<span class="token punctuation">:</span>                pre<span class="token punctuation">.</span>next <span class="token operator">=</span> next                cur <span class="token operator">=</span> next            <span class="token keyword">else</span><span class="token punctuation">:</span>                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> next        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 44 ms, 在Remove Duplicates from Sorted List II的Python提交中击败了68.67% 的用户<br>内存消耗 : 11.8 MB, 在Remove Duplicates from Sorted List II的Python提交中击败了27.43% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>44 ms</td><td>11.8MB</td><td>python</td></tr></table>## 另一种方法可以采用一趟循环解决问题加入虚拟头结点，然后判断后两个节点的值是否一样，一样就都删除<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token comment" spellcheck="true">#我这里定义三个指针，如果结点小于2,我这里是不做循环的</span>        <span class="token comment" spellcheck="true">#0个或者1个的情况</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None <span class="token operator">or</span> head<span class="token punctuation">.</span>next <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#2个结点的情况</span>        <span class="token keyword">if</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token keyword">is</span>  None<span class="token punctuation">:</span>            <span class="token keyword">if</span> head<span class="token punctuation">.</span>val <span class="token operator">==</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                <span class="token keyword">return</span> None            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#其他情况</span>        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        virtualhead<span class="token punctuation">.</span>next <span class="token operator">=</span> head        pre <span class="token operator">=</span> virtualhead        cur <span class="token operator">=</span> head        flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            <span class="token comment" spellcheck="true">#边界，最后一次next is None，没有val</span>            <span class="token keyword">if</span> next <span class="token keyword">is</span> None<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#print((pre.val, cur.val, flag))</span>                <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> next                    cur <span class="token operator">=</span> next                <span class="token keyword">break</span>            <span class="token comment" spellcheck="true">#非边界</span>            <span class="token comment" spellcheck="true">#判断cur和next，而pre是链接指针的</span>            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">==</span> next<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#由于需要统一，这里我放置变量flag，标志上一趟相等</span>                flag <span class="token operator">=</span> <span class="token boolean">True</span>                cur <span class="token operator">=</span> next            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#这里需要判断标志</span>                <span class="token keyword">if</span> flag<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true">#print((pre.val, cur.val, next.val, flag))</span>                    pre<span class="token punctuation">.</span>next <span class="token operator">=</span> next                    cur <span class="token operator">=</span> next                    flag <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true">#print((pre.val, cur.val, next.val, flag))</span>                    pre <span class="token operator">=</span> cur                    cur <span class="token operator">=</span> next        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 60 ms, 在Remove Duplicates from Sorted List II的Python提交中击败了14.00% 的用户<br>内存消耗 : 11.7 MB, 在Remove Duplicates from Sorted List II的Python提交中击败了30.21% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>60 ms</td><td>11.7MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-237 | 删除链表中的节点</title>
      <link href="/2019/05/leetcode-237/"/>
      <url>/2019/05/leetcode-237/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。</p><p>现有一个链表 – head = [4,5,1,9]，它可以表示为:<br><img src="/images/201905/2019-5-7_example.png" alt="e"></p><blockquote><p><span>示例 1：</span><br>输入: head = [4,5,1,9], node = 5<br>输出: [4,1,9]<br>解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</p></blockquote><blockquote><p><span>示例 2：</span><br>输入: head = [4,5,1,9], node = 1<br>输出: [4,5,9]<br>解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</p></blockquote><blockquote><p><span>说明：</span><br>链表至少包含两个节点。<br>链表中所有节点的值都是唯一的。<br>给定的节点为非末尾节点并且一定是链表中的一个有效节点。<br>不要从你的函数中返回任何结果。</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>不妨取数据到列表中，然后根据题意操作，然后构成数据格式<br>和上一道题（86）类似</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type node: ListNode        :rtype: void Do not return anything, modify node in-place instead.        """</span>        <span class="token comment" spellcheck="true">#值交换</span>        node<span class="token punctuation">.</span>val<span class="token punctuation">,</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">,</span> node<span class="token punctuation">.</span>val        node<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 40 ms, 在Delete Node in a Linked List的Python提交中击败了100.00% 的用户<br>内存消耗 : 12.2 MB, 在Delete Node in a Linked List的Python提交中击败了35.23% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>40 ms</td><td>12.2MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-203 | 移除链表元素</title>
      <link href="/2019/05/leetcode-203/"/>
      <url>/2019/05/leetcode-203/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>删除链表中等于给定值 val 的所有节点。</p><blockquote><p><span>示例 1：</span><br>输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6<br>输出: 1-&gt;2-&gt;3-&gt;4-&gt;5</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>很简单，不妨加一个虚拟头节点，然后统一判断，删除。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type val: int        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        virtualhead<span class="token punctuation">.</span>next <span class="token operator">=</span> head        pre <span class="token operator">=</span> virtualhead        cur <span class="token operator">=</span> head        <span class="token comment" spellcheck="true">#循环删除</span>        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            <span class="token keyword">if</span> cur<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">:</span>                pre<span class="token punctuation">.</span>next <span class="token operator">=</span> next                cur <span class="token operator">=</span> next            <span class="token keyword">else</span><span class="token punctuation">:</span>                pre <span class="token operator">=</span> cur                cur <span class="token operator">=</span> next        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 84 ms, 在Remove Linked List Elements的Python提交中击败了94.74% 的用户<br>内存消耗 : 18.5 MB, 在Remove Linked List Elements的Python提交中击败了38.04% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>84 ms</td><td>18.5MB</td><td>python</td></tr></table>## 额外空间列表存储数据，然后删除，最后重构<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type val: int        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>val <span class="token operator">!=</span> val<span class="token punctuation">:</span>                li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        vitrualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        vp <span class="token operator">=</span> vitrualhead        <span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span>            vp<span class="token punctuation">.</span>next <span class="token operator">=</span> i            vp <span class="token operator">=</span> vp<span class="token punctuation">.</span>next        vp<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token keyword">return</span> vitrualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 92 ms, 在Remove Linked List Elements的Python提交中击败了29.70% 的用户<br>内存消耗 : 18.6 MB, 在Remove Linked List Elements的Python提交中击败了34.36% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>92 ms</td><td>18.6MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>seo-1 |  简介</title>
      <link href="/2019/05/seo-1/"/>
      <url>/2019/05/seo-1/</url>
      
        <content type="html"><![CDATA[<p>今天在图书馆看见了SEO优化的书，然后就想着看看这本书，做好笔记。</p><p>SEO（Search Engine Optimizers 搜索引擎优化）</p><blockquote><p>to use some techinics to make your website in the top places in search engine, when somebody is using engine to find something.</p></blockquote><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>2002年，SEO引入国内<br>它不是针对某一个单一的搜索引擎，而是对网站进行整体修改，以符合搜索引擎的搜索原则，使网站在搜索引擎中的排名靠前。<br>SEO涉及：网站结构、页面设计、内容添加以及各种外部条件等。<br>SEO既是一种技术，也是一种营销手段，归属于主推被动式营销，通过迎合用户的搜索习惯，达到营销的目的。在搜索的结果中，看到的排名是SEO的载体。</p><p>谷歌是世界上最大的搜索引擎提供商，所以也是世界上SEO从业人员主要的研究对象。<br>在国内，百度和雅虎也是SEO工作人员主要的研究对象</p><h2 id="1-1-SEO与SEM"><a href="#1-1-SEO与SEM" class="headerlink" title="1.1 SEO与SEM"></a>1.1 SEO与SEM</h2><p>SEM（Search Engine Marketing）搜索引擎营销<br>是一种新的网络销售形势，它所做的就是全面而有效的利用搜索引擎进行网络营销和推广。<br>SEO是SEM的一部分，一般而言可以这样认为：SEM就是付费排名，SEO就是自然排名<br>两者都有着共同的目标，就是使网站出现在搜索结果的更靠前位置。</p><h1 id="2-网站设计影响SEO的因素"><a href="#2-网站设计影响SEO的因素" class="headerlink" title="2. 网站设计影响SEO的因素"></a>2. 网站设计影响SEO的因素</h1><p>一个网站想获得更好的排名，不是简单的加几个关键字就能够做到的，网站的整体结构如果不被搜索引擎认可，就等于我们将搜索引擎带入到由网页和内容所组成的迷宫中，这样会使搜索引擎迷惑，导致网站不被收录，或者没有很好的排名。</p><h2 id="2-1-首先从域名开始"><a href="#2-1-首先从域名开始" class="headerlink" title="2.1 首先从域名开始"></a>2.1 首先从域名开始</h2><p>域名的后缀、长短以及拼写都会带来不同的结果。</p><h3 id="哪些域名权重高？"><a href="#哪些域名权重高？" class="headerlink" title="哪些域名权重高？"></a>哪些域名权重高？</h3><p>域名权重也就是搜索引擎对域名质量的认可度，一般而言，edu、gov、org域名在搜索引擎中的权重要比一般的域名权重高。<br>com是国际域名，cn是国内域名，所以com域名会得到更高的权重。<br><strong>老域名的权重高于新域名的权重</strong><br>对于网站而言，收购老域名会让新网站快速发展</p><h3 id="域名长短是否影响SEO？"><a href="#域名长短是否影响SEO？" class="headerlink" title="域名长短是否影响SEO？"></a>域名长短是否影响SEO？</h3><p>域名的长短，本身并不影响搜索引擎的工作，但是对于浏览者而言，域名越短，就越容易记忆。<br>在SEO工作中，有一个衡量的标准就是用户的回访度，也就是黏性。如果一个域名越容易被识别和记忆，那么对于黏性是有着一定的提高效果的，用户回访度越高，说明网站的质量越高。<br><strong>搜索引擎内容为王</strong><br>搜索引擎会将流量送给拥有不错内容的网站</p><h3 id="域名存在时间对SEO的影响"><a href="#域名存在时间对SEO的影响" class="headerlink" title="域名存在时间对SEO的影响"></a>域名存在时间对SEO的影响</h3><p>搜索引擎认为，网站存在的时间是评价网站质量的一个因素，运行时间越长，也就说明能给用户带来更好的用户体验，从而运行时间较长的网站，有着较高的权重。</p><p>注册域名后，即使网站没有制作完成，也要先放一个简单的页面上去，通过外链等手段让搜索引擎收录，待网站制作完成后，再传上去，这样就相当于是将一个搜索引擎收录的网站进行改版。</p><h3 id="查询空间所在地址"><a href="#查询空间所在地址" class="headerlink" title="查询空间所在地址"></a>查询空间所在地址</h3><p><a href="http://www.ip138.com" target="_blank" rel="noopener">www.ip138.com</a> 可以查询</p><h3 id="访问速度对SEO的影响"><a href="#访问速度对SEO的影响" class="headerlink" title="访问速度对SEO的影响"></a>访问速度对SEO的影响</h3><p>一个网页6秒之内打不开，被用户关闭的概率很大，同样的使用爬虫爬取的时候，会判断你的网站的打开速度。</p><p>自己测试可以使用ping 查看地址返回的数据，网上也有现成的工具 <a href="http://www.linkwan.com/gb/broadmeter/speed/responsespeedtest.asp" target="_blank" rel="noopener">http://www.linkwan.com/gb/broadmeter/speed/responsespeedtest.asp</a> 输入即可查询。</p><h3 id="测试空间的稳定性"><a href="#测试空间的稳定性" class="headerlink" title="测试空间的稳定性"></a>测试空间的稳定性</h3><p>一般而言，有试用，可以试用一下看看。<br>网上也有一些工具，可以测评。不妨百度一下。</p><h3 id="选择虚拟主机还是服务器"><a href="#选择虚拟主机还是服务器" class="headerlink" title="选择虚拟主机还是服务器"></a>选择虚拟主机还是服务器</h3><p>广义上讲，服务器是指网络中能对其他机器提供某些服务的计算机系统。<br>如果一台PC对外提供FTP服务，就可以叫做服务器。<br>所谓虚拟主机，就是把一台运行在互联网上的服务器划分成多个虚拟的服务器，每一个虚拟主机具有独立的域名和完整的Internet服务器（支持WWW/FTP/E-mail等）功能。</p><p>可以这么理解：服务器可以看做一台电脑，独立性好，具有较高的权限，可以自由安装应用软件。<br>虚拟主机，功能限制比较多，可管理性不高。</p><p>不得不提的是，虚拟主机便宜，服务器贵。</p><p>从搜索引擎的角度上讲，选用服务器比选择虚拟机占优势。<br>虚拟主机，成百上千个虚拟主机公用一个IP地址，假设一个或者多个网站受到处罚，其他则会受到牵连。<br>服务器，也就是一个电脑，拥有独立的IP地址，则不会有上述问题。</p>]]></content>
      
      
      <categories>
          
          <category> seo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-NexT主题各类标签用法</title>
      <link href="/2019/05/usehexo-8/"/>
      <url>/2019/05/usehexo-8/</url>
      
        <content type="html"><![CDATA[<h1 id="使用fontawesome字体"><a href="#使用fontawesome字体" class="headerlink" title="使用fontawesome字体"></a>使用fontawesome字体</h1><p>一句话将Font Awesome加入您的网页中。您完全不用下载或者安装任何东西！<br>将以下代码粘贴到网页HTML代码的 &lt; head&gt;部分.</p><blockquote><p>&lt;link href=”//netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css” rel=”stylesheet”&gt;</p></blockquote><p>参考下面的示例，然后开始使用Font Awesome吧!</p><h2 id="基本图标"><a href="#基本图标" class="headerlink" title="基本图标"></a>基本图标</h2><p>您可以将Font Awesome图标使用在几乎任何地方，只需要使用CSS前缀 fa ，再加上图标名称。 Font Awesome是为使用内联元素而设计的。我们通常更喜欢使用 &lt;i&gt; ，因为它更简洁。 但实际上使用 &lt;span&gt; 才能更加语义化。</p><p><i class="fa fa-camera-retro"></i> fa-camera-retro</p><blockquote><p>&lt;i class=”fa fa-camera-retro”&gt;&lt;/i&gt; fa-camera-retro</p></blockquote><h2 id="大图标"><a href="#大图标" class="headerlink" title="大图标"></a>大图标</h2><p>如果您修改了图标容器的字体大小，图标大小会随之改变。同样的变化也会发生在颜色、阴影等其它任何CSS支持的效果上。<br>使用 fa-lg (33%递增)、fa-2x、 fa-3x、fa-4x，或者 fa-5x 类 来放大图标。<br><i class="fa fa-camera-retro fa-lg"></i> fa-lg<br><i class="fa fa-camera-retro fa-2x"></i> fa-2x<br><i class="fa fa-camera-retro fa-3x"></i> fa-3x<br><i class="fa fa-camera-retro fa-4x"></i> fa-4x<br><i class="fa fa-camera-retro fa-5x"></i> fa-5x</p><blockquote><p>&lt;i class=”fa fa-camera-retro fa-lg”&gt;&lt;/i&gt; fa-lg<br>&lt;i class=”fa fa-camera-retro fa-2x”&gt;&lt;/i&gt; fa-2x<br>&lt;i class=”fa fa-camera-retro fa-3x”&gt;&lt;/i&gt; fa-3x<br>&lt;i class=”fa fa-camera-retro fa-4x”&gt;&lt;/i&gt; fa-4x<br>&lt;i class=”fa fa-camera-retro fa-5x”&gt;&lt;/i&gt; fa-5x</p></blockquote><p>如果图标的底部和顶部被截断了，您需要增加行高来解决此问题。</p><h2 id="固定宽度"><a href="#固定宽度" class="headerlink" title="固定宽度"></a>固定宽度</h2><p>使用 fa-fw 可以将图标设置为一个固定宽度。主要用于不同宽度图标无法对齐的情况。 尤其在列表或导航时起到重要作用。</p><div class="list-group">  <a class="list-group-item" href="#"><i class="fa fa-home fa-fw"></i>&nbsp; Home</a>  <a class="list-group-item" href="#"><i class="fa fa-book fa-fw"></i>&nbsp; Library</a>  <a class="list-group-item" href="#"><i class="fa fa-pencil fa-fw"></i>&nbsp; Applications</a>  <a class="list-group-item" href="#"><i class="fa fa-cog fa-fw"></i>&nbsp; Settings</a></div><blockquote><p>&lt;div class=”list-group”&gt;<br>  &lt;a class=”list-group-item” href=”#”&gt;&lt;i class=”fa fa-home fa-fw”&gt;&lt;/i&gt;&nbsp; Home&lt;/a&gt;<br>  &lt;a class=”list-group-item” href=”#”&gt;&lt;i class=”fa fa-book fa-fw”&gt;&lt;/i&gt;&nbsp; Library&lt;/a&gt;<br>  &lt;a class=”list-group-item” href=”#”&gt;&lt;i class=”fa fa-pencil fa-fw”&gt;&lt;/i&gt;&nbsp; Applications&lt;/a&gt;<br>  &lt;a class=”list-group-item” href=”#”&gt;&lt;i class=”fa fa-cog fa-fw”&gt;&lt;/i&gt;&nbsp; Settings&lt;/a&gt;<br>&lt;/div&gt;</p></blockquote><h2 id="用于列表"><a href="#用于列表" class="headerlink" title="用于列表"></a>用于列表</h2><p>使用 fa-ul 和 fa-li 便可以简单的将无序列表的默认符号替换掉。</p><ul class="fa-ul">  <li><i class="fa-li fa fa-check-square"></i>List icons</li>  <li><i class="fa-li fa fa-check-square"></i>can be used</li>  <li><i class="fa-li fa fa-spinner fa-spin"></i>as bullets</li>  <li><i class="fa-li fa fa-square"></i>in lists</li></ul>``` html<ul class="fa-ul">  <li><i class="fa-li fa fa-check-square"></i>List icons</li>  <li><i class="fa-li fa fa-check-square"></i>can be used</li>  <li><i class="fa-li fa fa-spinner fa-spin"></i>as bullets</li>  <li><i class="fa-li fa fa-square"></i>in lists</li></ul>```<h2 id="边框与对齐"><a href="#边框与对齐" class="headerlink" title="边框与对齐"></a>边框与对齐</h2><p>使用 fa-border 以及 pull-right 或 pull-left 可以轻易构造出引用的特殊效果。</p><p><i class="fa fa-quote-left fa-3x pull-left fa-border"></i><br>…tomorrow we will run faster, stretch out our arms farther…<br>And then one fine morning— So we beat on, boats against the<br>current, borne back ceaselessly into the past.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-quote-left fa-3x pull-left fa-border<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>...tomorrow we will run faster, stretch out our arms farther...And then one fine morning— So we beat on, boats against thecurrent, borne back ceaselessly into the past.</code></pre><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>使用 fa-spin 类来使任意图标旋转，现在您还可以使用 fa-pulse 来使其进行8方位旋转。尤其适合 fa-spinner、fa-refresh 和 fa-cog 。</p><p><i class="fa fa-spinner fa-spin"></i><br><i class="fa fa-circle-o-notch fa-spin"></i><br><i class="fa fa-refresh fa-spin"></i><br><i class="fa fa-cog fa-spin"></i><br><i class="fa fa-spinner fa-pulse"></i></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-spinner fa-spin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-circle-o-notch fa-spin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-refresh fa-spin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-cog fa-spin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-spinner fa-pulse<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEO优化设置</title>
      <link href="/2019/05/usehexo-7/"/>
      <url>/2019/05/usehexo-7/</url>
      
        <content type="html"><![CDATA[<p>虽说写博客不是为了搜索排名来写，但是，一定的搜索引擎流量或许能够让博客被更多的人知晓，也就有可能认识到与你志同道合的朋友~ 这里记录一些简单的SEO做法<br>1、添加robots.txt<br>　　robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。<br>这里推荐我这种写法(当然，hexo的版本不同可能文件目录有所不同)<br>robots.txt 放置在网站的根目录中，这里也就是我们的public文件下</p><pre><code># welcome to : www.baiyazi.topUser-agent: *Allow: /Allow: /archives/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /lib/Sitemap: https://www.baiyazi.top/sitemap.xmlSitemap: https://www.baiyazi.top/baidusitemap.xml</code></pre><p>2、安装sitemap插件<br>sitemap在SEO过程中有着十分重要的地位，同时也能限制蜘蛛对某些特定目录的爬取。</p><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站</p><p>首先安装插件<br>在站点的根目录下执行以下命令：</p><pre><code>npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save</code></pre><p>然后配置博客配置文件，在_config.yml中添加如下代码：</p><pre><code># 自动生成sitemapsitemap:    path: sitemap.xmlbaidusitemap:    path: baidusitemap.xml</code></pre><p>最后编译博客文件：</p><pre><code>hexo g</code></pre><p>如果你在你的博客根目录的public下面发现生成了sitemap.xml以及baidusitemap.xml就表示成功了</p><p>每次hexo g后都会在/public目录下生成sitemap.xml和baidusitemap.xml，这就是你的站点地图。</p><p>优化结构：</p><p>seo搜索引擎优化认为，网站的最佳结构是用户从首页点击三次就可以到达任何一个页面，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：</p><pre><code># URL## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;url: http://baiyazi.toproot: /permalink: :year/:month/:title/permalink_defaults:</code></pre><p>开启SEO优化选项<br>hexo博客next提供了seo优化选项，在主题配置文件_config.yml中有个选项是seo，默认是false，改成true即开启了seo优化，会进行一些seo优化，如改变博文title等</p><pre><code>seo: true</code></pre><p>开启推送</p><p>百度站长平台<br><a href="http://zhanzhang.baidu.com/" target="_blank" rel="noopener">http://zhanzhang.baidu.com/</a><br>首先要配置站点认证<br>这里有一个坑需要注意。如果你的hexo博客是托管在github上的就不要用html静态key来做验证了。应该是域名解析的方式也就是别名解析。</p><p>我这里在阿里云的控制台中添加一个按照百度站长管理平台要求的CNAME记录：</p><p><img src="/images/201905/2019-05-06_165703.jpg" alt="e"></p><p>然后再点击验证，等一会儿就可以看见：</p><p><img src="/images/201905/2019-05-06_165850.jpg" alt="e" title="验证成功"></p><p>认证成功后找到Robots：<br>前面我们设置了站点地图sitemap和robots文件，这里检测一下就没什么问题：<br><img src="/images/201905/2019-05-06_164627.jpg" alt="e" title="robots.txt"></p><p>开启推送<br>然后就可以开始推送了，基本上推送有三种方式：主动推送&gt;自动推送&gt;sitemap三种，一般主动提交比手动提交效果好。</p><p>先看看自动推送<br>把下面的代码放到D:\lang_blog\themes\next\source\js\src目录下，文件名为baitui.js<br>下面的代码来自站长平台中的-链接提交-自动推送<br>自动推送代码如何安装使用？<br>站长需要在每个页面的HTML代码中包含以下自动推送JS代码：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> bp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> curProtocol <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curProtocol <span class="token operator">===</span> <span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://zz.bdstatic.com/linksubmit/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://push.zhanzhang.baidu.com/push.js'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>为了方便，可以在模板文件中引入：</p><pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/baitui.js&quot;&gt;&lt;/script&gt;</code></pre><p>这样只要访问你的这个页面，就会自动向百度推送你的这个网页。</p><p>可以看见，自动提交中有sitemap方式，</p><p>提交sitemap<br>可以看看你自己网站的sitemap:<br><a href="https://baiyazi.top/baidusitemap.xml" target="_blank" rel="noopener">https://baiyazi.top/baidusitemap.xml</a><br>根据提示操作即可。建议采用自动提交额，手动提交会累死人</p><p>提交完了等着就好了，可能要很久才生效。。。</p><hr><p>最后就是一些优化的配置，关键字等</p><p>在文章模板中scaffolds/post.md中添加如下代码，用于生成的文章中添加关键字和描述。</p><pre><code>keywords:description:</code></pre><p>首页title优化<br>更改index.swig文件，文件路径是 your-hexo-site\themes\next\layout ：</p><pre class=" language-text"><code class="language-text">{% block title %}{{ config.title }} {% if theme.index_with_subtitle and config.subtitle %} - {{config.subtitle }}{% endif %}{% endblock %}改成{% block title %}{{ config.title }} - {{ theme.description }} {% if theme.index_with_subtitle and config.subtitle %} - {{config.subtitle }}{% endif %}{% endblock %}</code></pre><p>给非友情链接的出站链接添加 “nofollow” 标签<br>经过chinaz站长工具友情链接检测，发现有不必要的PR值输出，对于非友情链接的PR值输出，我们可以加上nofollow便签避免不必要的PR输出。</p><p>以hexo的NexT主题为例，需要修改两处<br>找到footer.swig,路径在your-hexo-site\themes\next\layout_partials，将下面代码</p><pre><code>{{ __('footer.powered', '<a class="theme-link" href="http://hexo.io" target="_blank" rel="noopener">Hexo</a>') }}</code></pre><p>改成</p><pre><code>{{ __('footer.powered', '<a class="theme-link" href="http://hexo.io" rel="noopener" target="_blank">Hexo</a>') }}</code></pre><p>也就是为外链加上<code>rel=&quot;external nofollow&quot;</code>，不过我在配置文件中关闭了版权，可以不用设置。</p><p>将下面代码</p><pre><code>&lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;</code></pre><p>改成</p><pre><code>&lt;a class=&quot;theme-link&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot; rel=&quot;external nofollow&quot;&gt;</code></pre><p>同样的我这里还是不用设置。</p><hr><p>关键词与描述<br>搜索引擎除了主要抓取标题外，页面的关键词和描述也会抓取。<br>在\scaffolds\post.md中添加如下代码，用于生成的文章中添加关键字和描述。</p><pre><code>keywords: description: </code></pre><p>在\themes\next\layout_partials\head.swig有如下代码，用于生成文章的keywords。暂时还没找到生成description的位置。</p><pre><code>{% if page.keywords %}  <meta name="keywords" content="{{ page.keywords }}">{% elif page.tags and page.tags.length %}  <meta name="keywords" content="{% for tag in page.tags %}{{ tag.name }},{% endfor %}">{% elif theme.keywords %}  <meta name="keywords" content="{{ theme.keywords }}">{% endif %}</code></pre><p>然后在\themes\next\layout_macro\post.swig中找到这个位置：</p><pre><code>{% if post.description %}</code></pre><p>将以下代码去掉：</p><pre><code>{% if post.description and theme.excerpt_description %}          {{ post.description }}          &lt;!--noindex--&gt;          &lt;div class=&quot;post-button text-center&quot;&gt;            &lt;a class=&quot;btn&quot; href=&quot;{{ url_for(post.path) }}&quot;&gt;              {{ __('post.read_more') }} &amp;raquo;            &lt;/a&gt;          &lt;/div&gt;          &lt;!--/noindex--&gt;{% elif post.excerpt  %}</code></pre><p>否则首页的文章摘要就会变成文章的description。</p><p>举个例子：</p><pre><code>---title: HEXO SEO优化方法总结keywords: [HEXO,HEXO SEO优化]description: 总结一下使用Hexo搭建博客后，SEO优化方案的总结，后期会不定期更新。---</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo页面底部添加网站运行时间</title>
      <link href="/2019/05/usehexo-6/"/>
      <url>/2019/05/usehexo-6/</url>
      
        <content type="html"><![CDATA[<h1 id="修改主题布局文件"><a href="#修改主题布局文件" class="headerlink" title="修改主题布局文件"></a>修改主题布局文件</h1><p>打开<code>theme\next\layout\_layout.swig</code>，添加html代码。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer-inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {% include '_partials/footer.swig' %}        {% include '_third-party/analytics/analytics-with-widget.swig' %}        {% block footer %}{% endblock %}<span class="token comment" spellcheck="true">&lt;!--上面是原有的，找到上面的代码，下面是自己编写的，拷贝上面链接中的代码即可。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeDate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>载入天数...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>times<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>载入时分秒...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">createtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">var</span> grt<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"04/13/2019 12:00:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处修改你的建站时间或者网站上线时间 </span>        now<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         days <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">;</span> dnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>days<span class="token punctuation">)</span><span class="token punctuation">;</span>         hours <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span><span class="token punctuation">;</span> hnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>hours<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>hnum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>hnum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> hnum<span class="token punctuation">;</span><span class="token punctuation">}</span> minutes <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span><span class="token number">60</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> hnum<span class="token punctuation">)</span><span class="token punctuation">;</span>         mnum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>minutes<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>mnum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>mnum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> mnum<span class="token punctuation">;</span><span class="token punctuation">}</span>         seconds <span class="token operator">=</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> grt <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> dnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> hnum<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> mnum<span class="token punctuation">)</span><span class="token punctuation">;</span>         snum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>snum<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>snum <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> snum<span class="token punctuation">;</span><span class="token punctuation">}</span>         document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"timeDate"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"本站已安全运行 "</span><span class="token operator">+</span>dnum<span class="token operator">+</span><span class="token string">" 天 "</span><span class="token punctuation">;</span>         document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"times"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> hnum <span class="token operator">+</span> <span class="token string">" 小时 "</span> <span class="token operator">+</span> mnum <span class="token operator">+</span> <span class="token string">" 分 "</span> <span class="token operator">+</span> snum <span class="token operator">+</span> <span class="token string">" 秒"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"createtime()"</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>然后重新启动服务器，就可以看见效果了。</p><pre><code>hexo ghexo s</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS媒体查询  |  利用@media screen实现网页布局的自适应</title>
      <link href="/2019/05/css-1/"/>
      <url>/2019/05/css-1/</url>
      
        <content type="html"><![CDATA[<h1 id="利用-media-screen实现网页布局的自适应"><a href="#利用-media-screen实现网页布局的自适应" class="headerlink" title="利用@media screen实现网页布局的自适应"></a>利用@media screen实现网页布局的自适应</h1><h2 id="准备工作1：设置Meta标签"><a href="#准备工作1：设置Meta标签" class="headerlink" title="准备工作1：设置Meta标签"></a>准备工作1：设置Meta标签</h2><p>首先我们在使用Media的时候需要先设置下面这段代码，来兼容移动设备的展示效果：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>这段代码的几个参数解释：</p><ul><li>width = device-width：宽度等于当前设备的宽度</li><li>height = device-height：高度等于当前设备的高度</li><li>initial-scale：初始的缩放比例（默认设置为1.0）  </li><li>minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）    </li><li>maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）   </li><li>user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面） </li></ul><h2 id="准备工作2：加载兼容文件JS"><a href="#准备工作2：加载兼容文件JS" class="headerlink" title="准备工作2：加载兼容文件JS"></a>准备工作2：加载兼容文件JS</h2><p>因为IE8既不支持HTML5也不支持CSS3 Media，所以我们需要加载两个JS文件，来保证我们的代码实现兼容效果：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--[if lt IE 9]>  &lt;script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js">&lt;/script>  &lt;script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js">&lt;/script>&lt;![endif]--></span></code></pre><h2 id="准备工作3：设置IE渲染方式默认为最高-这部分可以选择添加也可以不添加"><a href="#准备工作3：设置IE渲染方式默认为最高-这部分可以选择添加也可以不添加" class="headerlink" title="准备工作3：设置IE渲染方式默认为最高(这部分可以选择添加也可以不添加)"></a>准备工作3：设置IE渲染方式默认为最高(这部分可以选择添加也可以不添加)</h2><p>现在有很多人的IE浏览器都升级到IE9以上了，所以这个时候就有又很多诡异的事情发生了，例如现在是IE9的浏览器，但是浏览器的文档模式却是IE8:</p><p>为了防止这种情况，我们需要下面这段代码来让IE的文档模式永远都是最新的：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> （如果想使用固定的IE版本，可写成：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>EmulateIE9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>）</code></pre><p>不过我最近又发现了一个更给力的写法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>Edge，chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>怎么这段代码后面加了一个chrome=1，这个Google Chrome Frame（谷歌内嵌浏览器框架GCF），如果有的用户电脑里面装了这个chrome的插件，就可以让电脑里面的IE不管是哪个版本的都可以使用Webkit引擎及V8引擎进行排版及运算，无比给力，不过如果用户没装这个插件，那这段代码就会让IE以最高的文档模式展现效果。这段代码我还是建议你们用上，不过不用也是可以的。</p><h2 id="最后就是设置媒体查询样式了"><a href="#最后就是设置媒体查询样式了" class="headerlink" title="最后就是设置媒体查询样式了"></a>最后就是设置媒体查询样式了</h2><p>小于960px尺寸的代码：</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>960px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>等于960px尺寸的代码：</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-device-width</span><span class="token punctuation">:</span>960px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后就是当浏览器尺寸大于960px时候的代码了：</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>960px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们还可以混合使用上面的用法：</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>960px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token selector">body</span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的这段代码的意思是当页面宽度大于960px小于1200px的时候执行下面的CSS。</p><hr><p>如，下面的代码，查看效果，调整浏览器的宽度可以查看效果：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span> hello <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>960px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>            <span class="token selector">body</span><span class="token punctuation">{</span>                <span class="token property">background</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>960px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>            <span class="token selector">body</span><span class="token punctuation">{</span>                <span class="token property">background</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>            <span class="token selector">body</span><span class="token punctuation">{</span>                <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS样式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo设置右上角 fork me on github</title>
      <link href="/2019/05/usehexo-5/"/>
      <url>/2019/05/usehexo-5/</url>
      
        <content type="html"><![CDATA[<h1 id="右上角点击到github"><a href="#右上角点击到github" class="headerlink" title="右上角点击到github"></a>右上角点击到github</h1><p>打开链接<a href="https://github.blog/2008-12-19-github-ribbons/" target="_blank" rel="noopener">https://github.blog/2008-12-19-github-ribbons/</a> 挑选自己喜欢的样式</p><p>打开<code>theme\next\layout\_layout.swig</code>，添加html代码。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{ container_class }} {% block page_class %}{% endblock %}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>headband<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--上面是原有的，找到上面的代码，下面是自己编写的，拷贝上面链接中的代码即可。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.com/baiyazi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize<span class="token punctuation">=</span>149%2C149<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Fork me on GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-recalc-dims</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h1 id="小屏幕不显示fork-me-on-github"><a href="#小屏幕不显示fork-me-on-github" class="headerlink" title="小屏幕不显示fork me on github"></a>小屏幕不显示fork me on github</h1><p>为它添加<code>CSS</code>样式， 在上面的a标签中添加类样式就可以了。</p><pre><code>.forkme{     display: none; }  @media (min-width: 768px) {     .forkme{         display: inline;     }  }</code></pre><p><span class="title2">解释一下：</span></p><h2 id="Media-Queries工作方式"><a href="#Media-Queries工作方式" class="headerlink" title="Media Queries工作方式:"></a>Media Queries工作方式:</h2><p>● screen 是媒体类型里的一种，CSS2.1定义了10种媒体类型<br>● and 被称为关键字，其他关键字还包括 not(排除某种设备)，only(限定某种设备)<br>● (min-width: 400px) 就是媒体特性，其被放置在一对圆括号中。</p><h3 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h3><p>可以直接在link中判断设备的尺寸，然后引用不同的css文件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>styleA.css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>screen and (min-width: 400px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>意思是当屏幕的宽度大于等于400px的时候，应用styleA.css</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>styleB.css<span class="token punctuation">"</span></span>  <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>screen and (min-width: 600px) and (max-width: 800px)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>意思是当屏幕的宽度大于600小于800时，应用styleB.css</p><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>另一种方式，即是直接写在 style 标签里：<br>例如：(根据窗口大小不同使用不同大小的字体)</p><pre class=" language-html"><code class="language-html">//窗口宽度大于900px@media screen and(min-width:900px){  body{       font-size:25px;      }}//窗口宽度大于500px小于900px@media screen and(min-width:500px)and(max-width:900px){  body{       font-size:20px;      }}//窗口宽度小于500px@media screen and(max-width:500px){  body{       font-size:15px;      }}</code></pre><hr><p>前端响应式布局最出名的框架莫过于 Bootstrap</p>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo在线聊天功能 | DaoVoice</title>
      <link href="/2019/05/usehexo-3/"/>
      <url>/2019/05/usehexo-3/</url>
      
        <content type="html"><![CDATA[<h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>首先需要注册一个 DaoVoice，<a href="http://dashboard.daovoice.io/get-started?invite_code=7f3d6e70" target="_blank" rel="noopener">点击注册</a></p><p>注册成功后，进入后台控制台，进入到<code>(左边导航栏) 应用设置--&gt;(次左边导航栏)安装到网站</code>页面，可以看见：您想和谁沟通<br>出现下面的代码：<br>1.将下面代码粘贴在页面的 <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"> 之前</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s<span class="token punctuation">,</span>o<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token punctuation">[</span><span class="token string">"DaoVoiceObject"</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">;</span>i<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">||</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>q<span class="token operator">=</span>i<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>q<span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>i<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token operator">*</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token keyword">async</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>src<span class="token operator">=</span>g<span class="token punctuation">;</span>a<span class="token punctuation">.</span>charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span>document<span class="token punctuation">,</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'https:'</span> <span class="token operator">==</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol <span class="token operator">?</span> <span class="token string">'https:'</span> <span class="token punctuation">:</span> <span class="token string">'http:'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"//widget.daovoice.io/widget/bdf6be59.js"</span><span class="token punctuation">,</span><span class="token string">"daovoice"</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>2.调用下面的 JavaScript 与注册用户沟通</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">daovoice</span><span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  app_id<span class="token punctuation">:</span> <span class="token string">"bdf6be59"</span><span class="token punctuation">,</span>  user_id<span class="token punctuation">:</span> <span class="token string">"NO_89757"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填: 该用户在您系统上的唯一ID</span>  email<span class="token punctuation">:</span> <span class="token string">"daovoice@example.com"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 选填:  该用户在您系统上的主邮箱</span>  name<span class="token punctuation">:</span> <span class="token string">"道客船长"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 选填: 用户名</span>  signed_up<span class="token punctuation">:</span> <span class="token number">1449821660</span> <span class="token comment" spellcheck="true">// 选填: 用户的注册时间，用Unix时间戳表示</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">daovoice</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3.调用下面的 JavaScript 与匿名访客沟通</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">daovoice</span><span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  app_id<span class="token punctuation">:</span> <span class="token string">"bdf6be59"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">daovoice</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们，不妨再普通网站上键入试试。发现也成功了。</p><hr><h1 id="定制"><a href="#定制" class="headerlink" title="定制"></a>定制</h1><p>下面我们需要为hexo定制<br>以 next 主题为例，打开 themes/next/layout/_partials/head.swig 文件中添加如下代码，位置随意：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> theme<span class="token punctuation">.</span>daovoice <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s<span class="token punctuation">,</span>o<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r<span class="token punctuation">,</span>a<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token punctuation">[</span><span class="token string">"DaoVoiceObject"</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">;</span>i<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">||</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>q<span class="token operator">=</span>i<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>q<span class="token operator">||</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>i<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token operator">*</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token keyword">async</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>src<span class="token operator">=</span>g<span class="token punctuation">;</span>a<span class="token punctuation">.</span>charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span>document<span class="token punctuation">,</span><span class="token string">"script"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'https:'</span> <span class="token operator">==</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol <span class="token operator">?</span> <span class="token string">'https:'</span> <span class="token punctuation">:</span> <span class="token string">'http:'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"//widget.daovoice.io/widget/0f81ff2f.js"</span><span class="token punctuation">,</span><span class="token string">"daovoice"</span><span class="token punctuation">)</span>  <span class="token function">daovoice</span><span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      app_id<span class="token punctuation">:</span> <span class="token string">"{{theme.daovoice_app_id}}"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">daovoice</span><span class="token punctuation">(</span><span class="token string">'update'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><p>在主题配置文件 _config.yml，任意位置，新建添加如下代码：</p><pre><code># Online contact daovoice: truedaovoice_app_id: 这里输入前面获取的app_id</code></pre><p>打开你的网站，可以看见效果。<br>也可以看看官网给的效果：<a href="http://chat.daovoice.io/?id=bdf6be59" target="_blank" rel="noopener">点击打开聊天</a></p><hr><p>下面我们来设置一下:</p><ul><li><p>定制欢迎辞<br>聊天设置-定制欢迎辞-针对访客中键入即可。</p></li><li><p>定制聊天窗口样式<br>设置窗口的颜色和位置，凭自己喜好。</p></li><li><p>去除版权<br>这里是收费了的了。</p></li><li><p>修改用户信息<br>点击右上角-个人设置，可以修改用户名和头像，显得正式。</p></li><li><p>绑定微信<br>还是设置，中可以绑定，扫描二维码即可。</p></li></ul><hr><p>以上就是全部了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 网页在线聊天插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo设置背景颜色</title>
      <link href="/2019/05/usehexo-4/"/>
      <url>/2019/05/usehexo-4/</url>
      
        <content type="html"><![CDATA[<h1 id="修改背景，颜色样式等"><a href="#修改背景，颜色样式等" class="headerlink" title="修改背景，颜色样式等"></a>修改背景，颜色样式等</h1><p>打开<code>theme\hexo-theme-next\source\css\_custom\custom.styl</code>，添加样式代码。</p><pre class=" language-css"><code class="language-css"><span class="token selector">//添加背景图片body </span><span class="token punctuation">{</span> <span class="token property">background</span><span class="token punctuation">:</span><span class="token url">url(/images/backGround.jpg)</span><span class="token punctuation">}</span><span class="token selector">//改掉题头颜色<span class="token class">.site-meta</span> </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#F0D784</span><span class="token punctuation">;</span> //修改为自己喜欢的颜色<span class="token punctuation">}</span><span class="token selector">//主标题颜色<span class="token class">.brand</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#2f9833</span>  <span class="token punctuation">}</span><span class="token selector">//副标题颜色<span class="token class">.site-subtitle</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#47b54a</span><span class="token punctuation">}</span><span class="token selector">//页脚统计文字颜色<span class="token class">.footer</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#F0D784</span><span class="token punctuation">}</span><span class="token selector">//修改页脚备案链接颜色<span class="token class">.footer</span> a</span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#F0D784</span><span class="token punctuation">}</span><span class="token selector">//修改页脚统计人数的颜色<span class="token class">.footer</span> <span class="token class">.with-love</span></span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#F0D784</span><span class="token punctuation">}</span></code></pre><p>其他需要的样式设置，可以用浏览器审查元素，然后找到你所需要的元素，设置样式。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo评论系统 | 来必力</title>
      <link href="/2019/05/usehexo-02/"/>
      <url>/2019/05/usehexo-02/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo评论系统"><a href="#hexo评论系统" class="headerlink" title="hexo评论系统"></a>hexo评论系统</h1><p>来必力<a href="https://livere.com" target="_blank" rel="noopener">https://livere.com</a><br>注册，登录。<br>然后出现了一般网站的使用代码：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 来必力City版安装代码 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lv-container<span class="token punctuation">"</span></span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city<span class="token punctuation">"</span></span> <span class="token attr-name">data-uid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MTAyMC80NDA3OC8yMDYxMw<span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">var</span> j<span class="token punctuation">,</span> e <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> LivereTower <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>       j <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>       j<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://cdn-city.livere.com/js/embed.dist.js'</span><span class="token punctuation">;</span>       j<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       e<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span> 为正常使用来必力评论功能请激活JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- City版安装代码已完成 --></span></code></pre><p>我试了一下，在随便一个网页中使用如上的代码，就可以实现评论。<br>不得不说，JavaScript很强大。</p><hr><p>由于next中已经做了处理，所以这里修改配置文件就可以了。<br>复制其中的uid字段。<br>打开主题目录下的blog/themes/next/_config.yml配置文件，定位到livere_uid字段，粘贴上刚刚复制的UID。<br>至此，大功告成。<br>效果图：<br><img src="/images/201905/2019-05-05_212038.jpg" alt="e" title="来必力评论效果展示"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 网页评论插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-445 | 两数相加 II</title>
      <link href="/2019/05/leetcode-445/"/>
      <url>/2019/05/leetcode-445/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定两个非空链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储单个数字。将这两数相加会返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><p><span>进阶：</span><br>如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。</p><blockquote><p><span>示例 1：</span><br>输入: (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出: 7 -&gt; 8 -&gt; 0 -&gt; 7</p></blockquote><h1 id="思路解答"><a href="#思路解答" class="headerlink" title="思路解答"></a>思路解答</h1><p>将链表反转，然后我们使用第二题的思路</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#反转链表，前面做到过</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">)</span><span class="token punctuation">:</span>        pre <span class="token operator">=</span> None        cur <span class="token operator">=</span> l1        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            <span class="token comment" spellcheck="true"># 反转指针</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> next        <span class="token keyword">return</span> pre    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type l1: ListNode        :type l2: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> l1 <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> l2        <span class="token keyword">if</span> l2 <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> l1        l2 <span class="token operator">=</span> self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>        l1 <span class="token operator">=</span> self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#然后抓化成第二题中的求解</span>        carry <span class="token operator">=</span> <span class="token number">0</span>        p<span class="token punctuation">,</span> q <span class="token operator">=</span> l1<span class="token punctuation">,</span> l2        resulthead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        rep <span class="token operator">=</span> resulthead        <span class="token keyword">while</span> p <span class="token operator">or</span> q<span class="token punctuation">:</span>            x <span class="token operator">=</span> p<span class="token punctuation">.</span>val <span class="token keyword">if</span> p <span class="token keyword">else</span> <span class="token number">0</span>            y <span class="token operator">=</span> q<span class="token punctuation">.</span>val <span class="token keyword">if</span> q <span class="token keyword">else</span> <span class="token number">0</span>            sum <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry            carry <span class="token operator">=</span> sum <span class="token operator">//</span> <span class="token number">10</span>            s <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>            rep<span class="token punctuation">.</span>next <span class="token operator">=</span> s            rep <span class="token operator">=</span> rep<span class="token punctuation">.</span>next            <span class="token keyword">if</span> p<span class="token punctuation">:</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            <span class="token keyword">if</span> q<span class="token punctuation">:</span>                q <span class="token operator">=</span> q<span class="token punctuation">.</span>next        <span class="token keyword">if</span> carry<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            rep<span class="token punctuation">.</span>next <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>carry<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#和第二题中不同的是，这里还需要反转一次</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>resulthead<span class="token punctuation">.</span>next<span class="token punctuation">)</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 84 ms, 在Add Two Numbers II的Python提交中击败了78.43% 的用户<br>内存消耗 : 11.9 MB, 在Add Two Numbers II的Python提交中击败了23.61% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>84 ms</td><td>11.9MB</td><td>python</td></tr></table>## 优化我们可以考虑使用辅助数据结构-栈，来解决这个问题<pre class=" language-python"><code class="language-python"></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 48 ms, 在Odd Even Linked List的Python提交中击败了92.31% 的用户<br>内存消耗 : 15.1 MB, 在Odd Even Linked List的Python提交中击败了29.21% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>48 ms</td><td>15.1MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-328 | 奇偶链表</title>
      <link href="/2019/05/leetcode-328/"/>
      <url>/2019/05/leetcode-328/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p><p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p><blockquote><p><span>示例 1：</span><br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</p></blockquote><blockquote><p><span>示例 1：</span><br>输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL<br>输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</p></blockquote><blockquote><p><span>说明：</span><br>应当保持奇数节点和偶数节点的相对顺序。<br>链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>不妨取数据到列表中，然后根据题意操作，然后构成数据格式<br>和上一道题（86）类似</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">oddEvenList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token comment" spellcheck="true">#空结点或者一个节点，直接返回</span>        <span class="token keyword">if</span> head<span class="token operator">==</span>None <span class="token operator">or</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        odd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        even <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> head        i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                even<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                odd<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>            i<span class="token operator">+=</span><span class="token number">1</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        t <span class="token operator">=</span> odd<span class="token operator">+</span>even        p <span class="token operator">=</span> virtualhead        <span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> i            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        p<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 48 ms, 在Odd Even Linked List的Python提交中击败了92.31% 的用户<br>内存消耗 : 15.3 MB, 在Odd Even Linked List的Python提交中击败了6.37% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>48 ms</td><td>15.3MB</td><td>python</td></tr></table>## 优化不必建立列表存储，直接加入<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">oddEvenList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token comment" spellcheck="true">#空结点或者一个节点，直接返回</span>        <span class="token keyword">if</span> head<span class="token operator">==</span>None <span class="token operator">or</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        odd <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        oddh <span class="token operator">=</span> odd  <span class="token comment" spellcheck="true">#指针</span>        even <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        evenh <span class="token operator">=</span> even  <span class="token comment" spellcheck="true">#指针</span>        p <span class="token operator">=</span> head     <span class="token comment" spellcheck="true">#指针</span>        i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                evenh<span class="token punctuation">.</span>next <span class="token operator">=</span> p                evenh <span class="token operator">=</span> evenh<span class="token punctuation">.</span>next            <span class="token keyword">else</span><span class="token punctuation">:</span>                oddh<span class="token punctuation">.</span>next <span class="token operator">=</span> p                oddh <span class="token operator">=</span> oddh<span class="token punctuation">.</span>next            i <span class="token operator">+=</span> <span class="token number">1</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        oddh<span class="token punctuation">.</span>next <span class="token operator">=</span> evenh<span class="token punctuation">.</span>next <span class="token operator">=</span> None        oddh<span class="token punctuation">.</span>next <span class="token operator">=</span> even<span class="token punctuation">.</span>next        <span class="token keyword">return</span> odd<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 48 ms, 在Odd Even Linked List的Python提交中击败了92.31% 的用户<br>内存消耗 : 15.1 MB, 在Odd Even Linked List的Python提交中击败了29.21% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>48 ms</td><td>15.1MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-86 | 分隔链表</title>
      <link href="/2019/05/leetcode-86/"/>
      <url>/2019/05/leetcode-86/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个链表和一个特定值 x，对链表进行分隔，使得所有小于 x 的节点都在大于或等于 x 的节点之前。</p><p>你应当保留两个分区中每个节点的初始相对位置。</p><blockquote><p><span>示例 1：</span><br>输入: head = 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;2, x = 3<br>输出: 1-&gt;2-&gt;2-&gt;4-&gt;3-&gt;5</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>不妨取数据到列表中，然后根据题意操作，然后构成数据格式</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type x: int        :rtype: ListNode        """</span>        <span class="token comment" spellcheck="true">#空结点或者一个节点，直接返回</span>        <span class="token keyword">if</span> head<span class="token operator">==</span>None <span class="token operator">or</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#虚拟结点</span>        virtualhead <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        mi<span class="token punctuation">,</span> ma <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> head<span class="token punctuation">:</span>            <span class="token keyword">if</span> head<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">:</span>                mi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ma<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next        vm <span class="token operator">=</span> mi<span class="token operator">+</span>ma        p <span class="token operator">=</span> virtualhead        <span class="token keyword">for</span> i <span class="token keyword">in</span> vm<span class="token punctuation">:</span>            s <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> s            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        p<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token keyword">return</span> virtualhead<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 60 ms, 在Partition List的Python提交中击败了10.26% 的用户<br>内存消耗 : 11.8 MB, 在Partition List的Python提交中击败了22.78% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>60 ms</td><td>11.8MB</td><td>python</td></tr></table>## 优化上面的结点可以不必销毁后重建``` python# Definition for singly-linked list.# class ListNode(object):#     def __init__(self, x):#         self.val = x#         self.next = None<p>class Solution(object):<br>    def partition(self, head, x):<br>        “””<br>        :type head: ListNode<br>        :type x: int<br>        :rtype: ListNode<br>        “””<br>        #空结点或者一个节点，直接返回<br>        if head==None or head.next==None:<br>            return head<br><br>        #虚拟结点<br>        virtualhead = ListNode(0)<br><br>        mi, ma = [], []<br>        while head:<br>            if head.val &lt; x:<br>                mi.append(head)<br>            else:<br>                ma.append(head)<br>            head = head.next<br><br>        vm = mi+ma<br>        p = virtualhead<br>        for i in vm:<br>            p.next = i<br>            p = p.next<br>        p.next = None<br><br>        return virtualhead.next</p><pre><code>&lt;span class=&quot;title2&quot;&gt;结果：&lt;/span&gt;&gt;执行用时 : 36 ms, 在Partition List的Python提交中击败了91.45% 的用户内存消耗 : 11.8 MB, 在Partition List的Python提交中击败了33.17% 的用户&lt;table&gt;&lt;tr&gt;&lt;td&gt;提交时间&lt;/td&gt;&lt;td&gt;状态&lt;/td&gt;&lt;td&gt;执行用时&lt;/td&gt;&lt;td&gt;内存消耗&lt;/td&gt;&lt;td&gt;语言&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;几秒前&lt;/td&gt;&lt;td&gt;通过&lt;/td&gt;&lt;td&gt;36 ms&lt;/td&gt;&lt;td&gt;11.8MB&lt;/td&gt;&lt;td&gt;python&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;---在讨论去看见的类似的处理：``` python# Definition for singly-linked list.# class ListNode(object):#     def __init__(self, x):#         self.val = x#         self.next = Noneclass Solution(object):    def partition(self, head, x):        &quot;&quot;&quot;        :type head: ListNode        :type x: int        :rtype: ListNode        &quot;&quot;&quot;        #空结点或者一个节点，直接返回        if head==None or head.next==None:            return head        mi = ListNode(0)        ma = ListNode(0)        hmi = mi        hma = ma        p = head        while p:            if p.val &lt; x:                hmi.next = p                p = p.next                hmi = hmi.next                hmi.next = None            else:                hma.next = p                p = p.next                hma = hma.next                hma.next = None        hmi.next = ma.next        return mi.next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 36 ms, 在Partition List的Python提交中击败了91.45% 的用户<br>内存消耗 : 11.8 MB, 在Partition List的Python提交中击败了33.17% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>36 ms</td><td>11.7MB</td><td>python</td></tr></table> ]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-83 | 删除排序链表中的重复元素</title>
      <link href="/2019/05/leetcode-83/"/>
      <url>/2019/05/leetcode-83/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><blockquote><p><span>示例 1：</span><br>输入: 1-&gt;1-&gt;2<br>输出: 1-&gt;2</p></blockquote><blockquote><p><span>示例 2：</span><br>输入: 1-&gt;1-&gt;2-&gt;3-&gt;3<br>输出: 1-&gt;2-&gt;3</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>指针扫描一遍即可</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head<span class="token operator">==</span>None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#定义指针cur, p</span>        cur <span class="token operator">=</span> head        p <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#判断是否相等</span>            <span class="token keyword">if</span> p<span class="token punctuation">.</span>val<span class="token operator">==</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#q是临时指针变量</span>                q <span class="token operator">=</span> p<span class="token punctuation">.</span>next                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> q                p <span class="token operator">=</span> q            <span class="token keyword">else</span><span class="token punctuation">:</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        <span class="token keyword">return</span> head</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 40 ms, 在Remove Duplicates from Sorted List的Python提交中击败了99.64% 的用户<br>内存消耗 : 11.8 MB, 在Remove Duplicates from Sorted List的Python提交中击败了29.12% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>40 ms</td><td>11.8MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-92 | 反转链表II</title>
      <link href="/2019/05/leetcode-92/"/>
      <url>/2019/05/leetcode-92/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>反转从位置 m 到 n 的链表。请使用一趟扫描完成反转。</p><blockquote><p><span>说明:</span><br>1 ≤ m ≤ n ≤ 链表长度。<br><span>示例:</span><br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m = 2, n = 4<br>输出: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL</p></blockquote><h1 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h1><p>类似的使用取数据，组成数据正确集，生成格式</p><h2 id="翻译如下："><a href="#翻译如下：" class="headerlink" title="翻译如下："></a>翻译如下：</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :type m: int        :type n: int        :rtype: ListNode        """</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> head        m<span class="token punctuation">,</span> n <span class="token operator">=</span> m<span class="token number">-1</span><span class="token punctuation">,</span> n<span class="token number">-1</span>        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        i<span class="token punctuation">,</span>j <span class="token operator">=</span> m<span class="token punctuation">,</span> n        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">:</span>            li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> li<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i<span class="token operator">+=</span><span class="token number">1</span>            j<span class="token operator">-=</span><span class="token number">1</span>        head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> head        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> s            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next        p<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token keyword">return</span> head</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 40 ms, 在Reverse Linked List II的Python提交中击败了27.61% 的用户<br>内存消耗 : 11.8 MB, 在Reverse Linked List II的Python提交中击败了36.22% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>40 ms</td><td>11.8MB</td><td>python</td></tr></table><h2 id="很老土的解法"><a href="#很老土的解法" class="headerlink" title="很老土的解法"></a>很老土的解法</h2><p>遍历获取数据，翻转，构成数据格式</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head<span class="token operator">==</span>None <span class="token operator">or</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#可以把数据全部整下来，在反转，在构成</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            p<span class="token operator">=</span>p<span class="token punctuation">.</span>next        li<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>        head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> head        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> s            p<span class="token operator">=</span>p<span class="token punctuation">.</span>next        p<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token keyword">return</span> head</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 44 ms, 在Reverse Linked List的Python提交中击败了36.40% 的用户<br>内存消耗 : 15.7 MB, 在Reverse Linked List的Python提交中击败了16.62% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>44 ms</td><td>15.7MB</td><td>python</td></tr></table><h2 id="我们使用指针（推荐）"><a href="#我们使用指针（推荐）" class="headerlink" title="我们使用指针（推荐）"></a><span class="red">我们使用指针（推荐）</span></h2><p>图解：<br><img src="/images/201905/2019-05-03_195208.jpg" alt="e" title="三个指针情况"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head<span class="token operator">==</span>None <span class="token operator">or</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        pre <span class="token operator">=</span> None        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#由于如果cur为None的时候，是没有next的，所以我们将它放置到了循环中，判断非None生效，故而在这里声明我们的饿next指针</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            <span class="token comment" spellcheck="true">#我们的移动逻辑</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> next        <span class="token keyword">return</span> pre  <span class="token comment" spellcheck="true">#cur一定是None</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 36 ms, 在Reverse Linked List的Python提交中击败了100.00% 的用户<br>内存消耗 : 13.3 MB, 在Reverse Linked List的Python提交中击败了50.21% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>36 ms</td><td>13.3MB</td><td>python</td></tr></table><span class="title2">分析：</span>如果用两个指针，如下图，是不好操作的。![e](/images/201905/2019-05-03_200551.jpg "两个指针情况")]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-206 | 反转链表</title>
      <link href="/2019/05/leetcode-206/"/>
      <url>/2019/05/leetcode-206/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>反转一个单链表。</p><blockquote><p><span>示例:</span><br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br><span>进阶:</span><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p></blockquote><h1 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h1><p>思想来源于数据结构中的链表的翻转。</p><h2 id="翻译如下："><a href="#翻译如下：" class="headerlink" title="翻译如下："></a>翻译如下：</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head<span class="token operator">==</span>None <span class="token operator">or</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#加入一个虚拟头节点，方便操作</span>        virtual <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        virtual<span class="token punctuation">.</span>next <span class="token operator">=</span> None        p <span class="token operator">=</span> head        q <span class="token operator">=</span> head<span class="token punctuation">.</span>next        <span class="token keyword">while</span> q<span class="token punctuation">:</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> virtual<span class="token punctuation">.</span>next            virtual<span class="token punctuation">.</span>next <span class="token operator">=</span> p            p <span class="token operator">=</span> q            q <span class="token operator">=</span> q<span class="token punctuation">.</span>next           <span class="token comment" spellcheck="true">#最后一个位置，也就是q，赋值后的p，还没有完成赋值，需要退出循环后再重复一次</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> virtual<span class="token punctuation">.</span>next        virtual<span class="token punctuation">.</span>next <span class="token operator">=</span> p        <span class="token keyword">return</span> virtual<span class="token punctuation">.</span>next</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 44 ms, 在Reverse Linked List的Python提交中击败了36.40% 的用户<br>内存消耗 : 13.6 MB, 在Reverse Linked List的Python提交中击败了44.93% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>44 ms</td><td>13.6MB</td><td>python</td></tr></table><h2 id="很老土的解法"><a href="#很老土的解法" class="headerlink" title="很老土的解法"></a>很老土的解法</h2><p>遍历获取数据，翻转，构成数据格式</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head<span class="token operator">==</span>None <span class="token operator">or</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        <span class="token comment" spellcheck="true">#可以把数据全部整下来，在反转，在构成</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> head        <span class="token keyword">while</span> p<span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            p<span class="token operator">=</span>p<span class="token punctuation">.</span>next        li<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>        head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> head        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            s <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> s            p<span class="token operator">=</span>p<span class="token punctuation">.</span>next        p<span class="token punctuation">.</span>next <span class="token operator">=</span> None        <span class="token keyword">return</span> head</code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 44 ms, 在Reverse Linked List的Python提交中击败了36.40% 的用户<br>内存消耗 : 15.7 MB, 在Reverse Linked List的Python提交中击败了16.62% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>44 ms</td><td>15.7MB</td><td>python</td></tr></table><h2 id="我们使用指针（推荐）"><a href="#我们使用指针（推荐）" class="headerlink" title="我们使用指针（推荐）"></a><span class="red">我们使用指针（推荐）</span></h2><p>图解：<br><img src="/images/201905/2019-05-03_195208.jpg" alt="e" title="三个指针情况"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Definition for singly-linked list.</span><span class="token comment" spellcheck="true"># class ListNode(object):</span><span class="token comment" spellcheck="true">#     def __init__(self, x):</span><span class="token comment" spellcheck="true">#         self.val = x</span><span class="token comment" spellcheck="true">#         self.next = None</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type head: ListNode        :rtype: ListNode        """</span>        <span class="token keyword">if</span> head<span class="token operator">==</span>None <span class="token operator">or</span> head<span class="token punctuation">.</span>next<span class="token operator">==</span>None<span class="token punctuation">:</span>            <span class="token keyword">return</span> head        pre <span class="token operator">=</span> None        cur <span class="token operator">=</span> head        <span class="token keyword">while</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#由于如果cur为None的时候，是没有next的，所以我们将它放置到了循环中，判断非None生效，故而在这里声明我们的饿next指针</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            <span class="token comment" spellcheck="true">#我们的移动逻辑</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre            pre <span class="token operator">=</span> cur            cur <span class="token operator">=</span> next        <span class="token keyword">return</span> pre  <span class="token comment" spellcheck="true">#cur一定是None</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 36 ms, 在Reverse Linked List的Python提交中击败了100.00% 的用户<br>内存消耗 : 13.3 MB, 在Reverse Linked List的Python提交中击败了50.21% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>36 ms</td><td>13.3MB</td><td>python</td></tr></table><span class="title2">分析：</span>如果用两个指针，如下图，是不好操作的。![e](/images/201905/2019-05-03_200551.jpg "两个指针情况")]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-220 | 存在重复元素 III</title>
      <link href="/2019/05/leetcode-220/"/>
      <url>/2019/05/leetcode-220/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个整数数组，判断数组中是否有两个不同的索引 i 和 j，使得 nums [i] 和 nums [j] 的差的绝对值最大为 t，并且 i 和 j 之间的差的绝对值最大为 ķ。</p><blockquote><p><span>示例:</span><br>输入: nums = [1,2,3,1], k = 3, t = 0<br>输出: true</p></blockquote><blockquote><p><span>示例:</span><br>输入: nums = [1,0,1,1], k = 1, t = 2<br>输出: true</p></blockquote><blockquote><p><span>示例:</span><br>输入: nums = [1,5,9,1,5,9], k = 2, t = 3<br>输出: false</p></blockquote><h1 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h1><p>集合前两道题（219,217），很容易想到借鉴219题的思路，然后我这里实现了一下：</p><h2 id="翻译如下："><a href="#翻译如下：" class="headerlink" title="翻译如下："></a>翻译如下：</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> se<span class="token punctuation">,</span> e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> se<span class="token punctuation">:</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>i <span class="token operator">-</span> e<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">containsNearbyAlmostDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :type t: int        :rtype: bool        """</span>        <span class="token comment" spellcheck="true"># 定义窗口</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment" spellcheck="true"># 定义数据窗口</span>        se <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 判断j+1元素，和窗口中元素比较是否满足条件</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>isTrue<span class="token punctuation">(</span>se<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true"># 窗口移动</span>            se<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            j <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 判断k值</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>se<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                se<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p><span class="title2">结果：</span><br>40 / 41 个通过测试用例<br>状态：超出时间限制<br>提交时间：1 分钟之前<br>也不难理解，时间复杂度是O(n^2)级别的。</p><h2 id="同理有"><a href="#同理有" class="headerlink" title="同理有"></a>同理有</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> se<span class="token punctuation">,</span> e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> se<span class="token punctuation">:</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>i <span class="token operator">-</span> e<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">containsNearbyAlmostDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :type t: int        :rtype: bool        """</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>isTrue<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p><span class="title2">结果：</span><br>40 / 41 个通过测试用例<br>状态：超出时间限制<br>提交时间：1 分钟之前</p><hr><p>然后都是最后一个测试数据不通过，看家了讨论区中的很狡诈的方式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p>试了试：</p><h2 id="作弊写法"><a href="#作弊写法" class="headerlink" title="作弊写法"></a>作弊写法</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> se<span class="token punctuation">,</span> e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> se<span class="token punctuation">:</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>i <span class="token operator">-</span> e<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">containsNearbyAlmostDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :type t: int        :rtype: bool        """</span>        <span class="token comment" spellcheck="true">#作弊</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>isTrue<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 56 ms, 在Contains Duplicate III的Python提交中击败了100.00% 的用户<br>内存消耗 : 13.1 MB, 在Contains Duplicate III的Python提交中击败了60.36% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>56 ms</td><td>13.1MB</td><td>python</td></tr></table><p>作弊通过后，我们可以看看别人写的解答：</p><h2 id="我这里写了注释，理解了下"><a href="#我这里写了注释，理解了下" class="headerlink" title="我这里写了注释，理解了下"></a>我这里写了注释，理解了下</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsNearbyAlmostDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :type t: int        :rtype: bool        """</span>        dicts <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#也就是219的相等问题，转换成了是否在集合中</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> dicts<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">-</span> k<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#代表的区间：[i-k, i)</span>                    <span class="token comment" spellcheck="true">#之所以判断j的区间，因为j在[i-k,i]中，可能超过范围</span>                    <span class="token keyword">if</span> j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> abs<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">True</span>            dicts<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 64 ms, 在Contains Duplicate III的Python提交中击败了75.47% 的用户<br>内存消耗 : 13.9 MB, 在Contains Duplicate III的Python提交中击败了17.12% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>64 ms</td><td>13.9MB</td><td>python</td></tr></table><h3 id="按此思想，我们可以改写上面的作弊解答"><a href="#按此思想，我们可以改写上面的作弊解答" class="headerlink" title="按此思想，我们可以改写上面的作弊解答"></a>按此思想，我们可以改写上面的作弊解答</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isTrue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> se<span class="token punctuation">,</span> e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> se<span class="token punctuation">:</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>i <span class="token operator">-</span> e<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> t<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">containsNearbyAlmostDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :type t: int        :rtype: bool        """</span>        se <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> se<span class="token punctuation">.</span>get<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>                    se<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>isTrue<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">True</span>            i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 64 ms, 在Contains Duplicate III的Python提交中击败了75.47% 的用户<br>内存消耗 : 13.9 MB, 在Contains Duplicate III的Python提交中击败了17.12% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>64 ms</td><td>13.9MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-217 | 存在重复元素</title>
      <link href="/2019/05/leetcode-217/"/>
      <url>/2019/05/leetcode-217/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个整数数组，判断是否存在重复元素。</p><p>如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。</p><blockquote><p><span>示例:</span><br>输入: [1,2,3,1]<br>输出: true</p></blockquote><blockquote><p><span>示例:</span><br>输入: [1,2,3,4]<br>输出: false</p></blockquote><blockquote><p><span>示例:</span><br>输入: [1,1,1,3,3,4,3,2,4,2]<br>输出: true</p></blockquote><h1 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h1><p>转数据成不含重复元素的集合，如果长度不变，无重复元素；反之有重复元素。</p><h2 id="翻译如下："><a href="#翻译如下：" class="headerlink" title="翻译如下："></a>翻译如下：</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: bool        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 156 ms, 在Contains Duplicate的Python提交中击败了59.00% 的用户<br>内存消耗 : 17.2 MB, 在Contains Duplicate的Python提交中击败了21.95% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>156 ms</td><td>17.2MB</td><td>python</td></tr></table><h2 id="优化解答"><a href="#优化解答" class="headerlink" title="优化解答"></a>优化解答</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: bool        """</span>        <span class="token keyword">return</span> <span class="token operator">not</span> len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 152 ms, 在Contains Duplicate的Python提交中击败了95.73% 的用户<br>内存消耗 : 17.1 MB, 在Contains Duplicate的Python提交中击败了31.28% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>152 ms</td><td>17.1MB</td><td>python</td></tr></table><hr><p>下面是一些尝试：</p><h2 id="无限长度滑动窗口"><a href="#无限长度滑动窗口" class="headerlink" title="无限长度滑动窗口"></a>无限长度滑动窗口</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: bool        """</span>        <span class="token comment" spellcheck="true">#定义滑动窗口</span>        se <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> j<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#是否在窗口中</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> se<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true">#窗口后移</span>            se<span class="token punctuation">.</span>add<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 164 ms, 在Contains Duplicate的Python提交中击败了29.62% 的用户<br>内存消耗 : 17.2 MB, 在Contains Duplicate的Python提交中击败了27.70% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>164 ms</td><td>17.2MB</td><td>python</td></tr></table>## 使用集合判断个数``` pythonclass Solution(object):    def containsDuplicate(self, nums):        """        :type nums: List[int]        :rtype: bool        """        se = set()        for i in nums:            if i not in se:                se.add(i)            else:                return True        return False```<span class="title2">结果：</span>>执行用时 : 160 ms, 在Contains Duplicate的Python提交中击败了36.97% 的用户内存消耗 : 17 MB, 在Contains Duplicate的Python提交中击败了34.77% 的用户<table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>160 ms</td><td>17MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-219 | 存在重复元素 II</title>
      <link href="/2019/05/leetcode-219/"/>
      <url>/2019/05/leetcode-219/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。</p><blockquote><p><span>示例:</span><br>输入: nums = [1,2,3,1], k = 3<br>输出: true</p></blockquote><blockquote><p><span>示例:</span><br>输入: nums = [1,0,1,1], k = 1<br>输出: true</p></blockquote><blockquote><p><span>示例:</span><br>输入: nums = [1,2,3,1,2,3], k = 2<br>输出: false</p></blockquote><h1 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h1><p>按照题目要求翻译就好。<br>定义长度为k的窗口，那么我们判断下一个元素是否在窗口中，如果在说明成功；<br>如果不在窗口中，我们移动窗口。</p><h2 id="翻译如下："><a href="#翻译如下：" class="headerlink" title="翻译如下："></a>翻译如下：</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :rtype: bool        """</span>        <span class="token comment" spellcheck="true">#定义滑动窗口，窗口的长度最长是k</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span>        se <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> j<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#判断nums[j+1]是否在集合中</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> se<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            se<span class="token punctuation">.</span>add<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            j<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>se<span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>                se<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 124 ms, 在Contains Duplicate II的Python提交中击败了30.52% 的用户<br>内存消耗 : 15.8 MB, 在Contains Duplicate II的Python提交中击败了45.39% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>124 ms</td><td>15.8MB</td><td>python</td></tr></table>---<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>在讨论区看见了这个解法，脑洞很好。<br>和上面的解法略微不同，判断的是前一个元素是否在窗口中<br>定义的窗口在后面，判断的元素在后面；和前一种解法正好相反。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">containsNearbyDuplicate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :rtype: bool        """</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>i<span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 108 ms, 在Contains Duplicate II的Python提交中击败了99.35% 的用户<br>内存消耗 : 15.8 MB, 在Contains Duplicate II的Python提交中击败了45.39% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>108 ms</td><td>15.8MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 滑动窗口典型例子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-149 | 直线上最多的点数</title>
      <link href="/2019/05/leetcode-149/"/>
      <url>/2019/05/leetcode-149/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个二维平面，平面上有 n 个点，求最多有多少个点在同一条直线上。</p><blockquote><p><span>示例:</span><br>输入: [[1,1],[2,2],[3,3]]<br>输出: 3</p></blockquote><blockquote><p><span>示例:</span><br>输入: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]<br>输出: 4</p></blockquote><h1 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h1><p>受到上一题思路的影响（447），我们可以用循环，求出两个点之间的所有斜率，然后处理数据。<br>但是，对于斜率的处理，会有点麻烦，这里我们可以转换一下，如下图：</p><p><img src="/images/201905/2019-05-03_112154.jpg" alt="e" title="图解"></p><p>所以我们每次判断应该是三个点的判断，而不是两个点求斜率。<br>而且两个点验证的斜率并不靠谱，如下例：<br><code>[[1,1], [4,1], [2,3], [5,3]]</code><br>不难发现是两条线，而且这样的例子会有很多。</p><p>翻译如下：</p><pre class=" language-python"><code class="language-python"></code></pre><p><span class="title2">分析：</span><br>时间复杂度是：O(n^2)，满足题意要求。</p><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 1684 ms, 在Number of Boomerangs的Python3提交中击败了62.50% 的用户<br>内存消耗 : 23 MB, 在Number of Boomerangs的Python3提交中击败了13.46% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>1684 ms</td><td>23MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 困难难度 </tag>
            
            <tag> 暂时没解出来 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-447 | 回旋镖的数量</title>
      <link href="/2019/05/leetcode-447/"/>
      <url>/2019/05/leetcode-447/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定平面上 n 对不同的点，“回旋镖” 是由点表示的元组 (i, j, k) ，其中 i 和 j 之间的距离和 i 和 k 之间的距离相等（需要考虑元组的顺序）。<br>找到所有回旋镖的数量。你可以假设 n 最大为 500，所有点的坐标在闭区间 [-10000, 10000] 中。</p><blockquote><p><span>示例:</span><br>输入:<br>[[0,0],[1,0],[2,0]]<br>输出:<br>2<br><span>解释：</span><br>两个回旋镖为 [[1,0],[0,0],[2,0]] 和 [[1,0],[2,0],[0,0]]</p></blockquote><h1 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h1><p>以i为轴，然后计算所有点到i的距离，相等的（即距离相同个数大于2的）就是满足条件的。</p><p>我们画个图分析一下：</p><p><a href="/images/201904/2019-05-02_093247.jpg" class="fancybox fancybox.image" rel="group" title="分析1"><img src="/images/201904/2019-05-02_093247.jpg" class="imgheight" alt="e" title="分析1"></a><br>增加一点数据：<br><a href="/images/201904/2019-05-02_094930.jpg" class="fancybox fancybox.image" rel="group" title="分析2"><img src="/images/201904/2019-05-02_094930.jpg" class="imgheight" alt="e" title="分析2"></a><br>不妨再来一个图解：<br><a href="/images/201904/2019-05-02_152932.jpg" class="fancybox fancybox.image" rel="group" title="分析3"><img src="/images/201904/2019-05-02_152932.jpg" class="imgheight" alt="e" title="分析3"></a></p><p>因为数据和位置相关，所以这里是取排列。<br>根据上面的图示分析，我们可以用列表中存列表来存放二维数组，由于我们是按照列或者行来计算的（对称矩阵），所以我们这里的列表的统计方式也要按照列或者行。</p><p>翻译如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getD</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">numberOfBoomerangs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type points: List[List[int]]        :rtype: int        """</span>        i <span class="token operator">=</span> <span class="token number">0</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> <span class="token number">0</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">:</span>                d <span class="token operator">=</span> self<span class="token punctuation">.</span>getD<span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>                j<span class="token operator">+=</span><span class="token number">1</span>            i<span class="token operator">+=</span><span class="token number">1</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">#统计每一个列表中大于等于2的数据</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span>            se <span class="token operator">=</span> set<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> se<span class="token punctuation">:</span>                s <span class="token operator">=</span> i<span class="token punctuation">.</span>count<span class="token punctuation">(</span>k<span class="token punctuation">)</span>                <span class="token keyword">if</span> s <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>                    count <span class="token operator">+=</span> s <span class="token operator">*</span> <span class="token punctuation">(</span>s<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> count</code></pre><p><span class="title2">结果：</span><br>超出时间限制<br><span class="title2">分析：</span><br>其实也不难理解，在我们处理统计数据的时候，<code>s = i.count(k)</code>也是O(n)级别。<br>所以我们算法的时间复杂度是O(n^3)级别，而一般而言在leetcode中，不超时的时间复杂度是O(n^2)。<br>所以我们需要改进算法。</p><hr><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getD</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>p2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">numberOfBoomerangs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type points: List[List[int]]        :rtype: int        """</span>        i <span class="token operator">=</span> <span class="token number">0</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> <span class="token number">0</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>points<span class="token punctuation">)</span><span class="token punctuation">:</span>                d <span class="token operator">=</span> self<span class="token punctuation">.</span>getD<span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> points<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                li<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span>                j<span class="token operator">+=</span><span class="token number">1</span>            i<span class="token operator">+=</span><span class="token number">1</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">#统计每一个列表中大于等于2的数据</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#按照每一个列表（即列），统计数据到字典中</span>            se <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> i<span class="token punctuation">:</span>                se<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> se<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true">#计算</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> se<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> m<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">:</span>                    count <span class="token operator">+=</span> m<span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token number">-1</span><span class="token punctuation">)</span>            se <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#规整为{}</span>        <span class="token keyword">return</span> count</code></pre><p><span class="title2">分析：</span><br>时间复杂度是：O(n^2)，满足题意要求。</p><p><span class="title2">结果：</span></p><blockquote><p>执行用时 : 1684 ms, 在Number of Boomerangs的Python3提交中击败了62.50% 的用户<br>内存消耗 : 23 MB, 在Number of Boomerangs的Python3提交中击败了13.46% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>1684 ms</td><td>23MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-49 | 字母异位词分组</title>
      <link href="/2019/05/leetcode-49/"/>
      <url>/2019/05/leetcode-49/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p><blockquote><p><span>示例:</span><br>输入: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],<br>输出:<br>[<br>  [“ate”,”eat”,”tea”],<br>  [“nat”,”tan”],<br>  [“bat”]<br>]<br><span>说明：</span></p><ul><li>所有输入均为小写字母。</li><li>不考虑答案输出的顺序。</li></ul></blockquote><h1 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h1><p>由于是判断字符串，故而一趟遍历就可以了。<br>然后，考察点就落在了如何封装数据上了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> strs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type strs: List[str]        :rtype: List[List[str]]        """</span>        re<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> strs<span class="token punctuation">:</span>            s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> s <span class="token keyword">in</span> re<span class="token punctuation">:</span>                re<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                re<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span>           <span class="token keyword">return</span> list<span class="token punctuation">(</span>re<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><hr><p>上面的数据封装，我是在讨论区中看见的，很好的案例。</p><blockquote><p><span>结果：</span><br>执行用时 : 116 ms, 在Group Anagrams的Python提交中击败了95.39% 的用户<br>内存消耗 : 15.5 MB, 在Group Anagrams的Python提交中击败了42.94% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>116 ms</td><td>15.5MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-454 | 四数相加 II</title>
      <link href="/2019/05/leetcode-454/"/>
      <url>/2019/05/leetcode-454/</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。<br>为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。</p><blockquote><p><span>例如:</span><br>输入:<br>A = [ 1, 2]<br>B = [-2,-1]<br>C = [-1, 2]<br>D = [ 0, 2]<br>输出:<br>2<br><span>解释:</span><br>两个元组如下:</p><ol><li>(0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</li><li>(1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</li></ol></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>由于有个数限制，而且输出的结果是有多少组，而不是返回下标，这里我们可以直接计算值，满足条件，累加计数。</p><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><h2 id="1-错误解答"><a href="#1-错误解答" class="headerlink" title="1. 错误解答"></a>1. 错误解答</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fourSumCount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> D<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type A: List[int]        :type B: List[int]        :type C: List[int]        :type D: List[int]        :rtype: int        """</span>        <span class="token comment" spellcheck="true">#用列表接收数据</span>        di <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> B<span class="token punctuation">:</span>                di<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> di<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> C<span class="token punctuation">:</span>            <span class="token keyword">for</span> l <span class="token keyword">in</span> D<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">-</span>k<span class="token operator">-</span>l <span class="token keyword">in</span> di<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true">#因为上面li中可能有相同的值，而li中必是两个不同的i,j位置产生的值，需要统计相同数值个数</span>                    count <span class="token operator">+=</span> di<span class="token punctuation">[</span><span class="token operator">-</span>k<span class="token operator">-</span>l<span class="token punctuation">]</span>        <span class="token keyword">return</span> count</code></pre><blockquote><p><span class="title2">结果：</span><br>执行用时 : 360 ms, 在4Sum II的Python提交中击败了75.51% 的用户<br>内存消耗 : 34.2 MB, 在4Sum II的Python提交中击败了43.48% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>360 ms</td><td>34.2MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>numpy简单使用</title>
      <link href="/2019/05/numpy-1/"/>
      <url>/2019/05/numpy-1/</url>
      
        <content type="html"><![CDATA[<p>NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p><h2 id="Ndarray-对象"><a href="#Ndarray-对象" class="headerlink" title="Ndarray 对象"></a>Ndarray 对象</h2><pre class=" language-python"><code class="language-python">numpy<span class="token punctuation">.</span>array<span class="token punctuation">(</span>object<span class="token punctuation">,</span> dtype <span class="token operator">=</span> None<span class="token punctuation">,</span> copy <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> order <span class="token operator">=</span> None<span class="token punctuation">,</span> subok <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> ndmin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>object: 数列对象<br>dtye: 也即是data-type，即数据类型<br>copy: 对象是否需要复制，可选<br>order: 创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）<br>ndmin: 指定生成数组的最小维度(dimension)</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap格子系统（二）</title>
      <link href="/2019/05/bootstrap-4/"/>
      <url>/2019/05/bootstrap-4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-对其方式"><a href="#1-对其方式" class="headerlink" title="1. 对其方式"></a>1. 对其方式</h1><h2 id="1-1-垂直对齐（Vertical-alignment）"><a href="#1-1-垂直对齐（Vertical-alignment）" class="headerlink" title="1.1 垂直对齐（Vertical alignment）"></a>1.1 垂直对齐（Vertical alignment）</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row align-items-start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row align-items-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row align-items-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>为了能观察到效果，我们设置如下的css样式：</p><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token class">.row</span>, div<span class="token class">.col</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token class">.row</span></span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/201904/2019-04-30_115523.jpg" alt="e" title="效果"></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col align-self-start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col align-self-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col align-self-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><img src="/images/201904/2019-04-30_115739.jpg" alt="e" title="效果"></p><h2 id="1-2-水平对齐（Horizontal-alignment）"><a href="#1-2-水平对齐（Horizontal-alignment）" class="headerlink" title="1.2 水平对齐（Horizontal alignment）"></a>1.2 水平对齐（Horizontal alignment）</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of two columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of two columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of two columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of two columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-end<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of two columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of two columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-around<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of two columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of two columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-between<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of two columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of two columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token class">.row</span>, div<span class="token class">.col-4</span></span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/images/201904/2019-05-01_082107.jpg" alt="e" title="效果"><br><code>justify-content-start</code>        列内容在行内左对齐<br><code>justify-content-center</code>     列内容在行内居中对齐<br><code>justify-content-end</code>          列内容在行内右对齐<br><code>justify-content-around</code>     列内容在行内分散对齐，每列的左右边距一样，故中间是单边的两倍<br><code>justify-content-between</code>   列内容在行内分别左右对齐</p>]]></content>
      
      
      <categories>
          
          <category> bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap格子系统（一）</title>
      <link href="/2019/04/bootstrap-3/"/>
      <url>/2019/04/bootstrap-3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、格子系统-Grid-system"><a href="#一、格子系统-Grid-system" class="headerlink" title="一、格子系统(Grid system)"></a>一、格子系统(Grid system)</h1><p>移动设备优先的特性是因为格子系统中的12列系统，5个默认的响应层以及很多的CSS类。<br>Bootstrap的网格系统使用一系列容器、行和列来布局和对齐内容。<br>It’s built with flexbox and is fully responsive. Below is an example and an in-depth look at how the grid comes together.<br>它是用flexbox构建的，是完全响应式。</p><blockquote><p><span>CSS属性：flexbox</span><br>box-flex 属性规定框的子元素是否可伸缩其尺寸。<br>提示：可伸缩元素能够随着框的缩小或扩大而缩写或放大。只要框中有多余的空间，可伸缩元素就会扩展来填充这些空间。<br><span>浏览器支持</span><br>目前没有浏览器支持 <code>box-flex</code> 属性。<br>Firefox 支持替代的 <code>-moz-box-flex</code> 属性。<br>Safari、Opera 以及 Chrome 支持替代的<code>-webkit-box-flex</code> 属性。<br><span>案例：</span></p></blockquote><div style="display:-moz-box; /* Firefox */display:-webkit-box; /* Safari and Chrome */display:box;">    <p style="-moz-box-flex:1.0; /* Firefox */-webkit-box-flex:1.0; /* Safari and Chrome */box-flex:1.0;    border:1px solid red;">hello</p>    <p style="    -moz-box-flex:2.0; /* Firefox */    -webkit-box-flex:2.0; /* Safari and Chrome */box-flex:2.0;    border:1px solid blue;">flexbox</p></div><p>上面flexbox案例的代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>display:-moz-box; /* Firefox */             display:-webkit-box; /* Safari and Chrome */             display:box;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-moz-box-flex:1.0; /* Firefox */              -webkit-box-flex:1.0; /* Safari and Chrome */              box-flex:1.0;              border:1px solid red;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        hello    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-moz-box-flex:2.0; /* Firefox */                  -webkit-box-flex:2.0; /* Safari and Chrome */              box-flex:2.0;                  border:1px solid blue;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        flexbox    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><span class="title">说明：</span><br>在使用<code>hexo</code>中的<code>md文件</code>时，<code>&amp;lt;style&amp;gt;``&amp;lt;/style&amp;gt;</code>中的<code>css</code>样式需要放入外部<code>css</code>文件中，或者直接使用<code>style</code>。</p><hr><p>下面正式学习Grid System。</p><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><p>使用第一章的模板，这里不给出模板了，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      One of three columns    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>产生三个等宽度的列，对大中小设备都适用，也就是你在测试时缩放窗口也是适用的。并且这些列，在页面的父元素（<code>.container</code>）中是居中的。<br>至于为什么对大中小设备都适用，可以查看下图，因为我们只设置了小设备，中大超大都没有设置，那么就会默认使用小设备的设置。</p><table><thead><tr><th></th><th>Extra small<br><small>&lt;576px</small></th><th>Small<br><small>≥576px</small></th><th>Medium<br><small>≥768px</small></th><th>Large<br><small>≥992px</small></th><th>Extra large<br><small>≥1200px</small></th></tr></thead><tbody><tr><th>Max container width</th><td>None (auto)</td><td>540px</td><td>720px</td><td>960px</td><td>1140px</td></tr><tr><th>Class prefix</th><td><code>.col-</code></td><td><code>.col-sm-</code></td><td><code>.col-md-</code></td><td><code>.col-lg-</code></td><td><code>.col-xl-</code></td></tr><tr><th># of columns</th><td colspan="5">12</td></tr><tr><th>Gutter width</th><td colspan="5">30px (15px on each side of a column)</td></tr><tr><th>Nestable</th><td colspan="5">Yes</td></tr><tr><th>Column ordering</th><td colspan="5">Yes</td></tr></tbody></table>超大屏没有，找大屏，大屏没有找中屏，中屏没有找小屏，小屏没有找col<h3 id="1-1-等宽度"><a href="#1-1-等宽度" class="headerlink" title="1.1 等宽度"></a>1.1 等宽度</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      1 of 2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      2 of 2    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      1 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      2 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      3 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><span class="title">效果：</span><br><img src="/images/201904/2019-04-30_104132.jpg" alt="e" title="效果图1"></p><p>在没有设置宽度的时候，每一行的所有的列按个数平分宽度。</p><h3 id="1-2-不等宽度"><a href="#1-2-不等宽度" class="headerlink" title="1.2 不等宽度"></a>1.2 不等宽度</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      1 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      2 of 3 (wider)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      3 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      1 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      2 of 3 (wider)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      3 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><span class="title">效果：</span><br><img src="/images/201904/2019-04-30_104451.jpg" alt="e" title="效果图2"></p><p>在设置宽度后，如<code>col-6</code>表示占<code>6</code>列的宽度，其余的两列没有指定，就平分剩下的<code>6</code>列。</p><h3 id="1-3-可变宽度"><a href="#1-3-可变宽度" class="headerlink" title="1.3 可变宽度"></a>1.3 可变宽度</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row justify-content-md-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col col-lg-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      1 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      Variable width content    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col col-lg-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      3 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      1 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      Variable width content    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col col-lg-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      3 of 3    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><blockquote><p>Use col-{breakpoint}-auto classes to size columns based on the natural width of their content.<br>使用col-{breakpoint}-auto类，基于他们的内容自然宽度来调整列的大小。</p></blockquote><p>为了方便查看效果，我这里都加了红色边框。<br><span class="title">效果1：大屏</span><br><img src="/images/201904/2019-04-30_110100.jpg" alt="e" title="效果图3"><br>大屏，对应<code>lg</code>，也就是此时的<code>lg</code>生效，第一行左右都占两列，由于中间没有设置<code>lg</code>，此时<code>md</code>生效，故而是：左右两列，中间按内容占列宽度，然后整个<code>div</code>在<code>container</code>中居中。（第二列同理）</p><p>现在我们调整浏览器宽度为中等设备宽度<br><span class="title">效果2：中屏</span><br><img src="/images/201904/2019-04-30_110430.jpg" alt="e" title="效果图4"><br>中屏，对应<code>md</code>，也就是中间的生效，其余的都是等宽度<code>col</code>，也就是中间适应内容占据宽度，剩余的宽度由左右两边的列平分。</p><p>调整浏览器宽度为小设备宽度。<br><span class="title">效果3：小屏</span><br><img src="/images/201904/2019-04-30_110723.jpg" alt="e" title="效果图5"></p><p>代码中没有使用<code>col-sm</code>，这就很有意思了。因为小屏是<code>col-sm</code>。<br>其实测试后发现：</p><ul><li>如果没有设置<code>col-sm</code>样式在行中。只有大屏或者中屏的设置，那么就默认每一个大屏(或者中屏)中的列，都占据一行，也就是小屏的12列。</li><li>如果每一行设置的都是<code>col</code>，也即是等宽度，此时无论大中小还是特大屏幕都是平分，</li><li><span class="emphasis">换句话说：如果你想所有的大中小屏幕中你的视图的效果一样，从最小的设备到最大的设备都相同的网格，可以使用<code>.col</code>和<code>.col-*</code>类。</span></li></ul><h3 id="1-4-多行等宽度"><a href="#1-4-多行等宽度" class="headerlink" title="1.4 多行等宽度"></a>1.4 多行等宽度</h3><p>使用<code>.w-100</code>来插入新的一行</p><pre class=" language-HTML"><code class="language-HTML"><div class="container">    <div class="row">         <div class="col red">col</div>        <div class="col red">col</div>        <div class="w-100"></div>        <div class="col red">col</div>        <div class="col red">col</div>    </div></div></code></pre><h3 id="1-5-混杂分析"><a href="#1-5-混杂分析" class="headerlink" title="1.5 混杂分析"></a>1.5 混杂分析</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Stack the columns on mobile by making one full-width and the other half-width --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-12 col-md-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-12 .col-md-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6 col-md-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6 .col-md-4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Columns are always 50% wide, on mobile and desktop --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>.col-6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>由于没有设置大屏，也就是lg。所以我们的大屏和中屏都是加载中屏，然后显示。<br>小屏也没有设置，所以缩小窗口大小的时候，显示col-*的设置。<br>效果很简单，可以结合第一张的模板，自己设置边框，缩小浏览器窗口大小查看效果。</p>]]></content>
      
      
      <categories>
          
          <category> bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap容器</title>
      <link href="/2019/04/bootstrap-2/"/>
      <url>/2019/04/bootstrap-2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>在Bootstrap中，容器是最基本的布局元素，同时当我们使用默认的网格系统的时候是必须的。选择响应式固定宽度容器(即在每个断点处其最大宽度发生变化)或流宽容器(即始终100%宽)<br>尽管容器可以嵌套，大多数的布局并不需要嵌套的容器。</p><h2 id="1-两种容器"><a href="#1-两种容器" class="headerlink" title="1. 两种容器"></a>1. 两种容器</h2><h3 id="1-1-container"><a href="#1-1-container" class="headerlink" title="1.1 container"></a>1.1 container</h3><p>内容不会填充整个视图，同样填充的大小随着窗口大小的变化而变化。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="1-2-container-fluid"><a href="#1-2-container-fluid" class="headerlink" title="1.2 container-fluid"></a>1.2 container-fluid</h3><p>内容填充整个视图，填充大小也会随之变化，填充的大小始终是整个窗口的大小。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container-fluid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>这两种容器，响应有阈值控制，也就是响应断点。<br>由于Bootstrap被开发为移动设备优先，所以我们使用一些媒体查询来为布局和界面创建合理的断点。这些断点大多基于最小视口宽度，允许我们在视口更改时扩展元素。<br>Bootstrap主要在用于布局、网格系统和组件的资源css文件中使用以下媒体查询范围(或断点)。</p><pre><code>// Small devices (landscape phones, 576px and up) 小设备 @media (min-width: 576px) { ... }// Medium devices (tablets, 768px and up)  中等设备 @media (min-width: 768px) { ... }// Large devices (desktops, 992px and up) 大设备@media (min-width: 992px) { ... }// Extra large devices (large desktops, 1200px and up) 超大设备@media (min-width: 1200px) { ... }</code></pre><p>在bootstrap.min.css文件中可以找到。</p><h2 id="2-Z-index"><a href="#2-Z-index" class="headerlink" title="2. Z-index"></a>2. Z-index</h2><p>在Bootstrap中默认设置了各个组件的Z-index，就像工具提示，弹出窗口，导航条，下拉菜单等，他们的Z-index开始于一个比较高且任意的值，足够高也足够特殊去理想地避免冲突。<br>并不建议修改他们的Z-index值，如果你定制一个，就意味着需要改变所有的值。<br>我们一起看看默认值：</p><pre><code>$zindex-dropdown:          1000 !default;$zindex-sticky:            1020 !default;$zindex-fixed:             1030 !default;$zindex-modal-backdrop:    1040 !default;$zindex-modal:             1050 !default;$zindex-popover:           1060 !default;$zindex-tooltip:           1070 !default;</code></pre>]]></content>
      
      
      <categories>
          
          <category> bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap安装</title>
      <link href="/2019/04/bootstrap-1/"/>
      <url>/2019/04/bootstrap-1/</url>
      
        <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p><code>Bootstrap</code> 是世界上最受欢迎的前端框架，用于构建<code>响应式</code>、移动设备优先的网站。</p><h2 id="1-快速开始"><a href="#1-快速开始" class="headerlink" title="1.  快速开始"></a>1.  快速开始</h2><h3 id="1-1-CSS"><a href="#1-1-CSS" class="headerlink" title="1.1 CSS"></a>1.1 CSS</h3><p>将引入 Bootstrap 样式表的<code>&amp;lt;link&amp;gt</code>; 标签复制并粘贴到 <code>&amp;lt;head&amp;gt</code>;中，并放在所有其他样式表之前。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h3 id="1-2-JS"><a href="#1-2-JS" class="headerlink" title="1.2 JS"></a>1.2 JS</h3><p><code>Bootstrap</code>中的许多组件需要依赖 <code>JavaScript</code> 才能运行。具体来说，他们依赖的是 <code>jQuery</code>、<code>Popper.js</code> 以及我们自己开发的 <code>JavaScript</code> 插件。具体操作就是将下列 <code>&amp;lt;script&amp;gt</code>; 标签放到页面底部的 <code>&amp;lt;/body&amp;gt;</code> 标签之前。注意顺序，<code>jQuery</code> 必须放在最前面，然后是 <code>Popper.js</code>，最后是我们自己的 <code>JavaScript</code> 插件。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.2.1/jquery.slim.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js<span class="token punctuation">"</span></span> <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl<span class="token punctuation">"</span></span> <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="1-3-初学者模板"><a href="#1-3-初学者模板" class="headerlink" title="1.3 初学者模板"></a>1.3 初学者模板</h3><p>使用 <code>HTML5</code> <code>doctype</code> 声明、添加一个 <code>viewport</code> 标签让页面正确支持响应式布局。<br>上面的css文件和js文件，为了学习方便。我下载到了本地，然后我直接用的本地的。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span> hello <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/favicon.ico<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jQuery first, then popper.js then Bootstrap.js --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/jquery.slim.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/popper.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>以上这些就是所有页面必须的。请访问 <a href="https://v4.bootcss.com/docs/4.0/layout/overview/" title="布局" target="_blank" rel="noopener">布局</a> 或 <a href="https://v4.bootcss.com/docs/4.0/examples/" title="官方实例" target="_blank" rel="noopener">官方实例</a> 以作参考，然后就可以开始布局你的网站内容和组件了。</p><hr><p>从下一章我们开始学习Bootstrap</p>]]></content>
      
      
      <categories>
          
          <category> bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-15 | 3Sum 中等难度</title>
      <link href="/2019/04/leetcode-15/"/>
      <url>/2019/04/leetcode-15/</url>
      
        <content type="html"><![CDATA[<h1 id="15-三数之和（3Sum）"><a href="#15-三数之和（3Sum）" class="headerlink" title="15. 三数之和（3Sum）"></a>15. 三数之和（3Sum）</h1><p>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。</p><blockquote><p><span>注意：</span><br>答案中不可以包含重复的三元组。<br>例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，<br>满足要求的三元组集合为：<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p></blockquote><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>思考的过程，我昨天晚上想了想，没想出来。然后，刚刚想的思路，大概还是有点像，无论对错，先将它写出来：</p><blockquote><p><span style="color:red;font-weight:bloder;">nums = [-1, 0, 1, 2, -1, -4]</span><br>答案：<br>    -1 -1 2<br>    -1 0  1<br>封装：<br>    se = {-4: 1, -1: 2, 0: 1, 1: 1, 2: 1}<br>思考过程：<br>①一负数，两个正数：<br>    -4 4 0   ✘<br>    -4 3 1   ✘<br>    -4 2 2   ✘<br>    -1 1 0   ✔<br>②三个零<br>     0 0 0   ✘<br>③一正数，两个负数：<br>    1 -1 0 (重复，可以设置结果集合，然后去重)<br>    2 -1 -1  ✔</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        re <span class="token operator">=</span> nums<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 浅拷贝，复制一个备份</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> target <span class="token operator">-</span> j            re<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#i是下标，j是值，按下标删除</span>            <span class="token keyword">if</span> r <span class="token keyword">in</span> re<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">[</span>j<span class="token punctuation">,</span> r<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> result <span class="token operator">and</span> <span class="token punctuation">[</span>r<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> result<span class="token punctuation">:</span>                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>j<span class="token punctuation">,</span> r<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">findZero</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        找到起始0元素，或者最小的非负数        :param nums:        :return: 下标位置        """</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> i    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        <span class="token comment" spellcheck="true">#接收数据的列表</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#①感觉封装有点多余，直接排序就可以了</span>        nums <span class="token operator">=</span> sorted<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#②处理数据，需要两个指针，一前一后扫描</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#循环的过程，应该是i扫描到末尾</span>        <span class="token comment" spellcheck="true">#j具有特殊性，如果i是负数，j从后往前；i是正数，j从前到后</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#转化成求在[0-max]之间求两数之和==-nums[i],突然想到了用之前第一题中的two sum</span>                <span class="token comment" spellcheck="true">#但是这里可能有多个值，我们需要修改程序</span>                re <span class="token operator">=</span> self<span class="token punctuation">.</span>twoSum<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>self<span class="token punctuation">.</span>findZero<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#print(re) #[[1, 3], [2, 2]]</span>                re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>re<span class="token punctuation">)</span>                i<span class="token operator">+=</span><span class="token number">1</span>              <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#判断0的个数</span>                count <span class="token operator">=</span> nums<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">3</span>  <span class="token comment" spellcheck="true">#整除，得到[0,0,0]列表的个数</span>                <span class="token comment" spellcheck="true"># whlie count>0:</span>                <span class="token keyword">if</span> count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#count-=1，结果集无论几个[0,0,0]，都只加入一个</span>                <span class="token comment" spellcheck="true">#保证0处执行一次，我们后移i</span>                <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#  nums[i]>0</span>                <span class="token comment" spellcheck="true"># 同理，此时的范围是[min-0)</span>                re <span class="token operator">=</span> self<span class="token punctuation">.</span>twoSum<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>findZero<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>re<span class="token punctuation">)</span>                i<span class="token operator">+=</span><span class="token number">1</span>        final <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#处理结果集#[[[1, 3], [2, 2], -4], [[0, 1], -1], [[0, 1], -1], [0, 0, 0], [[-1, -1], 2], [[-1, -1], 2], [3]]</span>        k <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> k<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>            i <span class="token operator">=</span> result<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>i<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">:</span>                        ms <span class="token operator">=</span> i<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#[1, 3]</span>                        ms<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">[</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#-4</span>                        <span class="token keyword">if</span> ms <span class="token operator">not</span> <span class="token keyword">in</span> final<span class="token punctuation">:</span>                            final<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ms<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        final<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                        j<span class="token operator">+=</span><span class="token number">1</span>                    j<span class="token operator">+=</span><span class="token number">1</span>            k<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> final</code></pre><blockquote><p><span>结果：超时</span><br>提交记录<br>311 / 313 个通过测试用例</p></blockquote><p>对于最后一个测试用例，我们这里演示一下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time    start <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">82597</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9243</span><span class="token punctuation">,</span><span class="token number">62390</span><span class="token punctuation">,</span><span class="token number">83030</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97960</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26521</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61011</span><span class="token punctuation">,</span><span class="token number">83390</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38677</span><span class="token punctuation">,</span><span class="token number">12333</span><span class="token punctuation">,</span><span class="token number">75987</span><span class="token punctuation">,</span><span class="token number">46091</span><span class="token punctuation">,</span><span class="token number">83794</span><span class="token punctuation">,</span><span class="token number">19355</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71037</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6242</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28801</span><span class="token punctuation">,</span><span class="token number">324</span><span class="token punctuation">,</span><span class="token number">1202</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90885</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2989</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">95597</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34333</span><span class="token punctuation">,</span><span class="token number">35528</span><span class="token punctuation">,</span><span class="token number">5680</span><span class="token punctuation">,</span><span class="token number">89093</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90606</span><span class="token punctuation">,</span><span class="token number">50360</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29393</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27012</span><span class="token punctuation">,</span><span class="token number">53313</span><span class="token punctuation">,</span><span class="token number">65213</span><span class="token punctuation">,</span><span class="token number">99818</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82405</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41661</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3333</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51952</span><span class="token punctuation">,</span><span class="token number">72135</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1523</span><span class="token punctuation">,</span><span class="token number">26377</span><span class="token punctuation">,</span><span class="token number">74685</span><span class="token punctuation">,</span><span class="token number">96992</span><span class="token punctuation">,</span><span class="token number">92263</span><span class="token punctuation">,</span><span class="token number">15929</span><span class="token punctuation">,</span><span class="token number">5467</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99555</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43348</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41689</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60383</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3990</span><span class="token punctuation">,</span><span class="token number">32165</span><span class="token punctuation">,</span><span class="token number">65265</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72973</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58372</span><span class="token punctuation">,</span><span class="token number">12741</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48568</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46596</span><span class="token punctuation">,</span><span class="token number">72419</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1859</span><span class="token punctuation">,</span><span class="token number">34153</span><span class="token punctuation">,</span><span class="token number">62937</span><span class="token punctuation">,</span><span class="token number">81310</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61823</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96770</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54944</span><span class="token punctuation">,</span><span class="token number">8845</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91184</span><span class="token punctuation">,</span><span class="token number">24208</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29078</span><span class="token punctuation">,</span><span class="token number">31495</span><span class="token punctuation">,</span><span class="token number">65258</span><span class="token punctuation">,</span><span class="token number">14198</span><span class="token punctuation">,</span><span class="token number">85395</span><span class="token punctuation">,</span><span class="token number">70506</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40908</span><span class="token punctuation">,</span><span class="token number">56740</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12228</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40072</span><span class="token punctuation">,</span><span class="token number">32429</span><span class="token punctuation">,</span><span class="token number">93001</span><span class="token punctuation">,</span><span class="token number">68445</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73927</span><span class="token punctuation">,</span><span class="token number">25731</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91859</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24150</span><span class="token punctuation">,</span><span class="token number">10093</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60271</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81683</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18126</span><span class="token punctuation">,</span><span class="token number">51055</span><span class="token punctuation">,</span><span class="token number">48189</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6468</span><span class="token punctuation">,</span><span class="token number">25057</span><span class="token punctuation">,</span><span class="token number">81194</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58628</span><span class="token punctuation">,</span><span class="token number">74042</span><span class="token punctuation">,</span><span class="token number">66158</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14452</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49851</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43667</span><span class="token punctuation">,</span><span class="token number">11092</span><span class="token punctuation">,</span><span class="token number">39189</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">17025</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79173</span><span class="token punctuation">,</span><span class="token number">13606</span><span class="token punctuation">,</span><span class="token number">83172</span><span class="token punctuation">,</span><span class="token number">92647</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59741</span><span class="token punctuation">,</span><span class="token number">19343</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26644</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57607</span><span class="token punctuation">,</span><span class="token number">82908</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20655</span><span class="token punctuation">,</span><span class="token number">1637</span><span class="token punctuation">,</span><span class="token number">80060</span><span class="token punctuation">,</span><span class="token number">98994</span><span class="token punctuation">,</span><span class="token number">39331</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31274</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61523</span><span class="token punctuation">,</span><span class="token number">91225</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72953</span><span class="token punctuation">,</span><span class="token number">13211</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75116</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98421</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41571</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69074</span><span class="token punctuation">,</span><span class="token number">99587</span><span class="token punctuation">,</span><span class="token number">39345</span><span class="token punctuation">,</span><span class="token number">42151</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2460</span><span class="token punctuation">,</span><span class="token number">98236</span><span class="token punctuation">,</span><span class="token number">15690</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52507</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">95803</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48935</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46492</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45606</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79254</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99851</span><span class="token punctuation">,</span><span class="token number">52533</span><span class="token punctuation">,</span><span class="token number">73486</span><span class="token punctuation">,</span><span class="token number">39948</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7240</span><span class="token punctuation">,</span><span class="token number">71815</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">585</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96252</span><span class="token punctuation">,</span><span class="token number">90990</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93815</span><span class="token punctuation">,</span><span class="token number">93340</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71848</span><span class="token punctuation">,</span><span class="token number">58733</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14859</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83082</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75794</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82082</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24871</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15206</span><span class="token punctuation">,</span><span class="token number">91207</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56469</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93618</span><span class="token punctuation">,</span><span class="token number">67131</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8682</span><span class="token punctuation">,</span><span class="token number">75719</span><span class="token punctuation">,</span><span class="token number">87429</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98757</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7535</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24890</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94160</span><span class="token punctuation">,</span><span class="token number">85003</span><span class="token punctuation">,</span><span class="token number">33928</span><span class="token punctuation">,</span><span class="token number">75538</span><span class="token punctuation">,</span><span class="token number">97456</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66424</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60074</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8527</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28697</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22308</span><span class="token punctuation">,</span><span class="token number">2246</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70134</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82319</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10184</span><span class="token punctuation">,</span><span class="token number">87081</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34949</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28645</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47352</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83966</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60418</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15293</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53067</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25921</span><span class="token punctuation">,</span><span class="token number">55172</span><span class="token punctuation">,</span><span class="token number">75064</span><span class="token punctuation">,</span><span class="token number">95859</span><span class="token punctuation">,</span><span class="token number">48049</span><span class="token punctuation">,</span><span class="token number">34311</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86931</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38586</span><span class="token punctuation">,</span><span class="token number">33686</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36714</span><span class="token punctuation">,</span><span class="token number">96922</span><span class="token punctuation">,</span><span class="token number">76713</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22165</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80585</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34503</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44516</span><span class="token punctuation">,</span><span class="token number">39217</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28457</span><span class="token punctuation">,</span><span class="token number">47227</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94036</span><span class="token punctuation">,</span><span class="token number">43457</span><span class="token punctuation">,</span><span class="token number">24626</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">87359</span><span class="token punctuation">,</span><span class="token number">26898</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70819</span><span class="token punctuation">,</span><span class="token number">30528</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32397</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69486</span><span class="token punctuation">,</span><span class="token number">84912</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1187</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98986</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32958</span><span class="token punctuation">,</span><span class="token number">4280</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79129</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">65604</span><span class="token punctuation">,</span><span class="token number">9344</span><span class="token punctuation">,</span><span class="token number">58964</span><span class="token punctuation">,</span><span class="token number">50584</span><span class="token punctuation">,</span><span class="token number">71128</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">55480</span><span class="token punctuation">,</span><span class="token number">24986</span><span class="token punctuation">,</span><span class="token number">15086</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62360</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42977</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49482</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77256</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36895</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74818</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">3063</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49426</span><span class="token punctuation">,</span><span class="token number">28152</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97329</span><span class="token punctuation">,</span><span class="token number">6086</span><span class="token punctuation">,</span><span class="token number">86035</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88743</span><span class="token punctuation">,</span><span class="token number">35241</span><span class="token punctuation">,</span><span class="token number">44249</span><span class="token punctuation">,</span><span class="token number">19927</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10660</span><span class="token punctuation">,</span><span class="token number">89404</span><span class="token punctuation">,</span><span class="token number">24179</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26621</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6511</span><span class="token punctuation">,</span><span class="token number">57745</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28750</span><span class="token punctuation">,</span><span class="token number">96340</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97160</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97822</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49979</span><span class="token punctuation">,</span><span class="token number">52307</span><span class="token punctuation">,</span><span class="token number">79462</span><span class="token punctuation">,</span><span class="token number">94273</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24808</span><span class="token punctuation">,</span><span class="token number">77104</span><span class="token punctuation">,</span><span class="token number">9255</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83057</span><span class="token punctuation">,</span><span class="token number">77655</span><span class="token punctuation">,</span><span class="token number">21361</span><span class="token punctuation">,</span><span class="token number">55956</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9096</span><span class="token punctuation">,</span><span class="token number">48599</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40490</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">55107</span><span class="token punctuation">,</span><span class="token number">2689</span><span class="token punctuation">,</span><span class="token number">29608</span><span class="token punctuation">,</span><span class="token number">20497</span><span class="token punctuation">,</span><span class="token number">66834</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34678</span><span class="token punctuation">,</span><span class="token number">23553</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81400</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66630</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96321</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34499</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12957</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20564</span><span class="token punctuation">,</span><span class="token number">25610</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4322</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58462</span><span class="token punctuation">,</span><span class="token number">20801</span><span class="token punctuation">,</span><span class="token number">53700</span><span class="token punctuation">,</span><span class="token number">71527</span><span class="token punctuation">,</span><span class="token number">24669</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54534</span><span class="token punctuation">,</span><span class="token number">57879</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3221</span><span class="token punctuation">,</span><span class="token number">33636</span><span class="token punctuation">,</span><span class="token number">3900</span><span class="token punctuation">,</span><span class="token number">97832</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27688</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98715</span><span class="token punctuation">,</span><span class="token number">5992</span><span class="token punctuation">,</span><span class="token number">24520</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">55401</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57613</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69926</span><span class="token punctuation">,</span><span class="token number">57377</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77610</span><span class="token punctuation">,</span><span class="token number">20123</span><span class="token punctuation">,</span><span class="token number">52174</span><span class="token punctuation">,</span><span class="token number">860</span><span class="token punctuation">,</span><span class="token number">60429</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91994</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62403</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6218</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90610</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">37263</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15052</span><span class="token punctuation">,</span><span class="token number">62069</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96465</span><span class="token punctuation">,</span><span class="token number">44254</span><span class="token punctuation">,</span><span class="token number">89892</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3406</span><span class="token punctuation">,</span><span class="token number">19121</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41842</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">87783</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64125</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56120</span><span class="token punctuation">,</span><span class="token number">73904</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22797</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58118</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4866</span><span class="token punctuation">,</span><span class="token number">5356</span><span class="token punctuation">,</span><span class="token number">75318</span><span class="token punctuation">,</span><span class="token number">46119</span><span class="token punctuation">,</span><span class="token number">21276</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19246</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9241</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97425</span><span class="token punctuation">,</span><span class="token number">57333</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15802</span><span class="token punctuation">,</span><span class="token number">93149</span><span class="token punctuation">,</span><span class="token number">25689</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5532</span><span class="token punctuation">,</span><span class="token number">95716</span><span class="token punctuation">,</span><span class="token number">39209</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">87672</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29470</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16324</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15331</span><span class="token punctuation">,</span><span class="token number">27632</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39454</span><span class="token punctuation">,</span><span class="token number">56530</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16000</span><span class="token punctuation">,</span><span class="token number">29853</span><span class="token punctuation">,</span><span class="token number">46475</span><span class="token punctuation">,</span><span class="token number">78242</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46602</span><span class="token punctuation">,</span><span class="token number">83192</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73440</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15816</span><span class="token punctuation">,</span><span class="token number">50964</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36601</span><span class="token punctuation">,</span><span class="token number">89758</span><span class="token punctuation">,</span><span class="token number">38375</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40007</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36675</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94030</span><span class="token punctuation">,</span><span class="token number">67576</span><span class="token punctuation">,</span><span class="token number">46811</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64919</span><span class="token punctuation">,</span><span class="token number">45595</span><span class="token punctuation">,</span><span class="token number">76530</span><span class="token punctuation">,</span><span class="token number">40398</span><span class="token punctuation">,</span><span class="token number">35845</span><span class="token punctuation">,</span><span class="token number">41791</span><span class="token punctuation">,</span><span class="token number">67697</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30439</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82944</span><span class="token punctuation">,</span><span class="token number">63115</span><span class="token punctuation">,</span><span class="token number">33447</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36046</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50122</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34789</span><span class="token punctuation">,</span><span class="token number">43003</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78947</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38763</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89210</span><span class="token punctuation">,</span><span class="token number">32756</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20389</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31358</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90526</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81607</span><span class="token punctuation">,</span><span class="token number">88741</span><span class="token punctuation">,</span><span class="token number">86643</span><span class="token punctuation">,</span><span class="token number">98422</span><span class="token punctuation">,</span><span class="token number">47389</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75189</span><span class="token punctuation">,</span><span class="token number">13091</span><span class="token punctuation">,</span><span class="token number">95993</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15501</span><span class="token punctuation">,</span><span class="token number">94260</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25584</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1483</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67261</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70753</span><span class="token punctuation">,</span><span class="token number">25160</span><span class="token punctuation">,</span><span class="token number">89614</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90620</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48542</span><span class="token punctuation">,</span><span class="token number">83889</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12388</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9642</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">37043</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67663</span><span class="token punctuation">,</span><span class="token number">28794</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8801</span><span class="token punctuation">,</span><span class="token number">13621</span><span class="token punctuation">,</span><span class="token number">12241</span><span class="token punctuation">,</span><span class="token number">55379</span><span class="token punctuation">,</span><span class="token number">84290</span><span class="token punctuation">,</span><span class="token number">21692</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">95906</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85617</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">17341</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63767</span><span class="token punctuation">,</span><span class="token number">80183</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4942</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51478</span><span class="token punctuation">,</span><span class="token number">30997</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13658</span><span class="token punctuation">,</span><span class="token number">8838</span><span class="token punctuation">,</span><span class="token number">17452</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82869</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39897</span><span class="token punctuation">,</span><span class="token number">68449</span><span class="token punctuation">,</span><span class="token number">31964</span><span class="token punctuation">,</span><span class="token number">98158</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49489</span><span class="token punctuation">,</span><span class="token number">62283</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62209</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92792</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59342</span><span class="token punctuation">,</span><span class="token number">55146</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38533</span><span class="token punctuation">,</span><span class="token number">20496</span><span class="token punctuation">,</span><span class="token number">62667</span><span class="token punctuation">,</span><span class="token number">62593</span><span class="token punctuation">,</span><span class="token number">36095</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12470</span><span class="token punctuation">,</span><span class="token number">5453</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50451</span><span class="token punctuation">,</span><span class="token number">74716</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">17902</span><span class="token punctuation">,</span><span class="token number">3302</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16760</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71642</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34819</span><span class="token punctuation">,</span><span class="token number">96459</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72860</span><span class="token punctuation">,</span><span class="token number">21638</span><span class="token punctuation">,</span><span class="token number">47342</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69897</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40180</span><span class="token punctuation">,</span><span class="token number">44466</span><span class="token punctuation">,</span><span class="token number">76496</span><span class="token punctuation">,</span><span class="token number">84659</span><span class="token punctuation">,</span><span class="token number">13848</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91600</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90887</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63742</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2156</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84981</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99280</span><span class="token punctuation">,</span><span class="token number">94326</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33854</span><span class="token punctuation">,</span><span class="token number">92029</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50811</span><span class="token punctuation">,</span><span class="token number">98711</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36459</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75555</span><span class="token punctuation">,</span><span class="token number">79110</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88164</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97397</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84217</span><span class="token punctuation">,</span><span class="token number">97457</span><span class="token punctuation">,</span><span class="token number">64387</span><span class="token punctuation">,</span><span class="token number">30513</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53190</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83215</span><span class="token punctuation">,</span><span class="token number">252</span><span class="token punctuation">,</span><span class="token number">2344</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27177</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92945</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89010</span><span class="token punctuation">,</span><span class="token number">82662</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11670</span><span class="token punctuation">,</span><span class="token number">86069</span><span class="token punctuation">,</span><span class="token number">53417</span><span class="token punctuation">,</span><span class="token number">42702</span><span class="token punctuation">,</span><span class="token number">97082</span><span class="token punctuation">,</span><span class="token number">3695</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14530</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46334</span><span class="token punctuation">,</span><span class="token number">17910</span><span class="token punctuation">,</span><span class="token number">77999</span><span class="token punctuation">,</span><span class="token number">28009</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12374</span><span class="token punctuation">,</span><span class="token number">15498</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46941</span><span class="token punctuation">,</span><span class="token number">97088</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35030</span><span class="token punctuation">,</span><span class="token number">95040</span><span class="token punctuation">,</span><span class="token number">92095</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59469</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24761</span><span class="token punctuation">,</span><span class="token number">46491</span><span class="token punctuation">,</span><span class="token number">67357</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66658</span><span class="token punctuation">,</span><span class="token number">37446</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">65130</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50416</span><span class="token punctuation">,</span><span class="token number">99197</span><span class="token punctuation">,</span><span class="token number">30925</span><span class="token punctuation">,</span><span class="token number">27308</span><span class="token punctuation">,</span><span class="token number">54122</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44719</span><span class="token punctuation">,</span><span class="token number">12582</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99525</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38446</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69050</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22352</span><span class="token punctuation">,</span><span class="token number">94757</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56062</span><span class="token punctuation">,</span><span class="token number">33684</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40199</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46399</span><span class="token punctuation">,</span><span class="token number">96842</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50881</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22380</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">65021</span><span class="token punctuation">,</span><span class="token number">40582</span><span class="token punctuation">,</span><span class="token number">53623</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76034</span><span class="token punctuation">,</span><span class="token number">77018</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97074</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84838</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22953</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74205</span><span class="token punctuation">,</span><span class="token number">79715</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33920</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35794</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91369</span><span class="token punctuation">,</span><span class="token number">73421</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82492</span><span class="token punctuation">,</span><span class="token number">63680</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14915</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33295</span><span class="token punctuation">,</span><span class="token number">37145</span><span class="token punctuation">,</span><span class="token number">76852</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69442</span><span class="token punctuation">,</span><span class="token number">60125</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74166</span><span class="token punctuation">,</span><span class="token number">74308</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1900</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30195</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16267</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60781</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27760</span><span class="token punctuation">,</span><span class="token number">5852</span><span class="token punctuation">,</span><span class="token number">38917</span><span class="token punctuation">,</span><span class="token number">25742</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3765</span><span class="token punctuation">,</span><span class="token number">49097</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63541</span><span class="token punctuation">,</span><span class="token number">98612</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92865</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30248</span><span class="token punctuation">,</span><span class="token number">9612</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8798</span><span class="token punctuation">,</span><span class="token number">53262</span><span class="token punctuation">,</span><span class="token number">95781</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42278</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36529</span><span class="token punctuation">,</span><span class="token number">7252</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27394</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5021</span><span class="token punctuation">,</span><span class="token number">59178</span><span class="token punctuation">,</span><span class="token number">80934</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48480</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75131</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54439</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19145</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48140</span><span class="token punctuation">,</span><span class="token number">98457</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6601</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51616</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89730</span><span class="token punctuation">,</span><span class="token number">78028</span><span class="token punctuation">,</span><span class="token number">32083</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48904</span><span class="token punctuation">,</span><span class="token number">16822</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81153</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8832</span><span class="token punctuation">,</span><span class="token number">48720</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80728</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45133</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86647</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4259</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40453</span><span class="token punctuation">,</span><span class="token number">2590</span><span class="token punctuation">,</span><span class="token number">28613</span><span class="token punctuation">,</span><span class="token number">50523</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4105</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27790</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74579</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">17223</span><span class="token punctuation">,</span><span class="token number">63721</span><span class="token punctuation">,</span><span class="token number">33489</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47921</span><span class="token punctuation">,</span><span class="token number">97628</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97691</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14782</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">65644</span><span class="token punctuation">,</span><span class="token number">18008</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93651</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71266</span><span class="token punctuation">,</span><span class="token number">80990</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76732</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47104</span><span class="token punctuation">,</span><span class="token number">35368</span><span class="token punctuation">,</span><span class="token number">28632</span><span class="token punctuation">,</span><span class="token number">59818</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86269</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89753</span><span class="token punctuation">,</span><span class="token number">34557</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92230</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5933</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3487</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73557</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13174</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43981</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43630</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">55171</span><span class="token punctuation">,</span><span class="token number">30254</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83710</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99583</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13500</span><span class="token punctuation">,</span><span class="token number">71787</span><span class="token punctuation">,</span><span class="token number">5017</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25117</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78586</span><span class="token punctuation">,</span><span class="token number">86941</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3251</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23867</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36315</span><span class="token punctuation">,</span><span class="token number">75973</span><span class="token punctuation">,</span><span class="token number">86272</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45575</span><span class="token punctuation">,</span><span class="token number">77462</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98836</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10859</span><span class="token punctuation">,</span><span class="token number">70168</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32971</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38739</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12761</span><span class="token punctuation">,</span><span class="token number">93410</span><span class="token punctuation">,</span><span class="token number">14014</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30706</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77356</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85965</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62316</span><span class="token punctuation">,</span><span class="token number">63918</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59914</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64088</span><span class="token punctuation">,</span><span class="token number">1591</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10957</span><span class="token punctuation">,</span><span class="token number">38004</span><span class="token punctuation">,</span><span class="token number">15129</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83602</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51791</span><span class="token punctuation">,</span><span class="token number">34381</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89382</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26056</span><span class="token punctuation">,</span><span class="token number">8942</span><span class="token punctuation">,</span><span class="token number">5465</span><span class="token punctuation">,</span><span class="token number">71458</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73805</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">87445</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19921</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80784</span><span class="token punctuation">,</span><span class="token number">69150</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34168</span><span class="token punctuation">,</span><span class="token number">28301</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68955</span><span class="token punctuation">,</span><span class="token number">18041</span><span class="token punctuation">,</span><span class="token number">6059</span><span class="token punctuation">,</span><span class="token number">82342</span><span class="token punctuation">,</span><span class="token number">9947</span><span class="token punctuation">,</span><span class="token number">39795</span><span class="token punctuation">,</span><span class="token number">44047</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57313</span><span class="token punctuation">,</span><span class="token number">48569</span><span class="token punctuation">,</span><span class="token number">81936</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2863</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80932</span><span class="token punctuation">,</span><span class="token number">32976</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86454</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84207</span><span class="token punctuation">,</span><span class="token number">33033</span><span class="token punctuation">,</span><span class="token number">32867</span><span class="token punctuation">,</span><span class="token number">9104</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16580</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25727</span><span class="token punctuation">,</span><span class="token number">80157</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70169</span><span class="token punctuation">,</span><span class="token number">53741</span><span class="token punctuation">,</span><span class="token number">86522</span><span class="token punctuation">,</span><span class="token number">84651</span><span class="token punctuation">,</span><span class="token number">68480</span><span class="token punctuation">,</span><span class="token number">84018</span><span class="token punctuation">,</span><span class="token number">61932</span><span class="token punctuation">,</span><span class="token number">7332</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61322</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69663</span><span class="token punctuation">,</span><span class="token number">76370</span><span class="token punctuation">,</span><span class="token number">41206</span><span class="token punctuation">,</span><span class="token number">12326</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34689</span><span class="token punctuation">,</span><span class="token number">17016</span><span class="token punctuation">,</span><span class="token number">82975</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23386</span><span class="token punctuation">,</span><span class="token number">39417</span><span class="token punctuation">,</span><span class="token number">72793</span><span class="token punctuation">,</span><span class="token number">44774</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96259</span><span class="token punctuation">,</span><span class="token number">3213</span><span class="token punctuation">,</span><span class="token number">79952</span><span class="token punctuation">,</span><span class="token number">29265</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61492</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49337</span><span class="token punctuation">,</span><span class="token number">14162</span><span class="token punctuation">,</span><span class="token number">65886</span><span class="token punctuation">,</span><span class="token number">3342</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41622</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62659</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90402</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24751</span><span class="token punctuation">,</span><span class="token number">88511</span><span class="token punctuation">,</span><span class="token number">54739</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21383</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40161</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96610</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24944</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">602</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76842</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21856</span><span class="token punctuation">,</span><span class="token number">69964</span><span class="token punctuation">,</span><span class="token number">43994</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15121</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85530</span><span class="token punctuation">,</span><span class="token number">12718</span><span class="token punctuation">,</span><span class="token number">13170</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13547</span><span class="token punctuation">,</span><span class="token number">69222</span><span class="token punctuation">,</span><span class="token number">62417</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75305</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81446</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38786</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52075</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23110</span><span class="token punctuation">,</span><span class="token number">97681</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82800</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53178</span><span class="token punctuation">,</span><span class="token number">11474</span><span class="token punctuation">,</span><span class="token number">35857</span><span class="token punctuation">,</span><span class="token number">94197</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58148</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23689</span><span class="token punctuation">,</span><span class="token number">32506</span><span class="token punctuation">,</span><span class="token number">92154</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64536</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73930</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77138</span><span class="token punctuation">,</span><span class="token number">97446</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83459</span><span class="token punctuation">,</span><span class="token number">70963</span><span class="token punctuation">,</span><span class="token number">22452</span><span class="token punctuation">,</span><span class="token number">68472</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3728</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25059</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49405</span><span class="token punctuation">,</span><span class="token number">95129</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6167</span><span class="token punctuation">,</span><span class="token number">12808</span><span class="token punctuation">,</span><span class="token number">99918</span><span class="token punctuation">,</span><span class="token number">30113</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12641</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26665</span><span class="token punctuation">,</span><span class="token number">86362</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33505</span><span class="token punctuation">,</span><span class="token number">50661</span><span class="token punctuation">,</span><span class="token number">26714</span><span class="token punctuation">,</span><span class="token number">33701</span><span class="token punctuation">,</span><span class="token number">89012</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91540</span><span class="token punctuation">,</span><span class="token number">40517</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12716</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57185</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">87230</span><span class="token punctuation">,</span><span class="token number">29914</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59560</span><span class="token punctuation">,</span><span class="token number">13200</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72723</span><span class="token punctuation">,</span><span class="token number">58272</span><span class="token punctuation">,</span><span class="token number">23913</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45586</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96593</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26265</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2141</span><span class="token punctuation">,</span><span class="token number">31087</span><span class="token punctuation">,</span><span class="token number">81399</span><span class="token punctuation">,</span><span class="token number">92511</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34049</span><span class="token punctuation">,</span><span class="token number">20577</span><span class="token punctuation">,</span><span class="token number">2803</span><span class="token punctuation">,</span><span class="token number">26003</span><span class="token punctuation">,</span><span class="token number">8940</span><span class="token punctuation">,</span><span class="token number">42117</span><span class="token punctuation">,</span><span class="token number">40887</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82715</span><span class="token punctuation">,</span><span class="token number">38269</span><span class="token punctuation">,</span><span class="token number">40969</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50022</span><span class="token punctuation">,</span><span class="token number">72088</span><span class="token punctuation">,</span><span class="token number">21291</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67280</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16523</span><span class="token punctuation">,</span><span class="token number">90535</span><span class="token punctuation">,</span><span class="token number">18669</span><span class="token punctuation">,</span><span class="token number">94342</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39568</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88080</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99486</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20716</span><span class="token punctuation">,</span><span class="token number">23108</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28037</span><span class="token punctuation">,</span><span class="token number">63342</span><span class="token punctuation">,</span><span class="token number">36863</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29420</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44016</span><span class="token punctuation">,</span><span class="token number">75135</span><span class="token punctuation">,</span><span class="token number">73415</span><span class="token punctuation">,</span><span class="token number">16059</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4899</span><span class="token punctuation">,</span><span class="token number">86893</span><span class="token punctuation">,</span><span class="token number">43136</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7041</span><span class="token punctuation">,</span><span class="token number">33483</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67612</span><span class="token punctuation">,</span><span class="token number">25327</span><span class="token punctuation">,</span><span class="token number">40830</span><span class="token punctuation">,</span><span class="token number">6184</span><span class="token punctuation">,</span><span class="token number">61805</span><span class="token punctuation">,</span><span class="token number">4247</span><span class="token punctuation">,</span><span class="token number">81119</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22854</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26104</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63466</span><span class="token punctuation">,</span><span class="token number">63093</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63685</span><span class="token punctuation">,</span><span class="token number">60369</span><span class="token punctuation">,</span><span class="token number">51023</span><span class="token punctuation">,</span><span class="token number">51644</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16350</span><span class="token punctuation">,</span><span class="token number">74438</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83514</span><span class="token punctuation">,</span><span class="token number">99083</span><span class="token punctuation">,</span><span class="token number">10079</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58451</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79621</span><span class="token punctuation">,</span><span class="token number">48471</span><span class="token punctuation">,</span><span class="token number">67131</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86940</span><span class="token punctuation">,</span><span class="token number">99093</span><span class="token punctuation">,</span><span class="token number">11855</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22272</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67683</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44371</span><span class="token punctuation">,</span><span class="token number">9541</span><span class="token punctuation">,</span><span class="token number">18123</span><span class="token punctuation">,</span><span class="token number">37766</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70922</span><span class="token punctuation">,</span><span class="token number">80385</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57513</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76021</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47890</span><span class="token punctuation">,</span><span class="token number">36154</span><span class="token punctuation">,</span><span class="token number">72935</span><span class="token punctuation">,</span><span class="token number">84387</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92681</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88303</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7810</span><span class="token punctuation">,</span><span class="token number">59902</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64704</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28396</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66403</span><span class="token punctuation">,</span><span class="token number">8860</span><span class="token punctuation">,</span><span class="token number">13343</span><span class="token punctuation">,</span><span class="token number">33882</span><span class="token punctuation">,</span><span class="token number">85680</span><span class="token punctuation">,</span><span class="token number">7228</span><span class="token punctuation">,</span><span class="token number">28160</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14003</span><span class="token punctuation">,</span><span class="token number">54369</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58893</span><span class="token punctuation">,</span><span class="token number">92606</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63492</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10101</span><span class="token punctuation">,</span><span class="token number">64714</span><span class="token punctuation">,</span><span class="token number">58486</span><span class="token punctuation">,</span><span class="token number">29948</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44679</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22763</span><span class="token punctuation">,</span><span class="token number">10151</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56695</span><span class="token punctuation">,</span><span class="token number">4031</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18242</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36232</span><span class="token punctuation">,</span><span class="token number">86168</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14263</span><span class="token punctuation">,</span><span class="token number">9883</span><span class="token punctuation">,</span><span class="token number">47124</span><span class="token punctuation">,</span><span class="token number">47271</span><span class="token punctuation">,</span><span class="token number">92761</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24958</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73263</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79661</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69147</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18874</span><span class="token punctuation">,</span><span class="token number">29546</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92588</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85771</span><span class="token punctuation">,</span><span class="token number">26451</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86650</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43306</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59094</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47492</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34821</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91763</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47670</span><span class="token punctuation">,</span><span class="token number">33537</span><span class="token punctuation">,</span><span class="token number">22843</span><span class="token punctuation">,</span><span class="token number">67417</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">759</span><span class="token punctuation">,</span><span class="token number">92159</span><span class="token punctuation">,</span><span class="token number">63075</span><span class="token punctuation">,</span><span class="token number">94065</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26988</span><span class="token punctuation">,</span><span class="token number">55276</span><span class="token punctuation">,</span><span class="token number">65903</span><span class="token punctuation">,</span><span class="token number">30414</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67129</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99508</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83092</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91493</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50426</span><span class="token punctuation">,</span><span class="token number">14349</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83216</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76090</span><span class="token punctuation">,</span><span class="token number">32742</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5306</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93310</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60750</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60620</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45484</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21108</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58341</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28048</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52803</span><span class="token punctuation">,</span><span class="token number">69735</span><span class="token punctuation">,</span><span class="token number">78906</span><span class="token punctuation">,</span><span class="token number">81649</span><span class="token punctuation">,</span><span class="token number">32565</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86804</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83202</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">65688</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1760</span><span class="token punctuation">,</span><span class="token number">89707</span><span class="token punctuation">,</span><span class="token number">93322</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72750</span><span class="token punctuation">,</span><span class="token number">84134</span><span class="token punctuation">,</span><span class="token number">71900</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">37720</span><span class="token punctuation">,</span><span class="token number">19450</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78018</span><span class="token punctuation">,</span><span class="token number">22001</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23604</span><span class="token punctuation">,</span><span class="token number">26276</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21498</span><span class="token punctuation">,</span><span class="token number">65892</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72117</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89834</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23867</span><span class="token punctuation">,</span><span class="token number">55817</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77963</span><span class="token punctuation">,</span><span class="token number">42518</span><span class="token punctuation">,</span><span class="token number">93123</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83916</span><span class="token punctuation">,</span><span class="token number">63260</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2243</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97108</span><span class="token punctuation">,</span><span class="token number">85442</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36775</span><span class="token punctuation">,</span><span class="token number">17984</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58810</span><span class="token punctuation">,</span><span class="token number">99664</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19082</span><span class="token punctuation">,</span><span class="token number">93075</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69329</span><span class="token punctuation">,</span><span class="token number">87061</span><span class="token punctuation">,</span><span class="token number">79713</span><span class="token punctuation">,</span><span class="token number">16296</span><span class="token punctuation">,</span><span class="token number">70996</span><span class="token punctuation">,</span><span class="token number">13483</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74582</span><span class="token punctuation">,</span><span class="token number">49900</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27669</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40562</span><span class="token punctuation">,</span><span class="token number">1209</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20572</span><span class="token punctuation">,</span><span class="token number">34660</span><span class="token punctuation">,</span><span class="token number">83193</span><span class="token punctuation">,</span><span class="token number">75579</span><span class="token punctuation">,</span><span class="token number">7344</span><span class="token punctuation">,</span><span class="token number">64925</span><span class="token punctuation">,</span><span class="token number">88361</span><span class="token punctuation">,</span><span class="token number">60969</span><span class="token punctuation">,</span><span class="token number">3114</span><span class="token punctuation">,</span><span class="token number">44611</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27445</span><span class="token punctuation">,</span><span class="token number">53049</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16085</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92851</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53306</span><span class="token punctuation">,</span><span class="token number">13859</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33532</span><span class="token punctuation">,</span><span class="token number">86622</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75666</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18159</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98256</span><span class="token punctuation">,</span><span class="token number">51875</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42251</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27977</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18080</span><span class="token punctuation">,</span><span class="token number">23772</span><span class="token punctuation">,</span><span class="token number">38160</span><span class="token punctuation">,</span><span class="token number">41779</span><span class="token punctuation">,</span><span class="token number">9147</span><span class="token punctuation">,</span><span class="token number">94175</span><span class="token punctuation">,</span><span class="token number">99905</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85755</span><span class="token punctuation">,</span><span class="token number">62535</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88412</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52038</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68171</span><span class="token punctuation">,</span><span class="token number">93255</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44684</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11242</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">31796</span><span class="token punctuation">,</span><span class="token number">62346</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54931</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">55790</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70032</span><span class="token punctuation">,</span><span class="token number">46221</span><span class="token punctuation">,</span><span class="token number">56541</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91947</span><span class="token punctuation">,</span><span class="token number">90592</span><span class="token punctuation">,</span><span class="token number">93503</span><span class="token punctuation">,</span><span class="token number">4071</span><span class="token punctuation">,</span><span class="token number">20646</span><span class="token punctuation">,</span><span class="token number">4856</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63598</span><span class="token punctuation">,</span><span class="token number">15396</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50708</span><span class="token punctuation">,</span><span class="token number">32138</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85164</span><span class="token punctuation">,</span><span class="token number">38528</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89959</span><span class="token punctuation">,</span><span class="token number">53852</span><span class="token punctuation">,</span><span class="token number">57915</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42421</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88916</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75072</span><span class="token punctuation">,</span><span class="token number">67030</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29066</span><span class="token punctuation">,</span><span class="token number">49542</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71591</span><span class="token punctuation">,</span><span class="token number">61708</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53985</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43051</span><span class="token punctuation">,</span><span class="token number">28483</span><span class="token punctuation">,</span><span class="token number">46991</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83216</span><span class="token punctuation">,</span><span class="token number">80991</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46254</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48716</span><span class="token punctuation">,</span><span class="token number">39356</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8270</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47763</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34410</span><span class="token punctuation">,</span><span class="token number">874</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1186</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7049</span><span class="token punctuation">,</span><span class="token number">28846</span><span class="token punctuation">,</span><span class="token number">11276</span><span class="token punctuation">,</span><span class="token number">21960</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13304</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11433</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4913</span><span class="token punctuation">,</span><span class="token number">55754</span><span class="token punctuation">,</span><span class="token number">79616</span><span class="token punctuation">,</span><span class="token number">70423</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27523</span><span class="token punctuation">,</span><span class="token number">64803</span><span class="token punctuation">,</span><span class="token number">49277</span><span class="token punctuation">,</span><span class="token number">14906</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97401</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92390</span><span class="token punctuation">,</span><span class="token number">91075</span><span class="token punctuation">,</span><span class="token number">70736</span><span class="token punctuation">,</span><span class="token number">21971</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3303</span><span class="token punctuation">,</span><span class="token number">55333</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93996</span><span class="token punctuation">,</span><span class="token number">76538</span><span class="token punctuation">,</span><span class="token number">54603</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75899</span><span class="token punctuation">,</span><span class="token number">98801</span><span class="token punctuation">,</span><span class="token number">46887</span><span class="token punctuation">,</span><span class="token number">35041</span><span class="token punctuation">,</span><span class="token number">48302</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52318</span><span class="token punctuation">,</span><span class="token number">55439</span><span class="token punctuation">,</span><span class="token number">24574</span><span class="token punctuation">,</span><span class="token number">14079</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24889</span><span class="token punctuation">,</span><span class="token number">83440</span><span class="token punctuation">,</span><span class="token number">14961</span><span class="token punctuation">,</span><span class="token number">34312</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89260</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22293</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81271</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2586</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71059</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10640</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93095</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5453</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70041</span><span class="token punctuation">,</span><span class="token number">66543</span><span class="token punctuation">,</span><span class="token number">74012</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11662</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52477</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">37597</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70919</span><span class="token punctuation">,</span><span class="token number">92971</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">17452</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67306</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80418</span><span class="token punctuation">,</span><span class="token number">7225</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89296</span><span class="token punctuation">,</span><span class="token number">24296</span><span class="token punctuation">,</span><span class="token number">86547</span><span class="token punctuation">,</span><span class="token number">37154</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10696</span><span class="token punctuation">,</span><span class="token number">74436</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63959</span><span class="token punctuation">,</span><span class="token number">58860</span><span class="token punctuation">,</span><span class="token number">33590</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88925</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97814</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83664</span><span class="token punctuation">,</span><span class="token number">85484</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8385</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50879</span><span class="token punctuation">,</span><span class="token number">57729</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74728</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">87852</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15524</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91120</span><span class="token punctuation">,</span><span class="token number">22062</span><span class="token punctuation">,</span><span class="token number">28134</span><span class="token punctuation">,</span><span class="token number">80917</span><span class="token punctuation">,</span><span class="token number">32026</span><span class="token punctuation">,</span><span class="token number">49707</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54252</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44319</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35139</span><span class="token punctuation">,</span><span class="token number">13777</span><span class="token punctuation">,</span><span class="token number">44660</span><span class="token punctuation">,</span><span class="token number">85274</span><span class="token punctuation">,</span><span class="token number">25043</span><span class="token punctuation">,</span><span class="token number">58781</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89035</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76274</span><span class="token punctuation">,</span><span class="token number">6364</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63625</span><span class="token punctuation">,</span><span class="token number">72855</span><span class="token punctuation">,</span><span class="token number">43242</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35033</span><span class="token punctuation">,</span><span class="token number">12820</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27460</span><span class="token punctuation">,</span><span class="token number">77372</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47578</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61162</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70758</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1343</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4159</span><span class="token punctuation">,</span><span class="token number">64935</span><span class="token punctuation">,</span><span class="token number">56024</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2151</span><span class="token punctuation">,</span><span class="token number">43770</span><span class="token punctuation">,</span><span class="token number">19758</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30186</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86040</span><span class="token punctuation">,</span><span class="token number">24666</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62332</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67542</span><span class="token punctuation">,</span><span class="token number">73180</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25821</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27826</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45504</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36858</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12041</span><span class="token punctuation">,</span><span class="token number">20017</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24066</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56625</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52097</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47239</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90694</span><span class="token punctuation">,</span><span class="token number">8959</span><span class="token punctuation">,</span><span class="token number">7712</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14258</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5860</span><span class="token punctuation">,</span><span class="token number">55349</span><span class="token punctuation">,</span><span class="token number">61808</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4423</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93703</span><span class="token punctuation">,</span><span class="token number">64681</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98641</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25222</span><span class="token punctuation">,</span><span class="token number">46999</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83831</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54714</span><span class="token punctuation">,</span><span class="token number">19997</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68477</span><span class="token punctuation">,</span><span class="token number">66073</span><span class="token punctuation">,</span><span class="token number">51801</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66491</span><span class="token punctuation">,</span><span class="token number">52061</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52866</span><span class="token punctuation">,</span><span class="token number">79907</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39736</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68331</span><span class="token punctuation">,</span><span class="token number">68937</span><span class="token punctuation">,</span><span class="token number">91464</span><span class="token punctuation">,</span><span class="token number">98892</span><span class="token punctuation">,</span><span class="token number">910</span><span class="token punctuation">,</span><span class="token number">93501</span><span class="token punctuation">,</span><span class="token number">31295</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85873</span><span class="token punctuation">,</span><span class="token number">27036</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57340</span><span class="token punctuation">,</span><span class="token number">50412</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2445</span><span class="token punctuation">,</span><span class="token number">29471</span><span class="token punctuation">,</span><span class="token number">71317</span><span class="token punctuation">,</span><span class="token number">82093</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94823</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54458</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97410</span><span class="token punctuation">,</span><span class="token number">39560</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7628</span><span class="token punctuation">,</span><span class="token number">66452</span><span class="token punctuation">,</span><span class="token number">39701</span><span class="token punctuation">,</span><span class="token number">54029</span><span class="token punctuation">,</span><span class="token number">37906</span><span class="token punctuation">,</span><span class="token number">46773</span><span class="token punctuation">,</span><span class="token number">58296</span><span class="token punctuation">,</span><span class="token number">60370</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61090</span><span class="token punctuation">,</span><span class="token number">85501</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86874</span><span class="token punctuation">,</span><span class="token number">71443</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72702</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72047</span><span class="token punctuation">,</span><span class="token number">14848</span><span class="token punctuation">,</span><span class="token number">34102</span><span class="token punctuation">,</span><span class="token number">77975</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66294</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36576</span><span class="token punctuation">,</span><span class="token number">31349</span><span class="token punctuation">,</span><span class="token number">52493</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70833</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80287</span><span class="token punctuation">,</span><span class="token number">94435</span><span class="token punctuation">,</span><span class="token number">39745</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98291</span><span class="token punctuation">,</span><span class="token number">84524</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18942</span><span class="token punctuation">,</span><span class="token number">10236</span><span class="token punctuation">,</span><span class="token number">93448</span><span class="token punctuation">,</span><span class="token number">50846</span><span class="token punctuation">,</span><span class="token number">94023</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6939</span><span class="token punctuation">,</span><span class="token number">47999</span><span class="token punctuation">,</span><span class="token number">14740</span><span class="token punctuation">,</span><span class="token number">30165</span><span class="token punctuation">,</span><span class="token number">81048</span><span class="token punctuation">,</span><span class="token number">84935</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19177</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13594</span><span class="token punctuation">,</span><span class="token number">32289</span><span class="token punctuation">,</span><span class="token number">62628</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90612</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">542</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66627</span><span class="token punctuation">,</span><span class="token number">64255</span><span class="token punctuation">,</span><span class="token number">71199</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83841</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82943</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73885</span><span class="token punctuation">,</span><span class="token number">8623</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67214</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9474</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35249</span><span class="token punctuation">,</span><span class="token number">62254</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14087</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90969</span><span class="token punctuation">,</span><span class="token number">21515</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83303</span><span class="token punctuation">,</span><span class="token number">94377</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91619</span><span class="token punctuation">,</span><span class="token number">19956</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98810</span><span class="token punctuation">,</span><span class="token number">96727</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91939</span><span class="token punctuation">,</span><span class="token number">29119</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85473</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82153</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69008</span><span class="token punctuation">,</span><span class="token number">44850</span><span class="token punctuation">,</span><span class="token number">74299</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76459</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86464</span><span class="token punctuation">,</span><span class="token number">8315</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49912</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28665</span><span class="token punctuation">,</span><span class="token number">59052</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69708</span><span class="token punctuation">,</span><span class="token number">76024</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92738</span><span class="token punctuation">,</span><span class="token number">50098</span><span class="token punctuation">,</span><span class="token number">18683</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91438</span><span class="token punctuation">,</span><span class="token number">18096</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19335</span><span class="token punctuation">,</span><span class="token number">35659</span><span class="token punctuation">,</span><span class="token number">91826</span><span class="token punctuation">,</span><span class="token number">15779</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73070</span><span class="token punctuation">,</span><span class="token number">67873</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12458</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71440</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46721</span><span class="token punctuation">,</span><span class="token number">54856</span><span class="token punctuation">,</span><span class="token number">97212</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81875</span><span class="token punctuation">,</span><span class="token number">35805</span><span class="token punctuation">,</span><span class="token number">36952</span><span class="token punctuation">,</span><span class="token number">68498</span><span class="token punctuation">,</span><span class="token number">81627</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34231</span><span class="token punctuation">,</span><span class="token number">81712</span><span class="token punctuation">,</span><span class="token number">27100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9741</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82612</span><span class="token punctuation">,</span><span class="token number">18766</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36392</span><span class="token punctuation">,</span><span class="token number">2759</span><span class="token punctuation">,</span><span class="token number">41728</span><span class="token punctuation">,</span><span class="token number">69743</span><span class="token punctuation">,</span><span class="token number">26825</span><span class="token punctuation">,</span><span class="token number">48355</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">17790</span><span class="token punctuation">,</span><span class="token number">17165</span><span class="token punctuation">,</span><span class="token number">56558</span><span class="token punctuation">,</span><span class="token number">3295</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24375</span><span class="token punctuation">,</span><span class="token number">55669</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16109</span><span class="token punctuation">,</span><span class="token number">24079</span><span class="token punctuation">,</span><span class="token number">73414</span><span class="token punctuation">,</span><span class="token number">48990</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11931</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78214</span><span class="token punctuation">,</span><span class="token number">90745</span><span class="token punctuation">,</span><span class="token number">19878</span><span class="token punctuation">,</span><span class="token number">35673</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15317</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89086</span><span class="token punctuation">,</span><span class="token number">94675</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92513</span><span class="token punctuation">,</span><span class="token number">88410</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93248</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19475</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74041</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19165</span><span class="token punctuation">,</span><span class="token number">32329</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26266</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46828</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18747</span><span class="token punctuation">,</span><span class="token number">45328</span><span class="token punctuation">,</span><span class="token number">8990</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78219</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25874</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74801</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44956</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54577</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29756</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99822</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35731</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18348</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68915</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83518</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53451</span><span class="token punctuation">,</span><span class="token number">95471</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2954</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13706</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8763</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21642</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">37210</span><span class="token punctuation">,</span><span class="token number">16814</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60070</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42743</span><span class="token punctuation">,</span><span class="token number">27697</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36333</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42362</span><span class="token punctuation">,</span><span class="token number">11576</span><span class="token punctuation">,</span><span class="token number">85742</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82536</span><span class="token punctuation">,</span><span class="token number">68767</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56103</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63012</span><span class="token punctuation">,</span><span class="token number">71396</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78464</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68101</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15917</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11113</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3596</span><span class="token punctuation">,</span><span class="token number">77626</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60191</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30585</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73584</span><span class="token punctuation">,</span><span class="token number">6214</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84303</span><span class="token punctuation">,</span><span class="token number">18403</span><span class="token punctuation">,</span><span class="token number">23618</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15619</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89755</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59515</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59103</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74308</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63725</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29364</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52376</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96130</span><span class="token punctuation">,</span><span class="token number">70894</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12609</span><span class="token punctuation">,</span><span class="token number">50845</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2314</span><span class="token punctuation">,</span><span class="token number">42264</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70825</span><span class="token punctuation">,</span><span class="token number">64481</span><span class="token punctuation">,</span><span class="token number">55752</span><span class="token punctuation">,</span><span class="token number">4460</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68603</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88701</span><span class="token punctuation">,</span><span class="token number">4713</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50441</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51333</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77907</span><span class="token punctuation">,</span><span class="token number">97412</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66616</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49430</span><span class="token punctuation">,</span><span class="token number">60489</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85262</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97621</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18980</span><span class="token punctuation">,</span><span class="token number">44727</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69321</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57730</span><span class="token punctuation">,</span><span class="token number">66287</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92566</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64427</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14270</span><span class="token punctuation">,</span><span class="token number">11515</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92612</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">87645</span><span class="token punctuation">,</span><span class="token number">61557</span><span class="token punctuation">,</span><span class="token number">24197</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81923</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39831</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10301</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23640</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76219</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68025</span><span class="token punctuation">,</span><span class="token number">92761</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76493</span><span class="token punctuation">,</span><span class="token number">68554</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77734</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">95620</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11753</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51700</span><span class="token punctuation">,</span><span class="token number">98234</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68544</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61838</span><span class="token punctuation">,</span><span class="token number">29467</span><span class="token punctuation">,</span><span class="token number">46603</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18221</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35441</span><span class="token punctuation">,</span><span class="token number">74537</span><span class="token punctuation">,</span><span class="token number">40327</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58293</span><span class="token punctuation">,</span><span class="token number">75755</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57301</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7532</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94163</span><span class="token punctuation">,</span><span class="token number">18179</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14388</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22258</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46417</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48285</span><span class="token punctuation">,</span><span class="token number">18242</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77551</span><span class="token punctuation">,</span><span class="token number">82620</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20060</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79568</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77259</span><span class="token punctuation">,</span><span class="token number">82052</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98897</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75464</span><span class="token punctuation">,</span><span class="token number">48773</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79040</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11293</span><span class="token punctuation">,</span><span class="token number">45941</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67876</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69204</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46477</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46107</span><span class="token punctuation">,</span><span class="token number">792</span><span class="token punctuation">,</span><span class="token number">60546</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34573</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12879</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94562</span><span class="token punctuation">,</span><span class="token number">20356</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48004</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62429</span><span class="token punctuation">,</span><span class="token number">96242</span><span class="token punctuation">,</span><span class="token number">40594</span><span class="token punctuation">,</span><span class="token number">2099</span><span class="token punctuation">,</span><span class="token number">99494</span><span class="token punctuation">,</span><span class="token number">25724</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39394</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2388</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18563</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56510</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83570</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29214</span><span class="token punctuation">,</span><span class="token number">3015</span><span class="token punctuation">,</span><span class="token number">74454</span><span class="token punctuation">,</span><span class="token number">74197</span><span class="token punctuation">,</span><span class="token number">76678</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46597</span><span class="token punctuation">,</span><span class="token number">60630</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76093</span><span class="token punctuation">,</span><span class="token number">37578</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82045</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24077</span><span class="token punctuation">,</span><span class="token number">62082</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">87787</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74936</span><span class="token punctuation">,</span><span class="token number">58687</span><span class="token punctuation">,</span><span class="token number">12200</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98952</span><span class="token punctuation">,</span><span class="token number">70155</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77370</span><span class="token punctuation">,</span><span class="token number">21710</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84625</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60556</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84128</span><span class="token punctuation">,</span><span class="token number">925</span><span class="token punctuation">,</span><span class="token number">65474</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15741</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94619</span><span class="token punctuation">,</span><span class="token number">88377</span><span class="token punctuation">,</span><span class="token number">89334</span><span class="token punctuation">,</span><span class="token number">44749</span><span class="token punctuation">,</span><span class="token number">22002</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45750</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93081</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14600</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83447</span><span class="token punctuation">,</span><span class="token number">46691</span><span class="token punctuation">,</span><span class="token number">85040</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66447</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80085</span><span class="token punctuation">,</span><span class="token number">56308</span><span class="token punctuation">,</span><span class="token number">44310</span><span class="token punctuation">,</span><span class="token number">24979</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29694</span><span class="token punctuation">,</span><span class="token number">57991</span><span class="token punctuation">,</span><span class="token number">4675</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71273</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44508</span><span class="token punctuation">,</span><span class="token number">13615</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54710</span><span class="token punctuation">,</span><span class="token number">23552</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78253</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34637</span><span class="token punctuation">,</span><span class="token number">50497</span><span class="token punctuation">,</span><span class="token number">68706</span><span class="token punctuation">,</span><span class="token number">81543</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88408</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21405</span><span class="token punctuation">,</span><span class="token number">6001</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33834</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21570</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46692</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25344</span><span class="token punctuation">,</span><span class="token number">20310</span><span class="token punctuation">,</span><span class="token number">71258</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97680</span><span class="token punctuation">,</span><span class="token number">11721</span><span class="token punctuation">,</span><span class="token number">59977</span><span class="token punctuation">,</span><span class="token number">59247</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48949</span><span class="token punctuation">,</span><span class="token number">98955</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50276</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80844</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27935</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76102</span><span class="token punctuation">,</span><span class="token number">55858</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33492</span><span class="token punctuation">,</span><span class="token number">40680</span><span class="token punctuation">,</span><span class="token number">66691</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33188</span><span class="token punctuation">,</span><span class="token number">8284</span><span class="token punctuation">,</span><span class="token number">64893</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7528</span><span class="token punctuation">,</span><span class="token number">6019</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85523</span><span class="token punctuation">,</span><span class="token number">8434</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64366</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56663</span><span class="token punctuation">,</span><span class="token number">26862</span><span class="token punctuation">,</span><span class="token number">30008</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7611</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12179</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70076</span><span class="token punctuation">,</span><span class="token number">21426</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11261</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36864</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61937</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59677</span><span class="token punctuation">,</span><span class="token number">929</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21052</span><span class="token punctuation">,</span><span class="token number">3848</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20888</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16065</span><span class="token punctuation">,</span><span class="token number">98995</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32293</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86121</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54564</span><span class="token punctuation">,</span><span class="token number">77831</span><span class="token punctuation">,</span><span class="token number">68602</span><span class="token punctuation">,</span><span class="token number">74977</span><span class="token punctuation">,</span><span class="token number">31658</span><span class="token punctuation">,</span><span class="token number">40699</span><span class="token punctuation">,</span><span class="token number">29755</span><span class="token punctuation">,</span><span class="token number">98424</span><span class="token punctuation">,</span><span class="token number">80358</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69337</span><span class="token punctuation">,</span><span class="token number">26339</span><span class="token punctuation">,</span><span class="token number">13213</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46016</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18331</span><span class="token punctuation">,</span><span class="token number">64713</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46883</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58451</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70024</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92393</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4088</span><span class="token punctuation">,</span><span class="token number">70628</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51185</span><span class="token punctuation">,</span><span class="token number">71164</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75791</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1636</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29102</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16929</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">87650</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84589</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24229</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42137</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15653</span><span class="token punctuation">,</span><span class="token number">94825</span><span class="token punctuation">,</span><span class="token number">13042</span><span class="token punctuation">,</span><span class="token number">88499</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90358</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7180</span><span class="token punctuation">,</span><span class="token number">29754</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">65727</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42659</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85560</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9037</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52459</span><span class="token punctuation">,</span><span class="token number">20997</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47425</span><span class="token punctuation">,</span><span class="token number">17318</span><span class="token punctuation">,</span><span class="token number">21122</span><span class="token punctuation">,</span><span class="token number">20472</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23037</span><span class="token punctuation">,</span><span class="token number">65216</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63625</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7877</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91907</span><span class="token punctuation">,</span><span class="token number">24100</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72516</span><span class="token punctuation">,</span><span class="token number">22903</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85247</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8938</span><span class="token punctuation">,</span><span class="token number">73878</span><span class="token punctuation">,</span><span class="token number">54953</span><span class="token punctuation">,</span><span class="token number">87480</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31466</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99524</span><span class="token punctuation">,</span><span class="token number">35369</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78376</span><span class="token punctuation">,</span><span class="token number">89984</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15982</span><span class="token punctuation">,</span><span class="token number">94045</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7269</span><span class="token punctuation">,</span><span class="token number">23319</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80456</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">37653</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76756</span><span class="token punctuation">,</span><span class="token number">2909</span><span class="token punctuation">,</span><span class="token number">81936</span><span class="token punctuation">,</span><span class="token number">54958</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12393</span><span class="token punctuation">,</span><span class="token number">60560</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84664</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82413</span><span class="token punctuation">,</span><span class="token number">66941</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26573</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97532</span><span class="token punctuation">,</span><span class="token number">64460</span><span class="token punctuation">,</span><span class="token number">18593</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85789</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38820</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92575</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43663</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89435</span><span class="token punctuation">,</span><span class="token number">83272</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50585</span><span class="token punctuation">,</span><span class="token number">13616</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71541</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53156</span><span class="token punctuation">,</span><span class="token number">727</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27644</span><span class="token punctuation">,</span><span class="token number">16538</span><span class="token punctuation">,</span><span class="token number">34049</span><span class="token punctuation">,</span><span class="token number">57745</span><span class="token punctuation">,</span><span class="token number">34348</span><span class="token punctuation">,</span><span class="token number">35009</span><span class="token punctuation">,</span><span class="token number">16634</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18791</span><span class="token punctuation">,</span><span class="token number">23271</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63844</span><span class="token punctuation">,</span><span class="token number">95817</span><span class="token punctuation">,</span><span class="token number">21781</span><span class="token punctuation">,</span><span class="token number">16590</span><span class="token punctuation">,</span><span class="token number">59669</span><span class="token punctuation">,</span><span class="token number">15966</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6864</span><span class="token punctuation">,</span><span class="token number">48050</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36143</span><span class="token punctuation">,</span><span class="token number">97427</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59390</span><span class="token punctuation">,</span><span class="token number">96931</span><span class="token punctuation">,</span><span class="token number">78939</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1958</span><span class="token punctuation">,</span><span class="token number">50777</span><span class="token punctuation">,</span><span class="token number">43338</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51149</span><span class="token punctuation">,</span><span class="token number">39235</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27054</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43492</span><span class="token punctuation">,</span><span class="token number">67457</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83616</span><span class="token punctuation">,</span><span class="token number">37179</span><span class="token punctuation">,</span><span class="token number">10390</span><span class="token punctuation">,</span><span class="token number">85818</span><span class="token punctuation">,</span><span class="token number">2391</span><span class="token punctuation">,</span><span class="token number">73635</span><span class="token punctuation">,</span><span class="token number">87579</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49127</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81264</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79023</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81590</span><span class="token punctuation">,</span><span class="token number">53554</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74972</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83940</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13726</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39095</span><span class="token punctuation">,</span><span class="token number">29174</span><span class="token punctuation">,</span><span class="token number">78072</span><span class="token punctuation">,</span><span class="token number">76104</span><span class="token punctuation">,</span><span class="token number">47778</span><span class="token punctuation">,</span><span class="token number">25797</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29515</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6493</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92793</span><span class="token punctuation">,</span><span class="token number">22481</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36197</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">65560</span><span class="token punctuation">,</span><span class="token number">42342</span><span class="token punctuation">,</span><span class="token number">15750</span><span class="token punctuation">,</span><span class="token number">97556</span><span class="token punctuation">,</span><span class="token number">99634</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56048</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35688</span><span class="token punctuation">,</span><span class="token number">13501</span><span class="token punctuation">,</span><span class="token number">63969</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74291</span><span class="token punctuation">,</span><span class="token number">50911</span><span class="token punctuation">,</span><span class="token number">39225</span><span class="token punctuation">,</span><span class="token number">93702</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3490</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59461</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30105</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46761</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80113</span><span class="token punctuation">,</span><span class="token number">92906</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68487</span><span class="token punctuation">,</span><span class="token number">50742</span><span class="token punctuation">,</span><span class="token number">36152</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90240</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83631</span><span class="token punctuation">,</span><span class="token number">24597</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50566</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15477</span><span class="token punctuation">,</span><span class="token number">18470</span><span class="token punctuation">,</span><span class="token number">77038</span><span class="token punctuation">,</span><span class="token number">40223</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80364</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98676</span><span class="token punctuation">,</span><span class="token number">70957</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63647</span><span class="token punctuation">,</span><span class="token number">99537</span><span class="token punctuation">,</span><span class="token number">13041</span><span class="token punctuation">,</span><span class="token number">31679</span><span class="token punctuation">,</span><span class="token number">86631</span><span class="token punctuation">,</span><span class="token number">37633</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16866</span><span class="token punctuation">,</span><span class="token number">13686</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71565</span><span class="token punctuation">,</span><span class="token number">21652</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46053</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80578</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61382</span><span class="token punctuation">,</span><span class="token number">68487</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6417</span><span class="token punctuation">,</span><span class="token number">4656</span><span class="token punctuation">,</span><span class="token number">20811</span><span class="token punctuation">,</span><span class="token number">67013</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30868</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11219</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">74944</span><span class="token punctuation">,</span><span class="token number">14627</span><span class="token punctuation">,</span><span class="token number">56965</span><span class="token punctuation">,</span><span class="token number">42275</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52480</span><span class="token punctuation">,</span><span class="token number">52162</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84883</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52579</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90331</span><span class="token punctuation">,</span><span class="token number">92792</span><span class="token punctuation">,</span><span class="token number">42184</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73422</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58440</span><span class="token punctuation">,</span><span class="token number">65308</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25069</span><span class="token punctuation">,</span><span class="token number">5475</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57996</span><span class="token punctuation">,</span><span class="token number">59557</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">17561</span><span class="token punctuation">,</span><span class="token number">2826</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56939</span><span class="token punctuation">,</span><span class="token number">14996</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94855</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53707</span><span class="token punctuation">,</span><span class="token number">99159</span><span class="token punctuation">,</span><span class="token number">43645</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67719</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1331</span><span class="token punctuation">,</span><span class="token number">21412</span><span class="token punctuation">,</span><span class="token number">41704</span><span class="token punctuation">,</span><span class="token number">31612</span><span class="token punctuation">,</span><span class="token number">32622</span><span class="token punctuation">,</span><span class="token number">1919</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69333</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69828</span><span class="token punctuation">,</span><span class="token number">22422</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78842</span><span class="token punctuation">,</span><span class="token number">57896</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">17363</span><span class="token punctuation">,</span><span class="token number">27979</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76897</span><span class="token punctuation">,</span><span class="token number">35008</span><span class="token punctuation">,</span><span class="token number">46482</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75289</span><span class="token punctuation">,</span><span class="token number">65799</span><span class="token punctuation">,</span><span class="token number">20057</span><span class="token punctuation">,</span><span class="token number">7170</span><span class="token punctuation">,</span><span class="token number">41326</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76069</span><span class="token punctuation">,</span><span class="token number">90840</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81253</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">50749</span><span class="token punctuation">,</span><span class="token number">3649</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42315</span><span class="token punctuation">,</span><span class="token number">45238</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33924</span><span class="token punctuation">,</span><span class="token number">62101</span><span class="token punctuation">,</span><span class="token number">96906</span><span class="token punctuation">,</span><span class="token number">58884</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7617</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28689</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66578</span><span class="token punctuation">,</span><span class="token number">62458</span><span class="token punctuation">,</span><span class="token number">50876</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57553</span><span class="token punctuation">,</span><span class="token number">6739</span><span class="token punctuation">,</span><span class="token number">41014</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64040</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34916</span><span class="token punctuation">,</span><span class="token number">37940</span><span class="token punctuation">,</span><span class="token number">13048</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97478</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11318</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89440</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31933</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40357</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59737</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76718</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14104</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31774</span><span class="token punctuation">,</span><span class="token number">28001</span><span class="token punctuation">,</span><span class="token number">4103</span><span class="token punctuation">,</span><span class="token number">41702</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25120</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31654</span><span class="token punctuation">,</span><span class="token number">63085</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3642</span><span class="token punctuation">,</span><span class="token number">84870</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83896</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76422</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61520</span><span class="token punctuation">,</span><span class="token number">12900</span><span class="token punctuation">,</span><span class="token number">88678</span><span class="token punctuation">,</span><span class="token number">85547</span><span class="token punctuation">,</span><span class="token number">33132</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88627</span><span class="token punctuation">,</span><span class="token number">52820</span><span class="token punctuation">,</span><span class="token number">63915</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27472</span><span class="token punctuation">,</span><span class="token number">78867</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51439</span><span class="token punctuation">,</span><span class="token number">33005</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23447</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3271</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39308</span><span class="token punctuation">,</span><span class="token number">39726</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74260</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31874</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36893</span><span class="token punctuation">,</span><span class="token number">93656</span><span class="token punctuation">,</span><span class="token number">910</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98362</span><span class="token punctuation">,</span><span class="token number">60450</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88048</span><span class="token punctuation">,</span><span class="token number">99308</span><span class="token punctuation">,</span><span class="token number">13947</span><span class="token punctuation">,</span><span class="token number">83996</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90415</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35117</span><span class="token punctuation">,</span><span class="token number">70858</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">55332</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31721</span><span class="token punctuation">,</span><span class="token number">97528</span><span class="token punctuation">,</span><span class="token number">82982</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86218</span><span class="token punctuation">,</span><span class="token number">6822</span><span class="token punctuation">,</span><span class="token number">25227</span><span class="token punctuation">,</span><span class="token number">36946</span><span class="token punctuation">,</span><span class="token number">97077</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4257</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41526</span><span class="token punctuation">,</span><span class="token number">56795</span><span class="token punctuation">,</span><span class="token number">89870</span><span class="token punctuation">,</span><span class="token number">75860</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70802</span><span class="token punctuation">,</span><span class="token number">21779</span><span class="token punctuation">,</span><span class="token number">14184</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16511</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89156</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31422</span><span class="token punctuation">,</span><span class="token number">71470</span><span class="token punctuation">,</span><span class="token number">69600</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78498</span><span class="token punctuation">,</span><span class="token number">74079</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19410</span><span class="token punctuation">,</span><span class="token number">40311</span><span class="token punctuation">,</span><span class="token number">28501</span><span class="token punctuation">,</span><span class="token number">26397</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67574</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32518</span><span class="token punctuation">,</span><span class="token number">68510</span><span class="token punctuation">,</span><span class="token number">38615</span><span class="token punctuation">,</span><span class="token number">19355</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6088</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97159</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29255</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92523</span><span class="token punctuation">,</span><span class="token number">3023</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42536</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88681</span><span class="token punctuation">,</span><span class="token number">64255</span><span class="token punctuation">,</span><span class="token number">41206</span><span class="token punctuation">,</span><span class="token number">44119</span><span class="token punctuation">,</span><span class="token number">52208</span><span class="token punctuation">,</span><span class="token number">39522</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52108</span><span class="token punctuation">,</span><span class="token number">91276</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70514</span><span class="token punctuation">,</span><span class="token number">83436</span><span class="token punctuation">,</span><span class="token number">63289</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79741</span><span class="token punctuation">,</span><span class="token number">9623</span><span class="token punctuation">,</span><span class="token number">99559</span><span class="token punctuation">,</span><span class="token number">12642</span><span class="token punctuation">,</span><span class="token number">85950</span><span class="token punctuation">,</span><span class="token number">83735</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21156</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67208</span><span class="token punctuation">,</span><span class="token number">98088</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7341</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27763</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30048</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44099</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14866</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45504</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91704</span><span class="token punctuation">,</span><span class="token number">19369</span><span class="token punctuation">,</span><span class="token number">13700</span><span class="token punctuation">,</span><span class="token number">10481</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49344</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85686</span><span class="token punctuation">,</span><span class="token number">33994</span><span class="token punctuation">,</span><span class="token number">19672</span><span class="token punctuation">,</span><span class="token number">36028</span><span class="token punctuation">,</span><span class="token number">60842</span><span class="token punctuation">,</span><span class="token number">66564</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24919</span><span class="token punctuation">,</span><span class="token number">33950</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93616</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47430</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35391</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28279</span><span class="token punctuation">,</span><span class="token number">56806</span><span class="token punctuation">,</span><span class="token number">74690</span><span class="token punctuation">,</span><span class="token number">39284</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96683</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7642</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75232</span><span class="token punctuation">,</span><span class="token number">37657</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14531</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86870</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9274</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26173</span><span class="token punctuation">,</span><span class="token number">98640</span><span class="token punctuation">,</span><span class="token number">88652</span><span class="token punctuation">,</span><span class="token number">64257</span><span class="token punctuation">,</span><span class="token number">46457</span><span class="token punctuation">,</span><span class="token number">37814</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19370</span><span class="token punctuation">,</span><span class="token number">9337</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22556</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41525</span><span class="token punctuation">,</span><span class="token number">39105</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28719</span><span class="token punctuation">,</span><span class="token number">51611</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93252</span><span class="token punctuation">,</span><span class="token number">98044</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90996</span><span class="token punctuation">,</span><span class="token number">21710</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47605</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64259</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32727</span><span class="token punctuation">,</span><span class="token number">53611</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31918</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3555</span><span class="token punctuation">,</span><span class="token number">33316</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66472</span><span class="token punctuation">,</span><span class="token number">21274</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">37731</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2919</span><span class="token punctuation">,</span><span class="token number">15016</span><span class="token punctuation">,</span><span class="token number">48779</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88868</span><span class="token punctuation">,</span><span class="token number">1897</span><span class="token punctuation">,</span><span class="token number">41728</span><span class="token punctuation">,</span><span class="token number">46344</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89667</span><span class="token punctuation">,</span><span class="token number">37848</span><span class="token punctuation">,</span><span class="token number">68092</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44011</span><span class="token punctuation">,</span><span class="token number">85354</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43776</span><span class="token punctuation">,</span><span class="token number">38739</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31423</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66330</span><span class="token punctuation">,</span><span class="token number">65167</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22016</span><span class="token punctuation">,</span><span class="token number">59405</span><span class="token punctuation">,</span><span class="token number">34328</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60042</span><span class="token punctuation">,</span><span class="token number">87660</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67698</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59174</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1408</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46809</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43485</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88807</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60489</span><span class="token punctuation">,</span><span class="token number">13974</span><span class="token punctuation">,</span><span class="token number">22319</span><span class="token punctuation">,</span><span class="token number">55836</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62995</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">37375</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4185</span><span class="token punctuation">,</span><span class="token number">32687</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36551</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75237</span><span class="token punctuation">,</span><span class="token number">58280</span><span class="token punctuation">,</span><span class="token number">26942</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73756</span><span class="token punctuation">,</span><span class="token number">71756</span><span class="token punctuation">,</span><span class="token number">78775</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40573</span><span class="token punctuation">,</span><span class="token number">14367</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71622</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77338</span><span class="token punctuation">,</span><span class="token number">24112</span><span class="token punctuation">,</span><span class="token number">23414</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7679</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51721</span><span class="token punctuation">,</span><span class="token number">87492</span><span class="token punctuation">,</span><span class="token number">85066</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21612</span><span class="token punctuation">,</span><span class="token number">57045</span><span class="token punctuation">,</span><span class="token number">10673</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96836</span><span class="token punctuation">,</span><span class="token number">52461</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62218</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9310</span><span class="token punctuation">,</span><span class="token number">65862</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22748</span><span class="token punctuation">,</span><span class="token number">89906</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96987</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98698</span><span class="token punctuation">,</span><span class="token number">26956</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43428</span><span class="token punctuation">,</span><span class="token number">46141</span><span class="token punctuation">,</span><span class="token number">47456</span><span class="token punctuation">,</span><span class="token number">28095</span><span class="token punctuation">,</span><span class="token number">55952</span><span class="token punctuation">,</span><span class="token number">67323</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36455</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60202</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">43302</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82932</span><span class="token punctuation">,</span><span class="token number">42020</span><span class="token punctuation">,</span><span class="token number">77036</span><span class="token punctuation">,</span><span class="token number">10142</span><span class="token punctuation">,</span><span class="token number">60406</span><span class="token punctuation">,</span><span class="token number">70331</span><span class="token punctuation">,</span><span class="token number">63836</span><span class="token punctuation">,</span><span class="token number">58850</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66752</span><span class="token punctuation">,</span><span class="token number">52109</span><span class="token punctuation">,</span><span class="token number">21395</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10238</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98647</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41962</span><span class="token punctuation">,</span><span class="token number">27778</span><span class="token punctuation">,</span><span class="token number">69060</span><span class="token punctuation">,</span><span class="token number">98535</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28680</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52263</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56679</span><span class="token punctuation">,</span><span class="token number">66103</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42426</span><span class="token punctuation">,</span><span class="token number">27203</span><span class="token punctuation">,</span><span class="token number">80021</span><span class="token punctuation">,</span><span class="token number">10153</span><span class="token punctuation">,</span><span class="token number">58678</span><span class="token punctuation">,</span><span class="token number">36398</span><span class="token punctuation">,</span><span class="token number">63112</span><span class="token punctuation">,</span><span class="token number">34911</span><span class="token punctuation">,</span><span class="token number">20515</span><span class="token punctuation">,</span><span class="token number">62082</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15659</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40785</span><span class="token punctuation">,</span><span class="token number">27054</span><span class="token punctuation">,</span><span class="token number">43767</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20289</span><span class="token punctuation">,</span><span class="token number">65838</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">6954</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60228</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72226</span><span class="token punctuation">,</span><span class="token number">52236</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35464</span><span class="token punctuation">,</span><span class="token number">25209</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15462</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79617</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41668</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84083</span><span class="token punctuation">,</span><span class="token number">62404</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69062</span><span class="token punctuation">,</span><span class="token number">18913</span><span class="token punctuation">,</span><span class="token number">46545</span><span class="token punctuation">,</span><span class="token number">20757</span><span class="token punctuation">,</span><span class="token number">13805</span><span class="token punctuation">,</span><span class="token number">24717</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18461</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47009</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25779</span><span class="token punctuation">,</span><span class="token number">68834</span><span class="token punctuation">,</span><span class="token number">64824</span><span class="token punctuation">,</span><span class="token number">34473</span><span class="token punctuation">,</span><span class="token number">39576</span><span class="token punctuation">,</span><span class="token number">31570</span><span class="token punctuation">,</span><span class="token number">14861</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15114</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41233</span><span class="token punctuation">,</span><span class="token number">95509</span><span class="token punctuation">,</span><span class="token number">68232</span><span class="token punctuation">,</span><span class="token number">67846</span><span class="token punctuation">,</span><span class="token number">84902</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83060</span><span class="token punctuation">,</span><span class="token number">17642</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18422</span><span class="token punctuation">,</span><span class="token number">73688</span><span class="token punctuation">,</span><span class="token number">77671</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26930</span><span class="token punctuation">,</span><span class="token number">64484</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99637</span><span class="token punctuation">,</span><span class="token number">73875</span><span class="token punctuation">,</span><span class="token number">6428</span><span class="token punctuation">,</span><span class="token number">21034</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73471</span><span class="token punctuation">,</span><span class="token number">19664</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68031</span><span class="token punctuation">,</span><span class="token number">15922</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27028</span><span class="token punctuation">,</span><span class="token number">48137</span><span class="token punctuation">,</span><span class="token number">54955</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82793</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41144</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10218</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24921</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28299</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2288</span><span class="token punctuation">,</span><span class="token number">68518</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54452</span><span class="token punctuation">,</span><span class="token number">15686</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41814</span><span class="token punctuation">,</span><span class="token number">66165</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72207</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61986</span><span class="token punctuation">,</span><span class="token number">80020</span><span class="token punctuation">,</span><span class="token number">50544</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99500</span><span class="token punctuation">,</span><span class="token number">16244</span><span class="token punctuation">,</span><span class="token number">78998</span><span class="token punctuation">,</span><span class="token number">40989</span><span class="token punctuation">,</span><span class="token number">14525</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56061</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24692</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94790</span><span class="token punctuation">,</span><span class="token number">21111</span><span class="token punctuation">,</span><span class="token number">37296</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90794</span><span class="token punctuation">,</span><span class="token number">72100</span><span class="token punctuation">,</span><span class="token number">70550</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31757</span><span class="token punctuation">,</span><span class="token number">17708</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74290</span><span class="token punctuation">,</span><span class="token number">61910</span><span class="token punctuation">,</span><span class="token number">78039</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78629</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25033</span><span class="token punctuation">,</span><span class="token number">73172</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91953</span><span class="token punctuation">,</span><span class="token number">10052</span><span class="token punctuation">,</span><span class="token number">64502</span><span class="token punctuation">,</span><span class="token number">99585</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1741</span><span class="token punctuation">,</span><span class="token number">90324</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73723</span><span class="token punctuation">,</span><span class="token number">68942</span><span class="token punctuation">,</span><span class="token number">28149</span><span class="token punctuation">,</span><span class="token number">30218</span><span class="token punctuation">,</span><span class="token number">24422</span><span class="token punctuation">,</span><span class="token number">16659</span><span class="token punctuation">,</span><span class="token number">10710</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62594</span><span class="token punctuation">,</span><span class="token number">94249</span><span class="token punctuation">,</span><span class="token number">96588</span><span class="token punctuation">,</span><span class="token number">46192</span><span class="token punctuation">,</span><span class="token number">34251</span><span class="token punctuation">,</span><span class="token number">73500</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">65995</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81168</span><span class="token punctuation">,</span><span class="token number">41412</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98724</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63710</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54696</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52407</span><span class="token punctuation">,</span><span class="token number">19746</span><span class="token punctuation">,</span><span class="token number">45869</span><span class="token punctuation">,</span><span class="token number">27821</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94866</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76705</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13417</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61995</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71560</span><span class="token punctuation">,</span><span class="token number">43450</span><span class="token punctuation">,</span><span class="token number">67384</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8838</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80293</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28937</span><span class="token punctuation">,</span><span class="token number">23330</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89694</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40586</span><span class="token punctuation">,</span><span class="token number">46918</span><span class="token punctuation">,</span><span class="token number">80429</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5475</span><span class="token punctuation">,</span><span class="token number">78013</span><span class="token punctuation">,</span><span class="token number">25309</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34162</span><span class="token punctuation">,</span><span class="token number">37236</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">77577</span><span class="token punctuation">,</span><span class="token number">86744</span><span class="token punctuation">,</span><span class="token number">26281</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29033</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91813</span><span class="token punctuation">,</span><span class="token number">35347</span><span class="token punctuation">,</span><span class="token number">13033</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13631</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24459</span><span class="token punctuation">,</span><span class="token number">3325</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71078</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">75359</span><span class="token punctuation">,</span><span class="token number">81311</span><span class="token punctuation">,</span><span class="token number">19700</span><span class="token punctuation">,</span><span class="token number">47678</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74680</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84113</span><span class="token punctuation">,</span><span class="token number">45192</span><span class="token punctuation">,</span><span class="token number">35502</span><span class="token punctuation">,</span><span class="token number">37675</span><span class="token punctuation">,</span><span class="token number">19553</span><span class="token punctuation">,</span><span class="token number">76522</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51098</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18211</span><span class="token punctuation">,</span><span class="token number">89717</span><span class="token punctuation">,</span><span class="token number">4508</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82946</span><span class="token punctuation">,</span><span class="token number">27749</span><span class="token punctuation">,</span><span class="token number">85995</span><span class="token punctuation">,</span><span class="token number">89912</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53678</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64727</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14778</span><span class="token punctuation">,</span><span class="token number">32075</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63412</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40524</span><span class="token punctuation">,</span><span class="token number">86440</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2707</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">36821</span><span class="token punctuation">,</span><span class="token number">63850</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30883</span><span class="token punctuation">,</span><span class="token number">67294</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99468</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23708</span><span class="token punctuation">,</span><span class="token number">34932</span><span class="token punctuation">,</span><span class="token number">34386</span><span class="token punctuation">,</span><span class="token number">98899</span><span class="token punctuation">,</span><span class="token number">29239</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23385</span><span class="token punctuation">,</span><span class="token number">5897</span><span class="token punctuation">,</span><span class="token number">54882</span><span class="token punctuation">,</span><span class="token number">98660</span><span class="token punctuation">,</span><span class="token number">49098</span><span class="token punctuation">,</span><span class="token number">70275</span><span class="token punctuation">,</span><span class="token number">17718</span><span class="token punctuation">,</span><span class="token number">88533</span><span class="token punctuation">,</span><span class="token number">52161</span><span class="token punctuation">,</span><span class="token number">63340</span><span class="token punctuation">,</span><span class="token number">50061</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89457</span><span class="token punctuation">,</span><span class="token number">19491</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99156</span><span class="token punctuation">,</span><span class="token number">24873</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">17008</span><span class="token punctuation">,</span><span class="token number">64610</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">55543</span><span class="token punctuation">,</span><span class="token number">50495</span><span class="token punctuation">,</span><span class="token number">17056</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10400</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56678</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29073</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42960</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76418</span><span class="token punctuation">,</span><span class="token number">98562</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88104</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96255</span><span class="token punctuation">,</span><span class="token number">10159</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90724</span><span class="token punctuation">,</span><span class="token number">54011</span><span class="token punctuation">,</span><span class="token number">12052</span><span class="token punctuation">,</span><span class="token number">45871</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90933</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69420</span><span class="token punctuation">,</span><span class="token number">67039</span><span class="token punctuation">,</span><span class="token number">37202</span><span class="token punctuation">,</span><span class="token number">78051</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52197</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40278</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58425</span><span class="token punctuation">,</span><span class="token number">65414</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23394</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1415</span><span class="token punctuation">,</span><span class="token number">6912</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53447</span><span class="token punctuation">,</span><span class="token number">7352</span><span class="token punctuation">,</span><span class="token number">17307</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78147</span><span class="token punctuation">,</span><span class="token number">63727</span><span class="token punctuation">,</span><span class="token number">98905</span><span class="token punctuation">,</span><span class="token number">55412</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57658</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32884</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44878</span><span class="token punctuation">,</span><span class="token number">22755</span><span class="token punctuation">,</span><span class="token number">39730</span><span class="token punctuation">,</span><span class="token number">3638</span><span class="token punctuation">,</span><span class="token number">35111</span><span class="token punctuation">,</span><span class="token number">39777</span><span class="token punctuation">,</span><span class="token number">74193</span><span class="token punctuation">,</span><span class="token number">38736</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11829</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61188</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92757</span><span class="token punctuation">,</span><span class="token number">55946</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71232</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63032</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83947</span><span class="token punctuation">,</span><span class="token number">39147</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96684</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99233</span><span class="token punctuation">,</span><span class="token number">25131</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32197</span><span class="token punctuation">,</span><span class="token number">24406</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">55428</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61941</span><span class="token punctuation">,</span><span class="token number">25874</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69453</span><span class="token punctuation">,</span><span class="token number">64483</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19644</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68441</span><span class="token punctuation">,</span><span class="token number">12783</span><span class="token punctuation">,</span><span class="token number">87338</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48676</span><span class="token punctuation">,</span><span class="token number">66451</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">447</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61590</span><span class="token punctuation">,</span><span class="token number">50932</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11270</span><span class="token punctuation">,</span><span class="token number">29035</span><span class="token punctuation">,</span><span class="token number">65698</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63544</span><span class="token punctuation">,</span><span class="token number">10029</span><span class="token punctuation">,</span><span class="token number">80499</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9461</span><span class="token punctuation">,</span><span class="token number">86368</span><span class="token punctuation">,</span><span class="token number">91365</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81810</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71914</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52056</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13782</span><span class="token punctuation">,</span><span class="token number">44240</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30093</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2437</span><span class="token punctuation">,</span><span class="token number">24007</span><span class="token punctuation">,</span><span class="token number">67581</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">17365</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69164</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8420</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69289</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">29370</span><span class="token punctuation">,</span><span class="token number">48010</span><span class="token punctuation">,</span><span class="token number">90439</span><span class="token punctuation">,</span><span class="token number">13141</span><span class="token punctuation">,</span><span class="token number">69243</span><span class="token punctuation">,</span><span class="token number">50668</span><span class="token punctuation">,</span><span class="token number">39328</span><span class="token punctuation">,</span><span class="token number">61731</span><span class="token punctuation">,</span><span class="token number">78266</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81313</span><span class="token punctuation">,</span><span class="token number">17921</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38196</span><span class="token punctuation">,</span><span class="token number">55261</span><span class="token punctuation">,</span><span class="token number">9948</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24970</span><span class="token punctuation">,</span><span class="token number">75712</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72106</span><span class="token punctuation">,</span><span class="token number">28696</span><span class="token punctuation">,</span><span class="token number">7461</span><span class="token punctuation">,</span><span class="token number">31621</span><span class="token punctuation">,</span><span class="token number">61047</span><span class="token punctuation">,</span><span class="token number">51476</span><span class="token punctuation">,</span><span class="token number">56512</span><span class="token punctuation">,</span><span class="token number">11839</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96916</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82739</span><span class="token punctuation">,</span><span class="token number">28924</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">99927</span><span class="token punctuation">,</span><span class="token number">58449</span><span class="token punctuation">,</span><span class="token number">37280</span><span class="token punctuation">,</span><span class="token number">69357</span><span class="token punctuation">,</span><span class="token number">11219</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32119</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62050</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48745</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83486</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52376</span><span class="token punctuation">,</span><span class="token number">42668</span><span class="token punctuation">,</span><span class="token number">82659</span><span class="token punctuation">,</span><span class="token number">68882</span><span class="token punctuation">,</span><span class="token number">38773</span><span class="token punctuation">,</span><span class="token number">46269</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96005</span><span class="token punctuation">,</span><span class="token number">97630</span><span class="token punctuation">,</span><span class="token number">25009</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2951</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67811</span><span class="token punctuation">,</span><span class="token number">99801</span><span class="token punctuation">,</span><span class="token number">81587</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79793</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18547</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83086</span><span class="token punctuation">,</span><span class="token number">69512</span><span class="token punctuation">,</span><span class="token number">33127</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92145</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88497</span><span class="token punctuation">,</span><span class="token number">47703</span><span class="token punctuation">,</span><span class="token number">59527</span><span class="token punctuation">,</span><span class="token number">1909</span><span class="token punctuation">,</span><span class="token number">88785</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88882</span><span class="token punctuation">,</span><span class="token number">69188</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">46131</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5589</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15086</span><span class="token punctuation">,</span><span class="token number">36255</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53238</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33009</span><span class="token punctuation">,</span><span class="token number">82664</span><span class="token punctuation">,</span><span class="token number">53901</span><span class="token punctuation">,</span><span class="token number">35939</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42946</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25571</span><span class="token punctuation">,</span><span class="token number">33298</span><span class="token punctuation">,</span><span class="token number">69291</span><span class="token punctuation">,</span><span class="token number">53199</span><span class="token punctuation">,</span><span class="token number">74746</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">40127</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39050</span><span class="token punctuation">,</span><span class="token number">91033</span><span class="token punctuation">,</span><span class="token number">51717</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98048</span><span class="token punctuation">,</span><span class="token number">87240</span><span class="token punctuation">,</span><span class="token number">36172</span><span class="token punctuation">,</span><span class="token number">65453</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94425</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63694</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30027</span><span class="token punctuation">,</span><span class="token number">59004</span><span class="token punctuation">,</span><span class="token number">88660</span><span class="token punctuation">,</span><span class="token number">3649</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20267</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52565</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67321</span><span class="token punctuation">,</span><span class="token number">34037</span><span class="token punctuation">,</span><span class="token number">4320</span><span class="token punctuation">,</span><span class="token number">91515</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56753</span><span class="token punctuation">,</span><span class="token number">60115</span><span class="token punctuation">,</span><span class="token number">27134</span><span class="token punctuation">,</span><span class="token number">68617</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61395</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26503</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98929</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8849</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63318</span><span class="token punctuation">,</span><span class="token number">10709</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16151</span><span class="token punctuation">,</span><span class="token number">61905</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">95785</span><span class="token punctuation">,</span><span class="token number">5262</span><span class="token punctuation">,</span><span class="token number">23670</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25277</span><span class="token punctuation">,</span><span class="token number">90206</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19391</span><span class="token punctuation">,</span><span class="token number">45735</span><span class="token punctuation">,</span><span class="token number">37208</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31992</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92450</span><span class="token punctuation">,</span><span class="token number">18516</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90452</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58870</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58602</span><span class="token punctuation">,</span><span class="token number">93383</span><span class="token punctuation">,</span><span class="token number">14333</span><span class="token punctuation">,</span><span class="token number">17994</span><span class="token punctuation">,</span><span class="token number">82411</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">54126</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32576</span><span class="token punctuation">,</span><span class="token number">35440</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60526</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78764</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">25069</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9022</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">394</span><span class="token punctuation">,</span><span class="token number">92186</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38057</span><span class="token punctuation">,</span><span class="token number">55328</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61569</span><span class="token punctuation">,</span><span class="token number">67780</span><span class="token punctuation">,</span><span class="token number">77169</span><span class="token punctuation">,</span><span class="token number">19546</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92664</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">94948</span><span class="token punctuation">,</span><span class="token number">44484</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13439</span><span class="token punctuation">,</span><span class="token number">83529</span><span class="token punctuation">,</span><span class="token number">27518</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48333</span><span class="token punctuation">,</span><span class="token number">72998</span><span class="token punctuation">,</span><span class="token number">38342</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90553</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">98578</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76906</span><span class="token punctuation">,</span><span class="token number">81515</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16464</span><span class="token punctuation">,</span><span class="token number">78439</span><span class="token punctuation">,</span><span class="token number">92529</span><span class="token punctuation">,</span><span class="token number">35225</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39968</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10130</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7845</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32245</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74955</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">74996</span><span class="token punctuation">,</span><span class="token number">67731</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13897</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82493</span><span class="token punctuation">,</span><span class="token number">33407</span><span class="token punctuation">,</span><span class="token number">93619</span><span class="token punctuation">,</span><span class="token number">59560</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24404</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57553</span><span class="token punctuation">,</span><span class="token number">19486</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45341</span><span class="token punctuation">,</span><span class="token number">34098</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24978</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">33612</span><span class="token punctuation">,</span><span class="token number">79058</span><span class="token punctuation">,</span><span class="token number">71847</span><span class="token punctuation">,</span><span class="token number">76713</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">95422</span><span class="token punctuation">,</span><span class="token number">6421</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">96075</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59130</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">28976</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16922</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62203</span><span class="token punctuation">,</span><span class="token number">69970</span><span class="token punctuation">,</span><span class="token number">68331</span><span class="token punctuation">,</span><span class="token number">21874</span><span class="token punctuation">,</span><span class="token number">40551</span><span class="token punctuation">,</span><span class="token number">89650</span><span class="token punctuation">,</span><span class="token number">51908</span><span class="token punctuation">,</span><span class="token number">58181</span><span class="token punctuation">,</span><span class="token number">66480</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68177</span><span class="token punctuation">,</span><span class="token number">34323</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3046</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49656</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">59758</span><span class="token punctuation">,</span><span class="token number">43564</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10960</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30796</span><span class="token punctuation">,</span><span class="token number">15473</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">20216</span><span class="token punctuation">,</span><span class="token number">46085</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">85355</span><span class="token punctuation">,</span><span class="token number">41515</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">30669</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">87498</span><span class="token punctuation">,</span><span class="token number">57711</span><span class="token punctuation">,</span><span class="token number">56067</span><span class="token punctuation">,</span><span class="token number">63199</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">83805</span><span class="token punctuation">,</span><span class="token number">62042</span><span class="token punctuation">,</span><span class="token number">91213</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">14606</span><span class="token punctuation">,</span><span class="token number">4394</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">562</span><span class="token punctuation">,</span><span class="token number">74913</span><span class="token punctuation">,</span><span class="token number">10406</span><span class="token punctuation">,</span><span class="token number">96810</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61595</span><span class="token punctuation">,</span><span class="token number">32564</span><span class="token punctuation">,</span><span class="token number">31640</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">9732</span><span class="token punctuation">,</span><span class="token number">42058</span><span class="token punctuation">,</span><span class="token number">98052</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7908</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72330</span><span class="token punctuation">,</span><span class="token number">1558</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80301</span><span class="token punctuation">,</span><span class="token number">34878</span><span class="token punctuation">,</span><span class="token number">32900</span><span class="token punctuation">,</span><span class="token number">3939</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8824</span><span class="token punctuation">,</span><span class="token number">88316</span><span class="token punctuation">,</span><span class="token number">20937</span><span class="token punctuation">,</span><span class="token number">21566</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3218</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">66080</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">31620</span><span class="token punctuation">,</span><span class="token number">86859</span><span class="token punctuation">,</span><span class="token number">54289</span><span class="token punctuation">,</span><span class="token number">90476</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">42889</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15016</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">18838</span><span class="token punctuation">,</span><span class="token number">75456</span><span class="token punctuation">,</span><span class="token number">30159</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67101</span><span class="token punctuation">,</span><span class="token number">42328</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92703</span><span class="token punctuation">,</span><span class="token number">85850</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5475</span><span class="token punctuation">,</span><span class="token number">23470</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">80806</span><span class="token punctuation">,</span><span class="token number">68206</span><span class="token punctuation">,</span><span class="token number">17764</span><span class="token punctuation">,</span><span class="token number">88235</span><span class="token punctuation">,</span><span class="token number">46421</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41578</span><span class="token punctuation">,</span><span class="token number">74005</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81142</span><span class="token punctuation">,</span><span class="token number">80545</span><span class="token punctuation">,</span><span class="token number">20868</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1560</span><span class="token punctuation">,</span><span class="token number">64017</span><span class="token punctuation">,</span><span class="token number">83784</span><span class="token punctuation">,</span><span class="token number">68863</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97516</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13016</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72223</span><span class="token punctuation">,</span><span class="token number">79630</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">55692</span><span class="token punctuation">,</span><span class="token number">82255</span><span class="token punctuation">,</span><span class="token number">88467</span><span class="token punctuation">,</span><span class="token number">28007</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34686</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">69049</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">41677</span><span class="token punctuation">,</span><span class="token number">88535</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8217</span><span class="token punctuation">,</span><span class="token number">68060</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51280</span><span class="token punctuation">,</span><span class="token number">28971</span><span class="token punctuation">,</span><span class="token number">49088</span><span class="token punctuation">,</span><span class="token number">49235</span><span class="token punctuation">,</span><span class="token number">26905</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81117</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">44888</span><span class="token punctuation">,</span><span class="token number">40623</span><span class="token punctuation">,</span><span class="token number">74337</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24662</span><span class="token punctuation">,</span><span class="token number">97476</span><span class="token punctuation">,</span><span class="token number">79542</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72082</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">35093</span><span class="token punctuation">,</span><span class="token number">98175</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61761</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68169</span><span class="token punctuation">,</span><span class="token number">59697</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">62542</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72965</span><span class="token punctuation">,</span><span class="token number">59883</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64026</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">37656</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92392</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12113</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">73495</span><span class="token punctuation">,</span><span class="token number">98258</span><span class="token punctuation">,</span><span class="token number">68379</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21545</span><span class="token punctuation">,</span><span class="token number">64607</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">70957</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92254</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">97460</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63436</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8853</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19357</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">51965</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76582</span><span class="token punctuation">,</span><span class="token number">12687</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">49712</span><span class="token punctuation">,</span><span class="token number">45413</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">60043</span><span class="token punctuation">,</span><span class="token number">33496</span><span class="token punctuation">,</span><span class="token number">31539</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57347</span><span class="token punctuation">,</span><span class="token number">41837</span><span class="token punctuation">,</span><span class="token number">67280</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68813</span><span class="token punctuation">,</span><span class="token number">52088</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13155</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">86430</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">15239</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45030</span><span class="token punctuation">,</span><span class="token number">96041</span><span class="token punctuation">,</span><span class="token number">18749</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23992</span><span class="token punctuation">,</span><span class="token number">46048</span><span class="token punctuation">,</span><span class="token number">35243</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79450</span><span class="token punctuation">,</span><span class="token number">85425</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58524</span><span class="token punctuation">,</span><span class="token number">88781</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39454</span><span class="token punctuation">,</span><span class="token number">53073</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48864</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">82289</span><span class="token punctuation">,</span><span class="token number">39086</span><span class="token punctuation">,</span><span class="token number">82540</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">11555</span><span class="token punctuation">,</span><span class="token number">25014</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5431</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39585</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89526</span><span class="token punctuation">,</span><span class="token number">2705</span><span class="token punctuation">,</span><span class="token number">31953</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">81611</span><span class="token punctuation">,</span><span class="token number">36985</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">56022</span><span class="token punctuation">,</span><span class="token number">68684</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">27101</span><span class="token punctuation">,</span><span class="token number">11422</span><span class="token punctuation">,</span><span class="token number">64655</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">26965</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">63081</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13840</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91003</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78147</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8966</span><span class="token punctuation">,</span><span class="token number">41488</span><span class="token punctuation">,</span><span class="token number">1988</span><span class="token punctuation">,</span><span class="token number">99021</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">61575</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">47060</span><span class="token punctuation">,</span><span class="token number">65260</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23844</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">21781</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">91865</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19607</span><span class="token punctuation">,</span><span class="token number">44808</span><span class="token punctuation">,</span><span class="token number">2890</span><span class="token punctuation">,</span><span class="token number">63692</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">88663</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58272</span><span class="token punctuation">,</span><span class="token number">15970</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">65195</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45416</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">48444</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">78226</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">65332</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">24568</span><span class="token punctuation">,</span><span class="token number">42833</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1806</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">71595</span><span class="token punctuation">,</span><span class="token number">80002</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52250</span><span class="token punctuation">,</span><span class="token number">30952</span><span class="token punctuation">,</span><span class="token number">48452</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">90106</span><span class="token punctuation">,</span><span class="token number">31015</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22073</span><span class="token punctuation">,</span><span class="token number">62339</span><span class="token punctuation">,</span><span class="token number">63318</span><span class="token punctuation">,</span><span class="token number">78391</span><span class="token punctuation">,</span><span class="token number">28699</span><span class="token punctuation">,</span><span class="token number">77900</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4026</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">76870</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">45943</span><span class="token punctuation">,</span><span class="token number">33665</span><span class="token punctuation">,</span><span class="token number">9174</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">84360</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">22684</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">16832</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67949</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38077</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">38987</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32847</span><span class="token punctuation">,</span><span class="token number">51443</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">53580</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">13505</span><span class="token punctuation">,</span><span class="token number">9344</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">92337</span><span class="token punctuation">,</span><span class="token number">26585</span><span class="token punctuation">,</span><span class="token number">70458</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">52764</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">67471</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">68411</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1119</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2072</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">93476</span><span class="token punctuation">,</span><span class="token number">67981</span><span class="token punctuation">,</span><span class="token number">40887</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">89304</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12235</span><span class="token punctuation">,</span><span class="token number">41488</span><span class="token punctuation">,</span><span class="token number">1454</span><span class="token punctuation">,</span><span class="token number">5355</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">34855</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">72080</span><span class="token punctuation">,</span><span class="token number">24514</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">58305</span><span class="token punctuation">,</span><span class="token number">3340</span><span class="token punctuation">,</span><span class="token number">34331</span><span class="token punctuation">,</span><span class="token number">8731</span><span class="token punctuation">,</span><span class="token number">77451</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">64983</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">57876</span><span class="token punctuation">,</span><span class="token number">82874</span><span class="token punctuation">,</span><span class="token number">62481</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">32754</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">39902</span><span class="token punctuation">,</span><span class="token number">22451</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">79095</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">23904</span><span class="token punctuation">,</span><span class="token number">78409</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">7418</span><span class="token punctuation">,</span><span class="token number">77916</span><span class="token punctuation">]</span>    a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>threeSum<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>    elapsed <span class="token operator">=</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Time used:"</span><span class="token punctuation">,</span> elapsed<span class="token punctuation">)</span></code></pre><blockquote><p>然后，结果是：<br>Time used: 58.208637248206905</p></blockquote><hr><p>当然了，放入上面的目的只是为了说明我们的程序是可以运行的，但是不够简洁。<br>我们需要更高效率的程序代码。</p><h3 id="不妨考虑考虑暴力法"><a href="#不妨考虑考虑暴力法" class="headerlink" title="不妨考虑考虑暴力法"></a>不妨考虑考虑暴力法</h3><p>先暴力解决出来，然后我们再考虑优化。</p><blockquote><p><span style="color:red;font-weight:bloder;">题目：</span><br>给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。<br>注意：答案中不可以包含重复的三元组。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                k <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">while</span> k<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> i<span class="token operator">!=</span>j <span class="token operator">and</span> j<span class="token operator">!=</span>k <span class="token punctuation">:</span>                        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                            li <span class="token operator">=</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token keyword">if</span> li <span class="token operator">not</span> <span class="token keyword">in</span> re<span class="token punctuation">:</span>                                re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">)</span>                    k<span class="token operator">+=</span><span class="token number">1</span>                j<span class="token operator">+=</span><span class="token number">1</span>            i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> re</code></pre><p>这个程序很容易理解，就是靠下标区别元素，以保证a，b，c三个数不是同一个位置，也就是不是一个数，两两不同。然后判断结果是否是我们期待的0。<br>但是：<span style="color:red;">超出时间限制</span><br>也不难理解，因为我们的程序的时间复杂度是O(n^3)，效率不高。我们接下来在它的基础上优化。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#数据封装</span>    <span class="token keyword">def</span> <span class="token function">loadData</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> data    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 先将数据封装到字典中，方便计算数据的个数</span>            data <span class="token operator">=</span> self<span class="token punctuation">.</span>loadData<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>            j <span class="token operator">=</span> <span class="token number">0</span>            data<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                data<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">if</span> i<span class="token operator">!=</span>j<span class="token punctuation">:</span>                    <span class="token keyword">if</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                        data<span class="token punctuation">[</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                        li <span class="token operator">=</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> li <span class="token operator">not</span> <span class="token keyword">in</span> re<span class="token punctuation">:</span>                            re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">)</span>                j<span class="token operator">+=</span><span class="token number">1</span>            i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> re</code></pre><p><span style="color:red;">结果：</span><br>311 / 313 个通过测试用例<br>状态：超出时间限制</p><p>看来，任重而道远！！！</p><hr><h3 id="继续优化"><a href="#继续优化" class="headerlink" title="继续优化"></a>继续优化</h3><p>百度了一个解题思路：</p><blockquote><p>首先对数组从小到大排序，从一个数开始遍历，若该数大于0，后面的数不可能与其相加和为0，所以跳过；否则该数可能是满足要求的第一个数，这样可以转化为求后面数组中两数之和为该数的相反数的问题。定义两个指针一前一后，若找到两数之和满足条件则加入到解集中；若大于和则后指针向前移动，反之则前指针向后移动，直到前指针大于等于后指针。这样遍历第一个数直到数组的倒数第3位。注意再求和过程中首先判断该数字是否与前面数字重复，保证解集中没有重复解。</p></blockquote><p>下面实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        re<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#排序-从小到大</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#第一个数大于0,返回空</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span> <span class="token operator">or</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#数据可能满足条件</span>        i<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print(123)</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 求后面数组中两数之和为该数的相反数的问题</span>                left<span class="token punctuation">,</span> right <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                    s <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                    <span class="token comment" spellcheck="true"># 满足条件,加入集合中</span>                    <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                        li <span class="token operator">=</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> li <span class="token operator">not</span> <span class="token keyword">in</span> re<span class="token punctuation">:</span>                            re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">)</span>                        left <span class="token operator">+=</span> <span class="token number">1</span>                        right <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token keyword">elif</span> s <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                        right <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        left <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> re</code></pre><p>但是和上面一样还是超时！！！</p><hr><p>然后又找了找思路：</p><blockquote><p>正确思路：<br>需要解决的问题是：如何把三重遍历变为双重遍历<br>解决思路也是重点：排序+双指针<br>1 先对nums进行排序，利用排序和两个“指针”，将三重遍历变为双重遍历，思路类似快排<br>2 另外，一定要对数据进行去重，否则一些极端输入如[0,0,0,0,0,0,0,0,0,0]，速度会非常慢<br>具体思路：<br>1 对异常数据进行处理，如[1,2]和[0,0,0]<br>2 因为已经排过序了，所以如果当前的元素大于0，那么后面的元素一定也大于0，必不符合条件，所以直接return<br>3 对起点进行去重之后，对当前元素之后的元素进行遍历，设置两个指针left和right，分别从左右向中间移动，小则left右移，大则right左移。此处必须保证去重，每次进行判定的必须是“新”的组合。<br>下面的算法运行时间在55~59ms之间</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: List[List[int]]        """</span>        re<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#排序-从小到大</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#第一个数大于0,返回空</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span> <span class="token operator">or</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                li <span class="token operator">=</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">)</span>                <span class="token keyword">return</span> re        <span class="token keyword">if</span> len<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#数据可能满足条件</span>        i<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> re            <span class="token comment" spellcheck="true"># 求后面数组中两数之和为该数的相反数的问题</span>            left<span class="token punctuation">,</span> right <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>                s <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true"># 满足条件,加入集合中</span>                <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                    li <span class="token operator">=</span> sorted<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> li <span class="token operator">not</span> <span class="token keyword">in</span> re<span class="token punctuation">:</span>                        re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">#左右去重</span>                    <span class="token keyword">while</span> left<span class="token operator">&lt;</span>right <span class="token operator">and</span> nums<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                        left <span class="token operator">+=</span> <span class="token number">1</span>                    <span class="token keyword">while</span> left<span class="token operator">&lt;</span>right <span class="token operator">and</span> nums<span class="token punctuation">[</span>right<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                        right <span class="token operator">-=</span> <span class="token number">1</span>                    left <span class="token operator">+=</span> <span class="token number">1</span>                    right <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">elif</span> s <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                    right <span class="token operator">-=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    left <span class="token operator">+=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> re</code></pre><p>同上！！！<br>我觉得我还能抢救一下。</p><hr><p>以后再想。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 暂时无好思路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-205 | 同构字符串</title>
      <link href="/2019/04/leetcode-205/"/>
      <url>/2019/04/leetcode-205/</url>
      
        <content type="html"><![CDATA[<h2 id="205-同构字符串（Isomorphic-Strings）"><a href="#205-同构字符串（Isomorphic-Strings）" class="headerlink" title="205. 同构字符串（Isomorphic Strings）"></a>205. 同构字符串（Isomorphic Strings）</h2><p>给定两个字符串 s 和 t，判断它们是否是同构的。<br>如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。<br>所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。</p><blockquote><p><span>示例1：</span><br>输入: s = “egg”, t = “add”<br>输出: true<br><span>示例2：</span><br>输入: s = “foo”, t = “bar”<br>输出: false<br><span>示例3：</span><br>输入: s = “paper”, t = “title”<br>输出: true</p></blockquote><blockquote><p><span>说明：</span><br>你可以假设 s 和 t 具有相同的长度。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-和上题一样的方式"><a href="#方法一：-和上题一样的方式" class="headerlink" title="方法一： 和上题一样的方式"></a>方法一： 和上题一样的方式</h3><p>按照空格分割字符串，存入列表中。<br>对于模式串：<code>pattern = &quot;egg&quot;</code> 和<code>str = &quot;add&quot;</code> 分别定义一个下标指针，同步移动。<br><code>e--&gt;a</code><br><code>g--&gt;d</code><br>存入后，判断下一个模式，如<code>g</code>，看<code>str</code>中指针指向的 是否是<code>d</code><br>当然，也要防止出现<code>a--&gt;d</code>  <code>b--&gt;d</code>现象。<br>唯一的不同在于，对非空格分割字符串的列表封装：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">splitPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> p<span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> li</code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isNotInValue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> ps<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span>s<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">splitPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> p<span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> li    <span class="token keyword">def</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type t: str        :rtype: bool        """</span>        li <span class="token operator">=</span> self<span class="token punctuation">.</span>splitPattern<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(li)</span>        p_len<span class="token punctuation">,</span> s_len <span class="token operator">=</span> len<span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span>        <span class="token keyword">if</span> p_len <span class="token operator">!=</span> s_len<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true">#定义同步指针i,j</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token comment" spellcheck="true">#定义字典存放模式字母对应的字符串</span>        ps <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;</span>p_len<span class="token punctuation">:</span>            <span class="token keyword">if</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> ps<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#防止出现a-->dog  b-->dog</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>isNotInValue<span class="token punctuation">(</span>ps<span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    ps<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> ps<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><blockquote><p><span style="color:red;">结果：</span><br>执行用时 : 48 ms, 在Isomorphic Strings的Python提交中击败了53.57% 的用户<br>内存消耗 : 12.4 MB, 在Isomorphic Strings的Python提交中击败了56.62% 的</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>48 ms</td><td>12.4MB</td><td>python</td></tr></table>### 方法二：更简单的方式简化版，因为特色是这里可以直接用i，j同步指针。不用像上一题那样，拆分成列表后才能用同步指针。<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type t: str        :rtype: bool        """</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">#长度不等返回False</span>        s_len<span class="token punctuation">,</span> t_len <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">if</span> s_len<span class="token operator">!=</span>t_len<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true">#定义一个结果集</span>        re <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>s_len<span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> re<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#同样的可能有a-->t  b-->t出现，我们要避免这种情况</span>                <span class="token keyword">if</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> re<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                re<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#当前的s[i]取出的对应的t[j]和t[j]进行判断</span>            <span class="token keyword">if</span> re<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            i<span class="token operator">+=</span><span class="token number">1</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><blockquote><p><span style="color:red;">结果：</span><br>执行用时 : 40 ms, 在Isomorphic Strings的Python提交中击败了96.81% 的用户<br>内存消耗 : 12.2 MB, 在Isomorphic Strings的Python提交中击败了64.71% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>40 ms</td><td>12.2MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-290 | 单词模式</title>
      <link href="/2019/04/leetcode-290/"/>
      <url>/2019/04/leetcode-290/</url>
      
        <content type="html"><![CDATA[<h2 id="290-单词模式（Word-Pattern）"><a href="#290-单词模式（Word-Pattern）" class="headerlink" title="290. 单词模式（Word Pattern）"></a>290. 单词模式（Word Pattern）</h2><p>给定一种 pattern(模式) 和一个字符串 str ，判断 str 是否遵循相同的模式。<br>这里的遵循指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应模式。</p><blockquote><p><span>示例1：</span><br>输入: pattern = “abba”, str = “dog cat cat dog”<br>输出: true</p></blockquote><blockquote><p><span>示例2：</span><br>输入:pattern = “abba”, str = “dog cat cat fish”<br>输出: false</p></blockquote><blockquote><p><span>示例3：</span><br>输入: pattern = “aaaa”, str = “dog cat cat dog”<br>输出: false</p></blockquote><blockquote><p><span>示例4：</span><br>输入: pattern = “abba”, str = “dog dog dog dog”<br>输出: false<br><span>说明：</span><br>你可以假设 pattern 只包含小写字母， str 包含了由单个空格分隔的小写字母。    </p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-分割字符串，然后对应位置判断"><a href="#方法一：-分割字符串，然后对应位置判断" class="headerlink" title="方法一： 分割字符串，然后对应位置判断"></a>方法一： 分割字符串，然后对应位置判断</h3><p>按照空格分割字符串，存入列表中。<br>对于模式串：<code>pattern = &quot;abba&quot;</code> 和<code>str = &quot;dog cat cat dog&quot;</code> 分别定义一个下标指针，同步移动。<br><code>a--&gt;dog</code><br><code>b--&gt;cat</code><br>存入后，判断下一个模式，如<code>b</code>，看<code>str</code>中指针指向的 是否是<code>cat</code><br>当然，也要防止出现<code>a--&gt;dog</code>  <code>b--&gt;dog</code>现象。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#防止出现a-->dog  b-->dog</span>    <span class="token keyword">def</span> <span class="token function">isNotInValue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ps<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> ps<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span>s<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">wordPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type pattern: str        :type str: str        :rtype: bool        """</span>        li <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        p_len<span class="token punctuation">,</span> s_len <span class="token operator">=</span> len<span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span>        <span class="token keyword">if</span> p_len <span class="token operator">!=</span> s_len<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true">#定义同步指针i,j</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token comment" spellcheck="true">#定义字典存放模式字母对应的字符串</span>        ps <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;</span>p_len<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#每次一进来就判断当前的下标i对应的模式字母是否在字典中</span>            <span class="token keyword">if</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> ps<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#防止出现a-->dog  b-->dog</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>isNotInValue<span class="token punctuation">(</span>ps<span class="token punctuation">,</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    ps<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment" spellcheck="true">#这里判断的还是当前下标i对应的模式字母</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> ps<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#匹配就同步移动指针</span>                j <span class="token operator">+=</span> <span class="token number">1</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 28 ms, 在Word Pattern的Python提交中击败了98.04% 的用户<br>内存消耗 : 11.7 MB, 在Word Pattern的Python提交中击败了29.14% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>28 ms</td><td>11.7MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-451 | 根据字符出现频率排序</title>
      <link href="/2019/04/leetcode-451/"/>
      <url>/2019/04/leetcode-451/</url>
      
        <content type="html"><![CDATA[<h2 id="451-根据字符出现频率排序（Sort-Characters-By-Frequency）"><a href="#451-根据字符出现频率排序（Sort-Characters-By-Frequency）" class="headerlink" title="451. 根据字符出现频率排序（Sort Characters By Frequency）"></a>451. 根据字符出现频率排序（Sort Characters By Frequency）</h2><p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p><blockquote><p><span>示例1：</span><br>输入:<br>“tree”<br>输出:<br>“eert”<br><span>解释：</span><br>‘e’出现两次，’r’和’t’都只出现一次。<br>因此’e’必须出现在’r’和’t’之前。此外，”eetr”也是一个有效的答案。</p></blockquote><blockquote><p><span>示例2：</span><br>输入:<br>“cccaaa”<br>输出:<br>“cccaaa”<br><span>解释：</span><br>‘c’和’a’都出现三次。此外，”aaaccc”也是有效的答案。<br>注意”cacaca”是不正确的，因为相同的字母必须放在一起。</p></blockquote><blockquote><p><span>示例3：</span><br>输入:<br>“Aabb”<br>输出:<br>“bbAa”<br><span>解释：</span><br>此外，”bbaA”也是一个有效的答案，但”Aabb”是不正确的。<br>注意’A’和’a’被认为是两种不同的字符。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-统计计数，然后排列"><a href="#方法一：-统计计数，然后排列" class="headerlink" title="方法一： 统计计数，然后排列"></a>方法一： 统计计数，然后排列</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">frequencySort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        <span class="token comment" spellcheck="true">#数据装入字典中</span>        sd <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            sd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sd<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">#想办法对字典进行排序</span>        re <span class="token operator">=</span> sorted<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>sd<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sd<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#[(1, 'e'), (2, 'g')]</span>        <span class="token comment" spellcheck="true">#上面是按照频次从大到小排序，反转一下</span>        re<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#结果字符串</span>        result <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> tuple <span class="token keyword">in</span> re<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#字符串拼接</span>            result <span class="token operator">+=</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> result</code></pre><blockquote><p><span style="color:red;">结果：</span><br>执行用时 : 60 ms, 在Sort Characters By Frequency的Python提交中击败了69.70% 的用户<br>内存消耗 : 14.2 MB, 在Sort Characters By Frequency的Python提交中击败了30.00% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>60 ms</td><td>14.2MB</td><td>python</td></tr></table><h3 id="简化代码"><a href="#简化代码" class="headerlink" title="简化代码"></a>简化代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">frequencySort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        <span class="token comment" spellcheck="true">#数据装入字典中</span>        sd <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            sd<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sd<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">#想办法对字典进行排序</span>        result <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> n <span class="token keyword">in</span> sorted<span class="token punctuation">(</span>sd<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> e<span class="token punctuation">:</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> i<span class="token operator">*</span>n        <span class="token keyword">return</span> result</code></pre><blockquote><p><span style="color:red;">结果：</span><br>执行用时 : 64 ms, 在Sort Characters By Frequency的Python提交中击败了63.64% 的用户<br>内存消耗 : 14.2 MB, 在Sort Characters By Frequency的Python提交中击败了30.00% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>64 ms</td><td>14.2MB</td><td>python</td></tr></table>代码虽然简化了，但是它执行的时间却略微增加了一点。所以，减不简化看自己喜好。<p>而且，这里的lambda函数还是值得学习的。</p><hr><h2 id="lambda函数"><a href="#lambda函数" class="headerlink" title="lambda函数"></a>lambda函数</h2><p>匿名函数<code>lambda</code>，匿名函数顾名思义就是指：是指一类无需定义标识符（函数名）的函数或子程序。在<code>C++11</code>和<code>C#</code>中都有匿名函数的存在。下面看看在<code>python</code>中匿名函数的使用。</p><ul><li><code>lambda</code>只是一个表达式，函数体比<code>def</code>简单很多；</li><li><code>lambda</code>的主体是一个表达式，而不是一个代码块。仅仅能在<code>lambda</code>表达式中封装有限的逻辑进去；</li><li><code>lambda</code>表达式是起到一个函数速写的作用，允许在代码内嵌入一个函数的定义。</li></ul><p><span style="color:red;font-weight: bold;">一个简单的lamdba函数：</span></p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token operator">+</span>z    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p><span>思绪回到上面代码中的情况：</span><br>key=lambda e: e[1]<br>而key需要的是一个callable类型的对象，其实也就是一个函数。（或者是一个类实现了callable接口)<br>也就是说key需要的就是一个函数。<br>可以翻译成：<code>按照什么关键字从大到小排序？</code><br><span style="color:red;font-weight: bold;">等价写法：</span></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compare</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre></blockquote><p>#在应用出替换之前的key=lambda e:e[1]<br>key=self.compare</p><pre><code>这里之前的`sorted(sd.items(), key=lambda e: e[1], reverse=True)`不妨这样理解：匿名函数，使用的时候参数针对的是调用函数的对象，也就是我们的`sorted`函数调用它，就由`sorted`函数来隐式的传入参数，而`sorted`函数，我们传入的数据对象只有`sd.items()`得到的是一个列表。不妨输出`sd.items()`验证一下，结果是：`dict_items([(&#39;e&#39;, 1), (&#39;g&#39;, 2)])`也就是一个`key`，`value`的元组组成的列表。那么，也就前后呼应了。`lambda`中传入的参数e，`return`的是`e[1]`，也就是字母的次数。</code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-202 | 快乐数</title>
      <link href="/2019/04/leetcode-202/"/>
      <url>/2019/04/leetcode-202/</url>
      
        <content type="html"><![CDATA[<h2 id="202-快乐数（Happy-Number）"><a href="#202-快乐数（Happy-Number）" class="headerlink" title="202. 快乐数（Happy Number）"></a>202. 快乐数（Happy Number）</h2><p>编写一个算法来判断一个数是不是“快乐数”。</p><p>一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p><blockquote><p><span>示例：</span><br>输入: 19<br>输出: true<br>解释:<br>12 + 92 = 82<br>82 + 22 = 68<br>62 + 82 = 100<br>12 + 02 + 02 = 1</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-按照题意编程"><a href="#方法一：-按照题意编程" class="headerlink" title="方法一： 按照题意编程"></a>方法一： 按照题意编程</h3><p>我们，需要编程尝试：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> n<span class="token punctuation">:</span>        li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n <span class="token operator">-</span> n <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">10</span>    <span class="token keyword">return</span> li<span class="token keyword">def</span> <span class="token function">isHappy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :type n: int    :rtype: bool    """</span>    <span class="token comment" spellcheck="true">#对n我们需要得到他的各个位</span>    li <span class="token operator">=</span> self<span class="token punctuation">.</span>getNumbers<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>    <span class="token keyword">while</span> n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span>            sum <span class="token operator">+=</span> i<span class="token operator">*</span>i        li <span class="token operator">=</span> self<span class="token punctuation">.</span>getNumbers<span class="token punctuation">(</span>sum<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>        <span class="token keyword">import</span> time        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>然后输出的结果：<br>①当测试的数据等于189</p><blockquote><p>[9, 8, 1]<br>[6, 4, 1]<br>[3, 5]<br>[4, 3]<br>[5, 2]<br>[9, 2]<br>[5, 8]<br>[9, 8]<br>[5, 4, 1]<br>[2, 4]<br>[0, 2]<br>[4]<br>[6, 1]<br>[7, 3]<br>[8, 5]<br>[9, 8]<br>[5, 4, 1]<br>不难看出这是一个循环</p></blockquote><p>②再次随机取一个数658</p><blockquote><p>[8, 5, 6]<br>[5, 2, 1]<br>[0, 3]<br>[9]<br>[1, 8]<br>[5, 6]<br>[1, 6]<br>[7, 3]<br>[8, 5]<br>[9, 8]<br>[5, 4, 1]</p></blockquote><p>发现虽然是循环但是，取值的情况真的很多。所以我们不妨，将之加入到列表中，每次判断是否存在。</p><p>然后我们的代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> n<span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n <span class="token operator">-</span> n <span class="token operator">//</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">10</span>        <span class="token keyword">return</span> li    <span class="token keyword">def</span> <span class="token function">isHappy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type n: int        :rtype: bool        """</span>        <span class="token comment" spellcheck="true">#对n我们需要得到他的各个位</span>        li <span class="token operator">=</span> self<span class="token punctuation">.</span>getNumbers<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> n<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">:</span>            n <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> li<span class="token punctuation">:</span>                n <span class="token operator">+=</span> i<span class="token operator">*</span>i            li <span class="token operator">=</span> self<span class="token punctuation">.</span>getNumbers<span class="token punctuation">(</span>n<span class="token punctuation">)</span>            <span class="token keyword">if</span> li <span class="token operator">not</span> <span class="token keyword">in</span> result<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>li<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 36 ms, 在Happy Number的Python提交中击败了80.61% 的用户<br>内存消耗 : 11.5 MB, 在Happy Number的Python提交中击败了36.44% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>36 ms</td><td>11.5MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-242 | 有效的字母异位词</title>
      <link href="/2019/04/leetcode-242/"/>
      <url>/2019/04/leetcode-242/</url>
      
        <content type="html"><![CDATA[<h2 id="242-有效的字母异位词（Valid-Anagram）"><a href="#242-有效的字母异位词（Valid-Anagram）" class="headerlink" title="242. 有效的字母异位词（Valid Anagram）"></a>242. 有效的字母异位词（Valid Anagram）</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的一个字母异位词。</p><blockquote><p><span>示例1：</span><br>输入: s = “anagram”, t = “nagaram”<br>输出: true<br><span>示例2：</span><br>输入: s = “rat”, t = “car”<br>输出: false<br><span>说明：</span><br>你可以假设字符串只包含小写字母。</p></blockquote><blockquote><p><span>进阶：</span><br>如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-数据装入字典中，两个字符串对应的字典比较"><a href="#方法一：-数据装入字典中，两个字符串对应的字典比较" class="headerlink" title="方法一： 数据装入字典中，两个字符串对应的字典比较"></a>方法一： 数据装入字典中，两个字符串对应的字典比较</h3><p>长度不等，直接返回False</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type t: str        :rtype: bool        """</span>        s_len<span class="token punctuation">,</span> t_len <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">if</span> s_len<span class="token operator">!=</span>t_len<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        s_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>            s_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        t_dict <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> t<span class="token punctuation">:</span>            t_dict<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> s_dict<span class="token operator">!=</span>t_dict<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> </code></pre><blockquote><p><span>结果：</span><br>执行用时 : 100 ms, 在Valid Anagram的Python提交中击败了17.09% 的用户<br>内存消耗 : 12.5 MB, 在Valid Anagram的Python提交中击败了43.88% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>100 ms</td><td>12.5MB</td><td>python</td></tr></table><h3 id="方法二：观察特色"><a href="#方法二：观察特色" class="headerlink" title="方法二：观察特色"></a>方法二：观察特色</h3><p>如果两个字符串相等，那么我们对应的所有的字符集合应该是一样的。<br>这里我们使用count函数来统计。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type t: str        :rtype: bool        """</span>        s_len<span class="token punctuation">,</span> t_len <span class="token operator">=</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">if</span> s_len<span class="token operator">!=</span>t_len<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        se <span class="token operator">=</span> set<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> se<span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!=</span>t<span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span> </code></pre><blockquote><p><span>结果：</span><br>执行用时 : 36 ms, 在Valid Anagram的Python提交中击败了99.50% 的用户<br>内存消耗 : 12.8 MB, 在Valid Anagram的Python提交中击败了29.64% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>36 ms</td><td>12.8MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-350 | 两个数组的交集II</title>
      <link href="/2019/04/leetcode-350/"/>
      <url>/2019/04/leetcode-350/</url>
      
        <content type="html"><![CDATA[<h2 id="350-两个数组的交集-II（Intersection-of-Two-Arrays-II）"><a href="#350-两个数组的交集-II（Intersection-of-Two-Arrays-II）" class="headerlink" title="350. 两个数组的交集 II（Intersection of Two Arrays II）"></a>350. 两个数组的交集 II（Intersection of Two Arrays II）</h2><p>给定两个数组，编写一个函数来计算它们的交集。</p><blockquote><p><span>示例 1：</span><br>输入: nums1 = [1,2,2,1], nums2 = [2,2]<br>输出: [2,2]<br><span>示例 2：</span><br>输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>输出: [4,9]</p></blockquote><blockquote><p><span>说明：</span><br>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。<br>我们可以不考虑输出结果的顺序。<br><span>进阶:</span><br>如果给定的数组已经排好序呢？你将如何优化你的算法？<br>如果 nums1 的大小比 nums2 小很多，哪种方法更优？<br>如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-和上题类似"><a href="#方法一：-和上题类似" class="headerlink" title="方法一： 和上题类似"></a>方法一： 和上题类似</h3><p>这里不同的是，我们需要考虑到数据出现的频次。上一题中是单纯的求交集，而不考虑相同的元素的情况。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intersect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums1: List[int]        :type nums2: List[int]        :rtype: List[int]        """</span>        di <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#将数据nums1中的数据，全部封装到字典中</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums1<span class="token punctuation">:</span>            di<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> di<span class="token punctuation">.</span>get<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true">#遍历找相同</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> nums2<span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token keyword">in</span> di <span class="token operator">and</span> di<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                di<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token keyword">return</span> re</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 52 ms, 在Intersection of Two Arrays II的Python提交中击败了95.21% 的用户<br>内存消耗 : 11.8 MB, 在Intersection of Two Arrays II的Python提交中击败了24.69% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>52 ms</td><td>11.8MB</td><td>python</td></tr></table><h3 id="方法二：在评论区找到的骚操作"><a href="#方法二：在评论区找到的骚操作" class="headerlink" title="方法二：在评论区找到的骚操作"></a>方法二：在评论区找到的骚操作</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intersect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums1: List[int]        :type nums2: List[int]        :rtype: List[int]        """</span>        <span class="token comment" spellcheck="true">#先集合化，就两个集合的交集</span>        inter <span class="token operator">=</span> set<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token operator">&amp;</span> set<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span>        l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> inter<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#计数，记录最小的</span>            l <span class="token operator">+=</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> min<span class="token punctuation">(</span>nums1<span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> nums2<span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> l</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 72 ms, 在Intersection of Two Arrays II的Python提交中击败了52.66% 的用户<br>内存消耗 : 11.9 MB, 在Intersection of Two Arrays II的Python提交中击败了17.79% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>72 ms</td><td>11.9MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-349 | 两个数组的交集</title>
      <link href="/2019/04/leetcode-349/"/>
      <url>/2019/04/leetcode-349/</url>
      
        <content type="html"><![CDATA[<h2 id="349-两个数组的交集（Intersection-of-Two-Arrays）"><a href="#349-两个数组的交集（Intersection-of-Two-Arrays）" class="headerlink" title="349. 两个数组的交集（Intersection of Two Arrays）"></a>349. 两个数组的交集（Intersection of Two Arrays）</h2><p>给定两个数组，编写一个函数来计算它们的交集。</p><blockquote><p><span>示例1：</span><br>输入: nums1 = [1,2,2,1], nums2 = [2,2]<br>输出: [2]<br><span>示例2：</span><br>输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>输出: [9,4]<br><span>说明：</span><br>输出结果中的每个元素一定是唯一的。<br>我们可以不考虑输出结果的顺序。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-去重，然后判断是否在另一个容器中"><a href="#方法一：-去重，然后判断是否在另一个容器中" class="headerlink" title="方法一： 去重，然后判断是否在另一个容器中"></a>方法一： 去重，然后判断是否在另一个容器中</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intersection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums1: List[int]        :type nums2: List[int]        :rtype: List[int]        """</span>        s1 <span class="token operator">=</span> set<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span>        re <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums2<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> s1<span class="token punctuation">:</span>               re<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>re<span class="token punctuation">)</span><span class="token punctuation">)</span>   </code></pre><blockquote><p><span>结果：</span><br>执行用时 : 80 ms, 在Intersection of Two Arrays的Python提交中击败了18.32% 的用户<br>内存消耗 : 12 MB, 在Intersection of Two Arrays的Python提交中击败了15.75% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>80 ms</td><td>12MB</td><td>python</td></tr></table><h3 id="方法二：使用集合特性，取交集"><a href="#方法二：使用集合特性，取交集" class="headerlink" title="方法二：使用集合特性，取交集"></a>方法二：使用集合特性，取交集</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">intersection</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums1: List[int]        :type nums2: List[int]        :rtype: List[int]        """</span>        <span class="token keyword">return</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span> <span class="token operator">&amp;</span> set<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 48 ms, 在Intersection of Two Arrays的Python提交中击败了100.00% 的用户<br>内存消耗 : 12 MB, 在Intersection of Two Arrays的Python提交中击败了15.34% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>48 ms</td><td>12MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-76 | 最小覆盖子串</title>
      <link href="/2019/04/leetcode-76/"/>
      <url>/2019/04/leetcode-76/</url>
      
        <content type="html"><![CDATA[<h2 id="76-最小覆盖子串（Find-All-Anagrams-in-a-String）"><a href="#76-最小覆盖子串（Find-All-Anagrams-in-a-String）" class="headerlink" title="76. 最小覆盖子串（Find All Anagrams in a String）"></a>76. 最小覆盖子串（Find All Anagrams in a String）</h2><p>给定一个字符串 S 和一个字符串 T，请在 S 中找出包含 T 所有字母的最小子串。</p><blockquote><p><span>示例 :</span><br>输入: S = “ADOBECODEBANC”, T = “ABC”<br>输出: “BANC”<br><span>说明：</span></p><ul><li>如果 S 中不存这样的子串，则返回空字符串 “”。</li><li>如果 S 中存在这样的子串，我们保证它是唯一的答案。</li></ul></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-滑动窗口"><a href="#方法一：-滑动窗口" class="headerlink" title="方法一： 滑动窗口"></a>方法一： 滑动窗口</h3><pre class=" language-python"><code class="language-python"></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 272 ms, 在Find All Anagrams in a String的Python提交中击败了6.45% 的用户<br>内存消耗 : 12.7 MB, 在Find All Anagrams in a String的Python提交中击败了38.57% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>272 ms</td><td>12.7MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 困难难度 </tag>
            
            <tag> 暂时无好思路 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-438 | 找到字符串中所有字母异位词</title>
      <link href="/2019/04/leetcode-438/"/>
      <url>/2019/04/leetcode-438/</url>
      
        <content type="html"><![CDATA[<h2 id="438-找到字符串中所有字母异位词（Find-All-Anagrams-in-a-String）"><a href="#438-找到字符串中所有字母异位词（Find-All-Anagrams-in-a-String）" class="headerlink" title="438. 找到字符串中所有字母异位词（Find All Anagrams in a String）"></a>438. 找到字符串中所有字母异位词（Find All Anagrams in a String）</h2><p>给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。<br>字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。</p><blockquote><p><span>说明：</span><br>字母异位词指字母相同，但排列不同的字符串。<br>不考虑答案输出的顺序。</p></blockquote><blockquote><p><span>示例 1:</span><br>输入:<br>s: “cbaebabacd” p: “abc”<br>输出:<br>[0, 6]<br><span style="color:red;">解释:</span><br>起始索引等于 0 的子串是 “cba”, 它是 “abc” 的字母异位词。<br>起始索引等于 6 的子串是 “bac”, 它是 “abc” 的字母异位词。</p></blockquote><blockquote><p><span>示例 2:</span><br>输入:<br>s: “abab” p: “ab”<br>输出:<br>[0, 1, 2]<br><span style="color:red;">解释:</span><br>起始索引等于 0 的子串是 “ab”, 它是 “ab” 的字母异位词。<br>起始索引等于 1 的子串是 “ba”, 它是 “ab” 的字母异位词。<br>起始索引等于 2 的子串是 “ab”, 它是 “ab” 的字母异位词。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-滑动窗口"><a href="#方法一：-滑动窗口" class="headerlink" title="方法一： 滑动窗口"></a>方法一： 滑动窗口</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :type p: str        :rtype: List[int]        """</span>        <span class="token comment" spellcheck="true">#固定的滑动窗口，长度为len(p)</span>        <span class="token comment" spellcheck="true">#每次判断都是走一个滑动窗口的距离</span>        i<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span>        length <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">#结果列表</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#暂时存放的数据字典，因为考虑到有重复字母</span>        temp <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#需要比较的数据，我们也封装到字典中</span>        dp <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        k <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> k<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> dp<span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            k<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">while</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#j移动到窗口中的最后一个字符</span>            <span class="token keyword">while</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> length<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#窗口右边界扩展1</span>                j<span class="token operator">+=</span><span class="token number">1</span>                <span class="token comment" spellcheck="true">#窗口长度+1</span>                length <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token comment" spellcheck="true"># 数据装入, 字典，我不删除元素，置数值为0模拟删除</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> temp <span class="token operator">or</span> temp<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    temp<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    temp<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 退出循环，窗口长度满足条件</span>            <span class="token keyword">if</span> length <span class="token operator">==</span> len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 判断是否相等</span>                <span class="token comment" spellcheck="true">#这里我们将模拟删除的删除</span>                tks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> tk<span class="token punctuation">,</span> tv <span class="token keyword">in</span> temp<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> tv<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        tks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tk<span class="token punctuation">)</span>                <span class="token keyword">for</span> mk <span class="token keyword">in</span> tks<span class="token punctuation">:</span>                    temp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>mk<span class="token punctuation">)</span>                <span class="token keyword">if</span> temp <span class="token operator">==</span> dp<span class="token punctuation">:</span>                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 本次固定大小窗口判断完毕</span>                <span class="token comment" spellcheck="true"># 窗口后移,i+=1,将原位置元素模拟删除</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> temp<span class="token punctuation">:</span>                    <span class="token keyword">if</span> temp<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                        temp<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        temp<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>                i<span class="token operator">+=</span><span class="token number">1</span>                length <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> result</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 272 ms, 在Find All Anagrams in a String的Python提交中击败了6.45% 的用户<br>内存消耗 : 12.7 MB, 在Find All Anagrams in a String的Python提交中击败了38.57% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>272 ms</td><td>12.7MB</td><td>python</td></tr></table>这里我编写的代码效率很不高，也很冗余。下面我思考看看能不能简化。另：逐个加入，然后判断，会超时。<h3 id="代码简化"><a href="#代码简化" class="headerlink" title="代码简化"></a>代码简化</h3><p>数据封装的代码可以简化：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#需要比较的数据，我们也封装到字典中</span>dp <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> k<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> dp<span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    k<span class="token operator">+=</span><span class="token number">1</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#需要比较的数据，我们也封装到字典中</span>dp <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> pv <span class="token keyword">in</span> p<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#get函数，如果不存在返回0</span>    dp<span class="token punctuation">[</span>pv<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pv<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>虽然看似简化了代码，但是实际上效率还是没有较高的提升。</p><hr><p>算了，二天再想。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-209 | 长度最小的子数组</title>
      <link href="/2019/04/leetcode-209/"/>
      <url>/2019/04/leetcode-209/</url>
      
        <content type="html"><![CDATA[<h1 id="209-长度最小的子数组（Minimum-Size-Subarray-Sum）"><a href="#209-长度最小的子数组（Minimum-Size-Subarray-Sum）" class="headerlink" title="209. 长度最小的子数组（Minimum Size Subarray Sum）"></a>209. 长度最小的子数组（Minimum Size Subarray Sum）</h1><p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。</p><blockquote><p><span>Example:</span><br>输入: s = 7, nums = [2,3,1,2,4,3]<br>输出: 2<br>解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。<br><span>进阶:</span><br>如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。</p></blockquote><h2 id="方法一：滑动窗口"><a href="#方法一：滑动窗口" class="headerlink" title="方法一：滑动窗口"></a>方法一：滑动窗口</h2><p>这里的窗口就是数组中连续子数组的和&gt;=s，记录窗口大小，然后滑动窗口。找最小窗口。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: int        :type nums: List[int]        :rtype: int        """</span>        <span class="token comment" spellcheck="true">#定义窗口[i,j]</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#因为初始窗口应该不包含任何值，故而j=-1,表示当前窗口为None</span>        sum  <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment" spellcheck="true"># 记录当前窗口的元素的和</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#记录当前窗口的长度，初始化为最大值+1，实际取不到</span>        <span class="token comment" spellcheck="true">#只要滑动窗口的左窗口能够取值，右边就能取值，大不了一样</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> sum <span class="token operator">&lt;</span> s<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#[2,3,1,2,4,3]</span>                <span class="token keyword">if</span>  j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                    j<span class="token operator">+=</span><span class="token number">1</span>                    sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token comment" spellcheck="true">#否则，也就是最后的窗口sum&lt;s，而我们循环退出的条件是i==len(nums),故而我们操作i，使他退出</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                length <span class="token operator">=</span> min<span class="token punctuation">(</span>length<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#print("i= %s, j= %s, length = %s ,nums[%s]=%s, sum=%s" % (i, j, length, i, nums[i], sum))</span>                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span> length<span class="token operator">==</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">return</span> length</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 88 ms, 在Minimum Size Subarray Sum的Python提交中击败了82.19% 的用户<br>内存消耗 : 13.8 MB, 在Minimum Size Subarray Sum的Python提交中击败了40.00% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>88 ms</td><td>13.8MB</td><td>python</td></tr></table>但是，上面的代码的滑动窗口的可理解性并不好。我们这里使用使用另一种实现方式滑动窗口。### 方法二：滑动窗口<p><span style="color:red;font-size:20px;border:1px solid #ddd;background-color:#eee;padding:3px;">这里是比较好的滑动窗口的解决方法的案例代码!</span></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: int        :type nums: List[int]        :rtype: int        """</span>       <span class="token comment" spellcheck="true">#定义滑动窗口[i,j]  i=0,j=-1 表示当前滑动窗口无元素</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#窗口的长度,初始长度是len(s)+1，取不到</span>        lenght <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#窗口中数据的和</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">#窗口的前端扫描到末尾为止</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">and</span> sum <span class="token operator">&lt;</span> s<span class="token punctuation">:</span>                j<span class="token operator">+=</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#加入一个元素到窗口中</span>                sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token comment" spellcheck="true">#窗口移动完成，判断是否满足sum>=s，满足就记录长度</span>            <span class="token keyword">if</span> sum <span class="token operator">>=</span> s<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#j-i+1是因为，如果当前窗口是[0],那么窗口大小是1，即j-i+1</span>                lenght <span class="token operator">=</span> min<span class="token punctuation">(</span>lenght<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> lenght<span class="token operator">==</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">return</span> lenght</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 160 ms, 在Minimum Size Subarray Sum的Python提交中击败了13.70% 的用户<br>内存消耗 : 14 MB, 在Minimum Size Subarray Sum的Python提交中击败了18.24% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>160 ms</td><td>14MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-11 | 盛最多水的容器 中等难度</title>
      <link href="/2019/04/leetcode-11/"/>
      <url>/2019/04/leetcode-11/</url>
      
        <content type="html"><![CDATA[<h2 id="11-盛最多水的容器（Container-With-Most-Water）"><a href="#11-盛最多水的容器（Container-With-Most-Water）" class="headerlink" title="11. 盛最多水的容器（Container With Most Water）"></a>11. 盛最多水的容器（Container With Most Water）</h2><p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><blockquote><p><span>说明：</span><br>你不能倾斜容器，且 n 的值至少为 2。</p></blockquote><p><img src="/images/201904/question_11.jpg" alt="tu" title="11题图示"><br>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><blockquote><p><span>示例：</span><br>输入: [1,8,6,2,5,4,8,3,7]<br>输出: 49</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-暴力法"><a href="#方法一：-暴力法" class="headerlink" title="方法一： 暴力法"></a>方法一： 暴力法</h3><p>两重循环遍历所有元素，然后计算面积，保留最大面积。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type height: List[int]        :rtype: int        """</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> len<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>        m <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            j<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;=</span>i<span class="token punctuation">:</span>                <span class="token keyword">if</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    m <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    m<span class="token operator">=</span>max<span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span>                j<span class="token operator">+=</span><span class="token number">1</span>            i<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> m</code></pre><blockquote><p><span>结果：</span><br>超时</p></blockquote><h3 id="方法二：双指针操作"><a href="#方法二：双指针操作" class="headerlink" title="方法二：双指针操作"></a>方法二：双指针操作</h3><p>定义<code>i</code>，<code>j</code>两个指针，分别指向首尾，在遍历的过程中计算面积。两线段之间形成的区域总是会受到其中较短那条长度的限制。此外，两线段距离越远，得到的面积就越大。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type height: List[int]        :rtype: int        """</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        m <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">:</span>            m <span class="token operator">=</span> max<span class="token punctuation">(</span>m<span class="token punctuation">,</span> min<span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                j <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> m</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 236 ms, 在Container With Most Water的Python提交中击败了7.53% 的用户<br>内存消耗 : 13 MB, 在Container With Most Water的Python提交中击败了31.82% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>236 ms</td><td>13MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-345 | 反转字符串中的元音字母</title>
      <link href="/2019/04/leetcode-345/"/>
      <url>/2019/04/leetcode-345/</url>
      
        <content type="html"><![CDATA[<h2 id="345-反转字符串中的元音字母（Reverse-Vowels-of-a-String）"><a href="#345-反转字符串中的元音字母（Reverse-Vowels-of-a-String）" class="headerlink" title="345. 反转字符串中的元音字母（Reverse Vowels of a String）"></a>345. 反转字符串中的元音字母（Reverse Vowels of a String）</h2><p>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p><blockquote><p><span>示例1：</span><br>输入: “hello”<br>输出: “holle”<br><span>示例2：</span><br>输入: “leetcode”<br>输出: “leotcede”<br><span>说明</span><br>元音字母不包含字母”y”。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-reverse函数"><a href="#方法一：-reverse函数" class="headerlink" title="方法一： reverse函数"></a>方法一： reverse函数</h3><p><code>python</code>中有<code>reverse</code>函数，用于列表的操作。这里我们也直接使用这种方式。</p><pre class=" language-python"><code class="language-python"></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 232 ms, 在Reverse String的Python提交中击败了65.80% 的用户<br>内存消耗 : 18.6 MB, 在Reverse String的Python提交中击败了79.84% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>232 ms</td><td>18.6MB</td><td>python</td></tr></table><h3 id="方法二：我们自己定义指针操作"><a href="#方法二：我们自己定义指针操作" class="headerlink" title="方法二：我们自己定义指针操作"></a>方法二：我们自己定义指针操作</h3><p>定义<code>i</code>，<code>j</code>两个指针，分别指向首尾，在遍历的过程中，不是元音就<code>++</code>或者<code>--</code>，如果是，就等到两个都是元音的时候交换，知道<code>i==j</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isY</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s<span class="token operator">==</span><span class="token string">'a'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'e'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'i'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'o'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'u'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'A'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'E'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'I'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'O'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'U'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">reverseVowels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        s <span class="token operator">=</span> list<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>isY<span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>isY<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i<span class="token operator">+=</span><span class="token number">1</span>                j<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>isY<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>isY<span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                j<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><p>这里需要注意的是：<code>while i&lt;j:</code>而不是<code>while i&lt;=j:</code><br>这里有个例子可以说明：<code>s=&quot;.a&quot;</code><br><code>i=0，j=1</code><br><code>s[i]</code>不是元音，<code>i+=1 i=1</code><br>此时满足<code>i&lt;=j</code>，循环继续，<br>此时<code>i</code>，<code>j</code>同位。那么交换后，<code>i++</code>，<code>j--</code>，但是这种方式很不好。<br>我自我感觉<code>while</code>中循环的逻辑不明，有错误一样。</p><blockquote><p><span>结果：</span><br>执行用时 : 376 ms, 在Reverse String的Python提交中击败了13.38% 的用户<br>内存消耗 : 18.7 MB, 在Reverse String的Python提交中击败了60.28% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>376 ms</td><td>18.7MB</td><td>python</td></tr></table><h3 id="方法二：改进"><a href="#方法二：改进" class="headerlink" title="方法二：改进"></a>方法二：改进</h3><p>还是<code>i</code>，<code>j</code>指针，但是，我这里不是一步一步的移动，我是一次性判断。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isY</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s<span class="token operator">==</span><span class="token string">'a'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'e'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'i'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'o'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'u'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'A'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'E'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'I'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'O'</span> <span class="token operator">or</span> s<span class="token operator">==</span><span class="token string">'U'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">reverseVowels</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: str        """</span>        s <span class="token operator">=</span> list<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">:</span>            <span class="token keyword">while</span> i<span class="token operator">&lt;</span>j <span class="token operator">and</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>isY<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">while</span> i<span class="token operator">&lt;</span>j <span class="token operator">and</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>isY<span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                j<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">if</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">:</span>                s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i<span class="token operator">+=</span><span class="token number">1</span>                j<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 180 ms, 在Reverse Vowels of a String的Python提交中击败了51.43% 的用户<br>内存消耗 : 13.9 MB, 在Reverse Vowels of a String的Python提交中击败了33.13% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>180 ms</td><td>13.9MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-344 | 反转字符串</title>
      <link href="/2019/04/leetcode-344/"/>
      <url>/2019/04/leetcode-344/</url>
      
        <content type="html"><![CDATA[<h2 id="344-反转字符串（-Reverse-String）"><a href="#344-反转字符串（-Reverse-String）" class="headerlink" title="344. 反转字符串（ Reverse String）"></a>344. 反转字符串（ Reverse String）</h2><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。<br>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。<br>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><blockquote><p><span>示例1：</span><br>输入：[“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]<br><span>示例2：</span><br>输入：[“H”,”a”,”n”,”n”,”a”,”h”]<br>输出：[“h”,”a”,”n”,”n”,”a”,”H”]</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-reverse函数"><a href="#方法一：-reverse函数" class="headerlink" title="方法一： reverse函数"></a>方法一： reverse函数</h3><p><code>python</code>中有<code>reverse</code>函数，用于列表的操作。这里我们也直接使用这种方式。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: List[str]        :rtype: None Do not return anything, modify s in-place instead.        """</span>        s<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 232 ms, 在Reverse String的Python提交中击败了65.80% 的用户<br>内存消耗 : 18.6 MB, 在Reverse String的Python提交中击败了79.84% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>232 ms</td><td>18.6MB</td><td>python</td></tr></table><h3 id="方法二：我们自己定义指针操作"><a href="#方法二：我们自己定义指针操作" class="headerlink" title="方法二：我们自己定义指针操作"></a>方法二：我们自己定义指针操作</h3><p>定义<code>i</code>，<code>j</code>两个指针，分别指向首尾，在遍历的过程中，交换。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: List[str]        :rtype: None Do not return anything, modify s in-place instead.        """</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>j<span class="token punctuation">:</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i<span class="token operator">+=</span><span class="token number">1</span>            j<span class="token operator">-=</span><span class="token number">1</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 376 ms, 在Reverse String的Python提交中击败了13.38% 的用户<br>内存消耗 : 18.7 MB, 在Reverse String的Python提交中击败了60.28% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>376 ms</td><td>18.7MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-125 | 验证回文串</title>
      <link href="/2019/04/leetcode-125/"/>
      <url>/2019/04/leetcode-125/</url>
      
        <content type="html"><![CDATA[<h2 id="125-验证回文串（Valid-Palindrome）"><a href="#125-验证回文串（Valid-Palindrome）" class="headerlink" title="125. 验证回文串（Valid Palindrome）"></a>125. 验证回文串（Valid Palindrome）</h2><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。<br>说明：本题中，我们将空字符串定义为有效的回文串。</p><blockquote><p><span>示例1：</span><br>输入: “A man, a plan, a canal: Panama”<br>输出: true<br><span>示例2：</span><br>输入: “race a car”<br>输出: false</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-去除其余非字母，然后双指针判断"><a href="#方法一：-去除其余非字母，然后双指针判断" class="headerlink" title="方法一： 去除其余非字母，然后双指针判断"></a>方法一： 去除其余非字母，然后双指针判断</h3><p>去除空格、逗号、冒号等，然后用两个指针<code>i</code>，<code>j</code>来遍历判断。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type s: str        :rtype: bool        """</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        li<span class="token operator">=</span><span class="token string">''</span>        i<span class="token punctuation">,</span> j<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">or</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>               li<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i<span class="token operator">+=</span><span class="token number">1</span>        k <span class="token operator">=</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;=</span>k<span class="token punctuation">:</span>            <span class="token keyword">if</span> li<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>li<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                j<span class="token operator">+=</span><span class="token number">1</span>                k<span class="token operator">-=</span><span class="token number">1</span>        <span class="token keyword">return</span> <span class="token boolean">True</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 396 ms, 在Valid Palindrome的Python提交中击败了13.90% 的用户<br>内存消耗 : 13.2 MB, 在Valid Palindrome的Python提交中击败了33.37% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>396 ms</td><td>13.2MB</td><td>python</td></tr></table><h3 id="方法二：优化方法一"><a href="#方法二：优化方法一" class="headerlink" title="方法二：优化方法一"></a>方法二：优化方法一</h3><p>方法一中是先得到无特殊字符的字符串，然后，我们定义两个指针<code>i</code>，<code>j</code>分别从前到后扫描处理后的字符串。<br>但是，其实可以采用更简单的方式判断。因为这是一个字符串，如果是回文串，那么正向和反向的字母相同，那么我们可以直接反向处理后的字符串，然后<code>==</code>判断即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        li <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                li<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            i<span class="token operator">+=</span><span class="token number">1</span>        li <span class="token operator">=</span> li<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> li<span class="token operator">==</span>li<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 88 ms, 在Valid Palindrome的Python3提交中击败了55.73% 的用户<br>内存消耗 : 13.4 MB, 在Valid Palindrome的Python3提交中击败了81.85% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>88 ms</td><td>13.4MB</td><td>python</td></tr></table>### 方法三：优化方法一使用python的内建函数filter<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        t <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>filter<span class="token punctuation">(</span>str<span class="token punctuation">.</span>isalnum<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> t <span class="token operator">==</span> t<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 64 ms, 在Valid Palindrome的Python3提交中击败了98.88% 的用户<br>内存消耗 : 13.9 MB, 在Valid Palindrome的Python3提交中击败了51.55% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>64 ms</td><td>13.9MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-167 | 两个数之和II-输入有序数组</title>
      <link href="/2019/04/leetcode-167/"/>
      <url>/2019/04/leetcode-167/</url>
      
        <content type="html"><![CDATA[<h2 id="167-两数之和-II-输入有序数组（-Two-Sum-II-Input-array-is-sorted）"><a href="#167-两数之和-II-输入有序数组（-Two-Sum-II-Input-array-is-sorted）" class="headerlink" title="167. 两数之和 II - 输入有序数组（ Two Sum II - Input array is sorted）"></a>167. 两数之和 II - 输入有序数组（ Two Sum II - Input array is sorted）</h2><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。<br>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p><blockquote><p><span>说明：</span><br>返回的下标值（index1 和 index2）不是从零开始的。<br>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。<br><span>示例：</span><br>输入: numbers = [2, 7, 11, 15], target = 9<br>输出: [1,2]<br>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-去重后直接查找"><a href="#方法一：-去重后直接查找" class="headerlink" title="方法一： 去重后直接查找"></a>方法一： 去重后直接查找</h3><p>由于答案唯一，那么我们可以使用集合，去除重复元素，然后找到目标分解值，然后找位置，可以用二分查找。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_ele</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        low<span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> low<span class="token operator">&lt;=</span>high<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 0 1 2 3 4 5 6 7</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>k<span class="token punctuation">:</span>                <span class="token keyword">return</span> mid            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>k<span class="token punctuation">:</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token punctuation">:</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type numbers: List[int]        :type target: int        :rtype: List[int]        """</span>        se <span class="token operator">=</span> set<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> se<span class="token punctuation">:</span>            n <span class="token operator">=</span> target <span class="token operator">-</span> i            <span class="token keyword">if</span> n <span class="token keyword">in</span> se<span class="token punctuation">:</span>                <span class="token keyword">break</span>        one <span class="token operator">=</span> self<span class="token punctuation">.</span>find_ele<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        two <span class="token operator">=</span> self<span class="token punctuation">.</span>find_ele<span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#如果可以拆分成：两个相等的数字</span>        <span class="token keyword">if</span> one<span class="token operator">==</span>two<span class="token punctuation">:</span>            <span class="token keyword">if</span> one<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>one<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> two<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> one<span class="token operator">==</span>len<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> numbers<span class="token punctuation">[</span>one<span class="token punctuation">]</span><span class="token operator">==</span>numbers<span class="token punctuation">[</span>one<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span>one<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">elif</span> numbers<span class="token punctuation">[</span>one<span class="token punctuation">]</span><span class="token operator">==</span>numbers<span class="token punctuation">[</span>one<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">[</span>one<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> one<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#如果拆分的两个数不等</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> one <span class="token operator">></span> two<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>two<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> one<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">elif</span> one <span class="token operator">&lt;</span> two<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>one<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> two<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>one<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> two <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 72 ms, 在Two Sum II - Input array is sorted的Python提交中击败了96.83% 的用户<br>内存消耗 : 12 MB, 在Two Sum II - Input array is sorted的Python提交中击败了25.87% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>72 ms</td><td>12MB</td><td>python</td></tr></table><h3 id="方法二：使用两个指针，前后扫描"><a href="#方法二：使用两个指针，前后扫描" class="headerlink" title="方法二：使用两个指针，前后扫描"></a>方法二：使用两个指针，前后扫描</h3><p>也就是定义<code>i</code>，<code>j</code>两个指针，在遍历的过程中，我们判断对应的数相加和<code>target</code>的关系。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> numbers<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type numbers: List[int]        :type target: int        :rtype: List[int]        """</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        t <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>j <span class="token operator">and</span> t<span class="token operator">!=</span>target<span class="token punctuation">:</span>            <span class="token keyword">if</span> t <span class="token operator">></span> target<span class="token punctuation">:</span>                j<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">elif</span> t <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>                i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>            t <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 372 ms, 在Two Sum II - Input array is sorted的Python提交中击败了8.99% 的用户<br>内存消耗 : 11.9 MB, 在Two Sum II - Input array is sorted的Python提交中击败了35.99% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>372 ms</td><td>11.9MB</td><td>python</td></tr></table>虽然，代码减少了很多，但是效率不怎么高。其实，也不难理解：这里采用一趟遍历，那么时间复杂度是`O(n)`，而二分查找的事件复杂度是`O(log2^n)`，显然在数据比较多的时候，它们所需要的基本操作数是不同的。不在一个量级。]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-215 | 数组中的第K个最大元素</title>
      <link href="/2019/04/leetcode-215/"/>
      <url>/2019/04/leetcode-215/</url>
      
        <content type="html"><![CDATA[<h2 id="215-数组中的第K个最大元素（Kth-Largest-Element-in-an-Array）"><a href="#215-数组中的第K个最大元素（Kth-Largest-Element-in-an-Array）" class="headerlink" title="215. 数组中的第K个最大元素（Kth Largest Element in an Array）"></a>215. 数组中的第K个最大元素（Kth Largest Element in an Array）</h2><p>在未排序的数组中找到第<code>k</code> 个最大的元素。请注意，你需要找的是数组排序后的第<code>k</code>个最大的元素，而不是第<code>k</code>个不同的元素。</p><blockquote><p><span>示例 1：</span><br>输入: [3,2,1,5,6,4] 和 k = 2<br>输出: 5<br><span>示例 2：</span><br>输入: [3,2,3,1,2,4,5,5,6] 和 k = 4<br>输出: 4<br><span>说明：</span><br>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-大冒泡排序"><a href="#方法一：-大冒泡排序" class="headerlink" title="方法一： 大冒泡排序"></a>方法一： 大冒泡排序</h3><p>采用大冒泡，加入计数变量，到了第<code>k</code>个就返回。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :rtype: int        """</span>        i<span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>            j<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                j<span class="token operator">+=</span><span class="token number">1</span>            i<span class="token operator">-=</span><span class="token number">1</span>            count<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> count<span class="token operator">==</span>k<span class="token punctuation">:</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 2180 ms, 在Kth Largest Element in an Array的Python提交中击败了7.34% 的用户<br>内存消耗 : 12.2 MB, 在Kth Largest Element in an Array的Python提交中击败了46.03% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>2180 ms</td><td>12.2MB</td><td>python</td></tr></table>不难看出，效率很不好。<h3 id="方法二：使用python排序函数"><a href="#方法二：使用python排序函数" class="headerlink" title="方法二：使用python排序函数"></a>方法二：使用python排序函数</h3><p>上面的代码时间复杂度是O(n^2)，也就是冒泡排序的时间复杂度。所以说，这里的排序算法的时间复杂度比较大，所以，我们可以采用比较好的排序算法，以提高效率。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span>k<span class="token punctuation">]</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 76 ms, 在Kth Largest Element in an Array的Python提交中击败了81.08% 的用户<br>内存消耗 : 12.1 MB, 在Kth Largest Element in an Array的Python提交中击败了47.57% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>76 ms</td><td>12.1MB</td><td>python</td></tr></table>虽然，效率提高了。但是这可能并不是出题的目的。所以尽量自己思考还有什么排序算法。<h3 id="方法三：利用快速排序思想"><a href="#方法三：利用快速排序思想" class="headerlink" title="方法三：利用快速排序思想"></a>方法三：利用快速排序思想</h3><p>每一趟快速排序，中间轴值总是放在了最终的位置，比如：<br><code>[3,2,3,1,2,4,5,5,6]</code>选取3为轴值，然后，我们可以划分一个序列，并得到3的最终的位置：<br><code>[2,2,1,3,3,4,5,5,6]</code> 轴值为第一个3，然后第一个三的倒数位置是6，故而如果K=2，那么我们的序列就变成了<code>[3,4,5,5,6]</code><br>以这种思想，可以解决问题。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#逆序划分：大的放左边，小的放右边</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">:</span>        pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span>        <span class="token keyword">while</span> low<span class="token operator">&lt;</span>high<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#[3,4,5,6,2,1]</span>            <span class="token keyword">while</span> low<span class="token operator">&lt;</span>high <span class="token operator">and</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token operator">&lt;=</span>pivot<span class="token punctuation">:</span>                high<span class="token operator">-=</span><span class="token number">1</span>            nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span>            <span class="token keyword">while</span> low<span class="token operator">&lt;</span>high <span class="token operator">and</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">>=</span>pivot<span class="token punctuation">:</span>                low<span class="token operator">+=</span><span class="token number">1</span>            nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span>        nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivot        <span class="token keyword">return</span> low    <span class="token keyword">def</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> low<span class="token operator">&lt;=</span>high<span class="token punctuation">:</span>            pivot <span class="token operator">=</span> self<span class="token punctuation">.</span>partition<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>            <span class="token keyword">if</span> pivot<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>k<span class="token punctuation">:</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>pivot<span class="token punctuation">]</span>            <span class="token keyword">elif</span> pivot<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>k<span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>quickSort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivot <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>            <span class="token keyword">elif</span> pivot<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>k<span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>quickSort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pivot<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> k<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type k: int        :rtype: int        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>quickSort<span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 744 ms, 在Kth Largest Element in an Array的Python提交中击败了30.83% 的用户<br>内存消耗 : 16.2 MB, 在Kth Largest Element in an Array的Python提交中击败了10.52% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>744 ms</td><td>16.2MB</td><td>python</td></tr></table><h3 id="方法四：使用大根堆排序思想"><a href="#方法四：使用大根堆排序思想" class="headerlink" title="方法四：使用大根堆排序思想"></a>方法四：使用大根堆排序思想</h3><p>这里先不做讨论。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-75 | 颜色分类</title>
      <link href="/2019/04/leetcode-75/"/>
      <url>/2019/04/leetcode-75/</url>
      
        <content type="html"><![CDATA[<h2 id="75-颜色分类（Sort-Colors）"><a href="#75-颜色分类（Sort-Colors）" class="headerlink" title="75. 颜色分类（Sort Colors）"></a>75. 颜色分类（Sort Colors）</h2><p>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。<br>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</p><blockquote><p><span>注意：</span><br>不能使用代码库中的排序函数来解决这道题。</p></blockquote><blockquote><p><span>示例：</span><br>输入: [2,0,2,1,1,0]<br>输出: [0,0,1,1,2,2]<br><span>进阶：</span></p><ul><li>一个直观的解决方案是使用计数排序的两趟扫描算法。</li><li>首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。</li><li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li></ul></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-暴力法"><a href="#方法一：-暴力法" class="headerlink" title="方法一： 暴力法"></a>方法一： 暴力法</h3><p>也就是包含大量重复元素的列表（或数组）的排序。这里写一个冒泡排序以实现效果：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortColors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: None Do not return anything, modify nums in-place instead.        """</span>        <span class="token comment" spellcheck="true">#j是最终的元素的位置</span>        j <span class="token operator">=</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>              i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token comment" spellcheck="true">#每一趟，找最大值，放在最终的位置，冒泡</span>            <span class="token keyword">while</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                i<span class="token operator">+=</span><span class="token number">1</span>            j<span class="token operator">-=</span><span class="token number">1</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 44 ms, 在Sort Colors的Python提交中击败了21.21% 的用户<br>内存消耗 : 11.6 MB, 在Sort Colors的Python提交中击败了35.81% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>44 ms</td><td>11.6MB</td><td>python</td></tr></table>### 方法二：计数排序由于数组中n个元素，元素是有限的，不妨用遍历的方式，分别记录数组中各个数的个数，然后我们还原原来数组即可。也就是计数排序。``` pythonclass Solution(object):    def sortColors(self, nums):        """        :type nums: List[int]        :rtype: None Do not return anything, modify nums in-place instead.        """        zc,oc,tc = 0,0,0        for i in nums:            if i==0:                zc += 1            elif i==1:                oc += 1            elif i==2:                tc += 1        i = 0        while i<zc: nums[i]="0" i+="1" while i<oc+zc: i<tc+oc+zc: i +="1" ```><span style="color: green;">结果：</span>执行用时 : 36 ms, 在Sort Colors的Python提交中击败了50.76% 的用户内存消耗 : 11.7 MB, 在Sort Colors的Python提交中击败了25.62% 的用户<table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>36 ms</td><td>11.7MB</td><td>python</td></tr></table>### 方法三：‘三路快排’定义两个有效的位置，然后遍历取有效数值，放置到有效位置分为==1，大于1和小于1排序的过程，不妨思考二路快排是如何实现的。这里，我们使用i，k来表示元素前半段和后半段的有效位置，然后我们用j来循环遍历我们的数组，在循环中判断元素的类型，是==1还是大于1或者是小于1，然后分别放置到有效位置中，0放置在前半段，2放置在后半段<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sortColors</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: None Do not return anything, modify nums in-place instead.        """</span>        i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;=</span>k<span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                j<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                k<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i<span class="token operator">+=</span><span class="token number">1</span>                j<span class="token operator">+=</span><span class="token number">1</span></code></pre><blockquote><p><span style="color: green;">结果：</span><br>执行用时 : 36 ms, 在Sort Colors的Python提交中击败了50.76% 的用户<br>内存消耗 : 11.7 MB, 在Sort Colors的Python提交中击败了30.30% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>36 ms</td><td>11.7MB</td><td>python</td></tr></table></zc:>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-80 | 删除排序数组中的重复项 II</title>
      <link href="/2019/04/leetcode-80/"/>
      <url>/2019/04/leetcode-80/</url>
      
        <content type="html"><![CDATA[<h2 id="26-删除排序数组中的重复项II（Remove-Duplicates-from-Sorted-Array-II）"><a href="#26-删除排序数组中的重复项II（Remove-Duplicates-from-Sorted-Array-II）" class="headerlink" title="26. 删除排序数组中的重复项II（Remove Duplicates from Sorted Array II）"></a>26. 删除排序数组中的重复项II（Remove Duplicates from Sorted Array II）</h2><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><blockquote><p><span>示例 1：</span><br>给定 nums = [1,1,1,2,2,3],<br>函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。<br>你不需要考虑数组中超出新长度后面的元素。<br><span>示例 2：</span><br>给定 nums = [0,0,1,1,1,1,2,3,3],<br>函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。<br>你不需要考虑数组中超出新长度后面的元素。<br><span>说明</span><br>为什么返回数值是整数，但输出的答案是数组呢?<br>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。<br>你可以想象内部操作如下:<br>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);<br>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-定有效位置，放置有效元素"><a href="#方法一：-定有效位置，放置有效元素" class="headerlink" title="方法一： 定有效位置，放置有效元素"></a>方法一： 定有效位置，放置有效元素</h3><p>还是使用两个下标，i表示有效位置，j表示扫描过程中，有效的值。<br>使用count作为计数变量，count&lt;2  可取值0 1 也即是，同一个数最多出现两次。<br>和26题有一定的相似度，但是，不同之处在于判别的方式。<br><span style="color:red;">这里的判断是判别这个元素和相邻的前一个元素是否相同</span>，相同则考察计数变量count的值，而有效值<br>始终都在有效的位置猫着。</p><p><img src="/images/201904/2019-04-23_162634.jpg" alt="hello" title="初始位置图示"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        i <span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                count <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> count <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true">#有效位置=有效数值</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                count <span class="token operator">=</span> <span class="token number">0</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            j <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> i</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 60 ms, 在Remove Duplicates from Sorted Array II的Python提交中击败了93.33% 的用户<br>内存消耗 : 11.8 MB, 在Remove Duplicates from Sorted Array II的Python提交中击败了33.47% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>60 ms</td><td>11.8MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-88 | 合并两个有序数组</title>
      <link href="/2019/04/leetcode-88/"/>
      <url>/2019/04/leetcode-88/</url>
      
        <content type="html"><![CDATA[<h2 id="88-合并两个有序数组（Merge-Sorted-Array）"><a href="#88-合并两个有序数组（Merge-Sorted-Array）" class="headerlink" title="88. 合并两个有序数组（Merge Sorted Array）"></a>88. 合并两个有序数组（Merge Sorted Array）</h2><p>给定两个有序整数数组 nums1 和 nums2，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。</p><blockquote><p><span>说明：</span></p><ul><li>初始化 nums1 和 nums2 的元素数量分别为 m 和 n。</li><li>你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。<br><span>示例：</span><br>输入：<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3<br>输出: [1,2,2,3,5,6]</li></ul></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-暴力法"><a href="#方法一：-暴力法" class="headerlink" title="方法一： 暴力法"></a>方法一： 暴力法</h3><p>先将短的列表，并入长的，然后排序一下。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums1: List[int]        :type m: int        :type nums2: List[int]        :type n: int        :rtype: None Do not return anything, modify nums1 in-place instead.        """</span>        j <span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> j <span class="token operator">&lt;=</span> len<span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">></span>m <span class="token operator">and</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>                nums1<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i<span class="token operator">+=</span><span class="token number">1</span>            j<span class="token operator">+=</span><span class="token number">1</span>        nums1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 36 ms, 在Merge Sorted Array的Python提交中击败了99.37% 的用户<br>内存消耗 : 11.8 MB, 在Merge Sorted Array的Python提交中击败了21.79% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>36 ms</td><td>11.8MB</td><td>python</td></tr></table>### 对上面的代码优化上面的代码，不好之处在于：在 `while j <= len(nums1):`中，跑了空趟子。这里我们直接解决： <pre><code class="python">class Solution(object):    def merge(self, nums1, m, nums2, n):        &quot;&quot;&quot;        :type nums1: List[int]        :type m: int        :type nums2: List[int]        :type n: int        :rtype: None Do not return anything, modify nums1 in-place instead.        &quot;&quot;&quot;        i,j = m , 0        while j&lt;n:            nums1[i] = nums2[j]            i+=1            j+=1        nums1.sort()</code><blockquote><p><span style="color: green;">结果：</span><br>执行用时 : 36 ms, 在Merge Sorted Array的Python提交中击败了99.37% 的用户<br>内存消耗 : 11.7 MB, 在Merge Sorted Array的Python提交中击败了30.51% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>36 ms</td><td>11.7MB</td><td>python</td></tr></table></=>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-26 | 删除排序数组中的重复项</title>
      <link href="/2019/04/leetcode-26/"/>
      <url>/2019/04/leetcode-26/</url>
      
        <content type="html"><![CDATA[<h2 id="26-删除排序数组中的重复项（Remove-Duplicates-from-Sorted-Array）"><a href="#26-删除排序数组中的重复项（Remove-Duplicates-from-Sorted-Array）" class="headerlink" title="26. 删除排序数组中的重复项（Remove Duplicates from Sorted Array）"></a>26. 删除排序数组中的重复项（Remove Duplicates from Sorted Array）</h2><p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><blockquote><p><span>示例 1：</span><br>给定数组 nums = [1,1,2],<br>函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。<br>你不需要考虑数组中超出新长度后面的元素。<br><span>示例 2：</span><br>给定 nums = [0,0,1,1,1,2,2,3,3,4],<br>函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。<br>你不需要考虑数组中超出新长度后面的元素。<br><span>说明</span><br>为什么返回数值是整数，但输出的答案是数组呢?<br>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。<br>你可以想象内部操作如下:<br>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);<br>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-定有效位置，放置有效元素"><a href="#方法一：-定有效位置，放置有效元素" class="headerlink" title="方法一： 定有效位置，放置有效元素"></a>方法一： 定有效位置，放置有效元素</h3><p>很容易就能想到，使用i，j两个下标指针，i表示当前的有效位置，j用来遍历扫描整个列表，不是重复元素。然后将有效位置后移动一个位置（即，不重复元素放置的位置），将有效元素放入有效的位置即可。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :rtype: int        """</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                i<span class="token operator">+=</span><span class="token number">1</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 124 ms, 在Remove Duplicates from Sorted Array的Python提交中击败了41.36% 的用户<br>内存消耗 : 13.6 MB, 在Remove Duplicates from Sorted Array的Python提交中击败了22.21% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>124 ms</td><td>13.6MB</td><td>python</td></tr></table>但是，自我感觉这个程序还是有问题，如果列表是空的时候，返回1显然不合适，所以我这里添加了边界判断：<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        i<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">elif</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            j<span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    i<span class="token operator">+=</span><span class="token number">1</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 100 ms, 在Remove Duplicates from Sorted Array的Python提交中击败了58.41% 的用户<br>内存消耗 : 13.5 MB, 在Remove Duplicates from Sorted Array的Python提交中击败了28.79% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>100 ms</td><td>13.5MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-27 | Remove Element 简单难度</title>
      <link href="/2019/04/leetcode-27/"/>
      <url>/2019/04/leetcode-27/</url>
      
        <content type="html"><![CDATA[<h2 id="27-移除元素（Remove-Element）"><a href="#27-移除元素（Remove-Element）" class="headerlink" title="27. 移除元素（Remove Element）"></a>27. 移除元素（Remove Element）</h2><p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。<br>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><blockquote><p><span>示例 1：</span><br>给定 nums = [3,2,2,3], val = 3,<br>函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。<br>你不需要考虑数组中超出新长度后面的元素。<br><span>示例 2：</span><br>给定 nums = [0,1,2,2,3,0,4,2], val = 2,<br>函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。<br><span>注意：</span><br>这五个元素可为任意顺序。<br>你不需要考虑数组中超出新长度后面的元素。<br><span>说明：</span><br>为什么返回数值是整数，但输出的答案是数组呢?<br>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。<br>你可以想象内部操作如下:<br>// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝<br>int len = removeElement(nums, val);<br>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="方法一：-定有效位置，放置有效元素"><a href="#方法一：-定有效位置，放置有效元素" class="headerlink" title="方法一： 定有效位置，放置有效元素"></a>方法一： 定有效位置，放置有效元素</h3><p>很容易就能想到，使用i，j两个下标指针，i表示当前的有效位置，j用来遍历扫描整个列表，直到不是目标元素，即是有效元素。然后将有效元素放入有效的位置即可，有效位置和有效元素之间可以直接交换。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type nums: List[int]        :type val: int        :rtype: int        """</span>        i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>val<span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                i<span class="token operator">+=</span><span class="token number">1</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> i</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 32 ms, 在Remove Element的Python提交中击败了100.00% 的用户<br>内存消耗 : 11.7 MB, 在Remove Element的Python提交中击败了36.52% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>32 ms</td><td>11.7 MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-283 | 移动零</title>
      <link href="/2019/04/leetcode-283/"/>
      <url>/2019/04/leetcode-283/</url>
      
        <content type="html"><![CDATA[<h2 id="283-移动零（Move-Zeroes）"><a href="#283-移动零（Move-Zeroes）" class="headerlink" title="283.移动零（Move Zeroes）"></a>283.移动零（Move Zeroes）</h2><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p><blockquote><p><span>示例：</span><br>Input: [0,1,0,3,12]<br>Output: [1,3,12,0,0]<br><span>Note：</span></p><ul><li>You must do this in-place without making a copy of the array.</li><li>Minimize the total number of operations.</li></ul></blockquote><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><blockquote><p><span>示例：</span><br>输入: [0,1,0,3,12]<br>输出: [1,3,12,0,0]<br><span>说明：</span><br>1.必须在原数组上操作，不能拷贝额外的数组。<br>2.尽量减少操作次数。</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="一、暴力法"><a href="#一、暴力法" class="headerlink" title="一、暴力法"></a>一、暴力法</h3><p>采用冒泡思想，如果是0，就向后面冒泡。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#冒泡</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                j<span class="token operator">+=</span><span class="token number">1</span></code></pre><blockquote><p><span>结果：</span><br>成功<br>执行用时 : 752 ms, 在Move Zeroes的Python提交中击败了5.43% 的用户<br>内存消耗 : 12.7 MB, 在Move Zeroes的Python提交中击败了35.84% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>752 ms</td><td>12.7 MB</td><td>python</td></tr></table>不难看出效果很差。<h3 id="二、使用辅助空间"><a href="#二、使用辅助空间" class="headerlink" title="二、使用辅助空间"></a>二、使用辅助空间</h3><p>先将所有的非0元素放置到一个空间中，然后再统一存放，后置填0。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span> <span class="token punctuation">:</span>                count<span class="token operator">+=</span><span class="token number">1</span>        i <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>count<span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            i<span class="token operator">+=</span><span class="token number">1</span>        nums<span class="token operator">=</span>li</code></pre><p>但是，原题目要求的是不能拷贝到额外的数组中，故而是不能通过的（这里只做思想的扩展）。</p><h3 id="二、使用下标，定位判数法"><a href="#二、使用下标，定位判数法" class="headerlink" title="二、使用下标，定位判数法"></a>二、使用下标，定位判数法</h3><p>使用两个下标指针i,j，i表示现在需要填充的有效的数据位置，j表示从前到后，扫描到的非0元素。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                i<span class="token operator">+=</span><span class="token number">1</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>            i<span class="token operator">+=</span><span class="token number">1</span></code></pre><blockquote><p><span>结果：</span><br>执行用时 : 56 ms, 在Move Zeroes的Python提交中击败了71.74% 的用户<br>内存消耗 : 12.6 MB, 在Move Zeroes的Python提交中击败了37.76% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>56 ms</td><td>12.6 MB</td><td>python</td></tr></table>简单衍生：思想还是定插入的位置，然后，将后端j扫描的元素和原来位置中元素交换位置，其实也就是交换0（因为0是导致位置交换的本质原因）。``` pythonclass Solution(object):    def moveZeroes(self, nums):        i,j = 0,0        while j<len(nums): if nums[j]!="0:" nums[i],nums[j]="nums[j]," nums[i] i+="1" j+="1" ``` <blockquote><p><span>结果：</span><br>执行用时 : 52 ms, 在Move Zeroes的Python提交中击败了99.46% 的用户<br>内存消耗 : 12.5 MB, 在Move Zeroes的Python提交中击败了39.08% 的用户</p><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>52 ms</td><td>12.5 MB</td><td>python</td></tr></table><p>发现，提高了一点点。</p></len(nums):>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-5 | 最长回文子串 中等难度</title>
      <link href="/2019/04/leetcode-5/"/>
      <url>/2019/04/leetcode-5/</url>
      
        <content type="html"><![CDATA[<h2 id="5-最长回文子串（Longest-Palindromic-Substring）"><a href="#5-最长回文子串（Longest-Palindromic-Substring）" class="headerlink" title="5.最长回文子串（Longest Palindromic Substring）"></a>5.最长回文子串（Longest Palindromic Substring）</h2><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p><p>示例 1：</p><blockquote><p>输入: “babad”<br>输出: “bab”<br>注意: “aba” 也是一个有效答案。</p></blockquote><p>示例 2：</p><blockquote><p>输入: “cbbd”<br>输出: “bb”</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="一、暴力法"><a href="#一、暴力法" class="headerlink" title="一、暴力法"></a>一、暴力法</h3><p>将选出所有子字符串可能的开始和结束位置，并检验它是不是回文。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#判断某个字符串是否是回文串</span>        <span class="token keyword">def</span> <span class="token function">isPalin</span><span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">:</span>            i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>            <span class="token keyword">while</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">:</span>                <span class="token keyword">if</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>ss<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                i<span class="token operator">+=</span><span class="token number">1</span>                j<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                ss <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token punctuation">]</span>                <span class="token keyword">if</span> isPalin<span class="token punctuation">(</span>ss<span class="token punctuation">)</span><span class="token punctuation">:</span>                    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ss<span class="token punctuation">)</span>                j<span class="token operator">+=</span><span class="token number">1</span>            i<span class="token operator">+=</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#处理，输入的是“”</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">""</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span>key<span class="token operator">=</span>len<span class="token punctuation">)</span></code></pre><blockquote><p><span>结果：</span><br>状态：超出时间限制<br><code>89 / 103</code>个通过测试用例<br>时间复杂度：<code>O(n^3)</code>  空间复杂度：<code>O(1)</code>。</p></blockquote><h3 id="二、反转字符串"><a href="#二、反转字符串" class="headerlink" title="二、反转字符串"></a>二、反转字符串</h3><p>反转 S，使之变成 S’找到 S 和 S’之间最长的公共子串：</p><blockquote><p><span>例如：</span><br>s = “caba”， s’ = “abac”  ==&gt; “aba”<br><span>但是有例外：</span><br>s = “abacdfgdcaba”  s’ = “abacdgfdcaba”  ==&gt;  “abacd” 但是，显然不是回文。<br>为了纠正这一点，每当我们找到最长的公共子串的候选项时，都需要检查子串的索引是否与反向子串的原始索引相同。如果相同，那么我们尝试更新目前为止找到的最长回文子串；如果不是，我们就跳过这个候选项并继续寻找下一个候选。<br>后面的下标，是-1 -2 -3 -4 -5 -6   +<code>len(s)</code> ==&gt; 还原</p></blockquote><blockquote><p><span>Python 字符串反转</span><br><span style="color:red;">方法一：切片</span><br>&gt;&gt;&gt;&nbsp; ss = “abc”<br>&gt;&gt;&gt;&nbsp; ss[::-1]<br>‘cba’<br><span style="color:red;">方法二：使用列表中的reverse方法</span><br>&gt;&gt;&gt;&nbsp; ss = “abc”<br>&gt;&gt;&gt;&nbsp; li = list(ss)<br>&gt;&gt;&gt;&nbsp; li<br>[‘a’, ‘b’, ‘c’]<br>&gt;&gt;&gt;&nbsp; li.reverse()<br>&gt;&gt;&gt;&nbsp; “”.join(li)<br>‘cba’<br><span style="color:red;">方法三：使用递归函数</span><br>&gt;&gt;&gt;&nbsp; def fun(s):<br>…     if len(s)&lt;1:<br>…             return s<br>…     return fun(s[1:])+s[0]<br>…<br>&gt;&gt;&gt;&nbsp; fun(ss)<br>‘cba’<br><span style="color:red;">方法四：使用栈</span><br>&gt;&gt;&gt;&nbsp; def func(s):<br>…     l = list(s)  #模拟栈<br>…     result = “”<br>…     while len(l)&gt;0:<br>…             result += l.pop()<br>…     return result<br>…<br>&gt;&gt;&gt;&nbsp; func(ss)<br>‘cba’<br><span style="color:red;">方法五：使用循环</span><br>&gt;&gt;&gt;&nbsp; def funb(s):<br>…     result=””<br>…     max_index = len(s) - 1<br>…     for i, v in enumerate(s):              #enumerate<br>…             result += s[max_index-i]<br>…     return result<br>…<br>&gt;&gt;&gt;&nbsp; funb(ss)<br>‘cba’<br><code>enumerate()</code> 函数用于将一个可遍历的数据对象(<span style="color:red;">如列表、元组或字符串</span>)组合为一个索引序列，同时列出数据和数据下标，一般用在 <code>for</code> 循环当中。</p></blockquote><p>但是，需要判别两个字符中的相同子字符串，操作性不高。</p><h3 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a>思路三</h3><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-4 | 寻找两个有序数组的中位数 中等难度</title>
      <link href="/2019/04/leetcode-4/"/>
      <url>/2019/04/leetcode-4/</url>
      
        <content type="html"><![CDATA[<h2 id="4-寻找两个有序数组的中位数（Median-of-Two-Sorted-Arrays）"><a href="#4-寻找两个有序数组的中位数（Median-of-Two-Sorted-Arrays）" class="headerlink" title="4.寻找两个有序数组的中位数（Median of Two Sorted Arrays）"></a>4.寻找两个有序数组的中位数（Median of Two Sorted Arrays）</h2><blockquote><p><span>前言</span><br>由于，我感觉代码框不怎么好看，然后想自定义一个背景。然后就试着去写了下：<br>＜link href=”/css/blockquote.css” rel=”stylesheet” type=”text/css” ＞<br>在source创建了css文件夹，然后创建了相应的css文件。<br>在引用中加入span标签，写结果，就可以用span的样式（加粗）效果。</p></blockquote><p>There are two sorted arrays nums1 and nums2 of size m and n respectively.<br>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).<br>You may assume nums1 and nums2 cannot be both empty.</p><blockquote><p><span>Example 1:</span><br>nums1 = [1, 3]<br>nums2 = [2]<br>The median is 2.0<br><span>Example 2:</span><br>nums1 = [1, 2]<br>nums2 = [3, 4]<br>The median is (2 + 3)/2 = 2.5</p></blockquote><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。<br>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。<br>你可以假设 nums1 和 nums2 不会同时为空。</p><blockquote><p><span>示例 1:</span><br>nums1 = [1, 3]<br>nums2 = [2]<br>则中位数是 2.0</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>直接用将两个列表合并，排序后，找到下标位置。然后返回。</p><blockquote><p><span>列表合并有两种方式：</span></p><ul><li>nums = nums1 + nums2 生成新的对象nums</li><li>nums1.extend(nums2)  在原有的nums1上扩充</li></ul></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#列表合并</span>        nums <span class="token operator">=</span> sorted<span class="token punctuation">(</span>nums1<span class="token operator">+</span>nums2<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            answer <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>int<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            answer <span class="token operator">=</span> nums<span class="token punctuation">[</span>int<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> answer</code></pre><p>leetcode官网上给了一个解决问题的思路，还没怎么看懂，以后再看。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> leetcode 困难难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-3 | 无重复字符的最长子串 中等难度</title>
      <link href="/2019/04/leetcode-3/"/>
      <url>/2019/04/leetcode-3/</url>
      
        <content type="html"><![CDATA[<h1 id="3-无重复字符的最长子串（Longest-Substring-Without-Repeating-Characters）"><a href="#3-无重复字符的最长子串（Longest-Substring-Without-Repeating-Characters）" class="headerlink" title="3. 无重复字符的最长子串（Longest Substring Without Repeating Characters）"></a>3. 无重复字符的最长子串（Longest Substring Without Repeating Characters）</h1><p>Given a string, find the length of the longest substring without repeating characters.</p><blockquote><p><span>Example 1:</span><br>Input: “abcabcbb”<br>Output: 3<br>Explanation: The answer is “abc”, with the length of 3.<br><span>Example 2:</span><br>Input: “bbbbb”<br>Output: 1<br>Explanation: The answer is “b”, with the length of 1.<br><span>Example 3:</span><br>Input: “pwwkew”<br>Output: 3<br>Explanation: The answer is “wke”, with the length of 3. </p></blockquote><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><blockquote><p><span>示例 1:</span><br>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><p>思路<br>逐个检查所有的子字符串，看它是否不含有重复的字符。</p><ul><li>假设开始和结束的索引分别为 i 和 j。那么我们有 0 ≤ i &lt; j ≤ n 。因此，使用 i 从0到 n - 1以及 j 从 i+1 到 n 这两个嵌套的循环，我们可以枚举出 s 的所有子字符串。</li><li>要检查一个字符串是否有重复字符，我们可以使用集合。我们遍历字符串中的所有字符，并将它们逐个放入 set 中。在放置一个字符之前，我们检查该集合是否已经包含它。如果包含，我们会返回 false。循环结束后，我们返回 true。</li></ul><p>leetcode给的参考代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">allUnique</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">allUnique</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>Character<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Character ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>仿造一个python的：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">unique</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>            se <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">while</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> se<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>                se<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">while</span> j<span class="token operator">&lt;=</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> unique<span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token punctuation">)</span>                j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> res</code></pre><p>但是实际上，是运行超时的。<code>（986 / 987 个通过测试用例）</code><br>时间复杂度：<code>O(n^3)</code> 。</p><h3 id="方法二：滑动窗口"><a href="#方法二：滑动窗口" class="headerlink" title="方法二：滑动窗口"></a>方法二：滑动窗口</h3><p>暴力法非常简单。但它太慢了。那么我们该如何优化它呢？</p><p>在暴力法中，我们会反复检查一个子字符串是否含有有重复的字符，但这是没有必要的。如果从索引 i 到 j - 1之间的子字符串 sij已经被检查为没有重复字符。我们只需要检查 s[j] 对应的字符是否已经存在于子字符串 sij中。</p><p>要检查一个字符是否已经在子字符串中，我们可以检查整个子字符串，这将产生一个复杂度为 O(n^2) 的算法，但我们可以做得更好。</p><p>通过使用 HashSet 作为滑动窗口，我们可以用 O(1)的时间来完成对字符是否在当前的子字符串中的检查。<br>例如，我们将 [i, j)向右滑动 1 个元素，则它将变为 [i+1,j+1)（左闭，右开）。</p><p>我们使用 HashSet 将字符存储在当前窗口 [i, j)（最初 j = i）中。 然后我们向右侧滑动索引 j，如果它不在 HashSet 中，我们会继续滑动 j。直到 s[j] 已经存在于 HashSet 中。此时，我们找到的没有重复字符的最长子字符串将会以索引 i 开头。如果我们对所有的 ii 这样做，就可以得到答案。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Character<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// try to extend the range [i, j]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>python仿写如下，思想很好，使用滑动窗口。从0开始判断，如果在集合中，我们除去首位，此时j指针并不后移，所以判断的还是上一次判断的位置，此时再次判断，存在集合中，还是除去首位，也就是缩减窗口大小。：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        se <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token punctuation">,</span> i<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> se<span class="token punctuation">:</span>                se<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                j<span class="token operator">+=</span><span class="token number">1</span>                ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                se<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i<span class="token operator">+=</span><span class="token number">1</span>   <span class="token comment" spellcheck="true">#每次i移动一位</span>        <span class="token keyword">return</span> ans<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lengthOfLongestSubstring<span class="token punctuation">(</span><span class="token string">"afabcad"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>但是，还是不理想。</p><blockquote><p>执行用时 : 212 ms, 在Longest Substring Without Repeating Characters的Python3提交中击败了26.50% 的用户<br>内存消耗 : 13.2 MB, 在Longest Substring Without Repeating Characters的Python3提交中击败了59.81% 的用户<br>987 / 987 个通过测试用例<br>状态：通过<br>执行用时：212 ms</p></blockquote><p>时间复杂度：O(2n) = O(n)</p><h3 id="方法三：优化的滑动窗口"><a href="#方法三：优化的滑动窗口" class="headerlink" title="方法三：优化的滑动窗口"></a>方法三：优化的滑动窗口</h3><p>上述的方法最多需要执行 2n 个步骤。事实上，它可以被进一步优化为仅需要 n 个步骤。我们可以定义字符到索引的映射，而不是使用集合来判断一个字符是否存在。 当我们找到重复的字符时，我们可以立即跳过该窗口。</p><p>也就是说，如果 s[j] 在 [i, j) 范围内有与 j’重复的字符，我们不需要逐渐增加 i 。 我们可以直接跳过 [i，j’]范围内的所有元素，并将 i 变为 j’ + 1 。<br>Java代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>python 仿造：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        se <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>        ans<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>        <span class="token keyword">while</span> j<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> se<span class="token punctuation">:</span>                i <span class="token operator">=</span> max<span class="token punctuation">(</span>i<span class="token punctuation">,</span> se<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#i等于se[s[j]]时，也就是上一个j'，需要变成j'+1为下一个窗口的起始位置，这里也可以：i = max(i, se[s[j]]+1)</span>                <span class="token comment" spellcheck="true">#print(i)</span>            ans <span class="token operator">=</span> max<span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#当判断是“a”一个字符的时候，j-i=0-0=0，而实际上是1,故而加入j-i+1</span>            se<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># j'+1放入了这里，做了统一处理，使字典中所有的元素都加1，使得下标从1开始</span>            <span class="token comment" spellcheck="true">#print(se)</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> ans</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 192 ms, 在Longest Substring Without Repeating Characters的Python3提交中击败了29.89% 的用户<br>内存消耗 : 13.1 MB, 在Longest Substring Without Repeating Characters的Python3提交中击败了96.90% 的用户</p></blockquote><p>时间复杂度：O(n)<br>虽然比上一个执行效率要好一些，但这里的执行效率还是不怎么高，这就可能是我自己程序的问题了。</p><h3 id="自己练习的滑动窗口"><a href="#自己练习的滑动窗口" class="headerlink" title="自己练习的滑动窗口"></a>自己练习的滑动窗口</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#定义滑动窗口[i,j]  0 0</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span>        length <span class="token operator">=</span> <span class="token number">0</span>        se <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> se<span class="token punctuation">:</span>                j <span class="token operator">+=</span> <span class="token number">1</span>                se<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                se<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i<span class="token operator">+=</span><span class="token number">1</span>            length <span class="token operator">=</span> max<span class="token punctuation">(</span>length<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> length</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 136 ms, 在Longest Substring Without Repeating Characters的Python3提交中击败了49.78% 的用户<br>内存消耗 : 13.3 MB, 在Longest Substring Without Repeating Characters的Python3提交中击败了45.10% 的用户</p></blockquote><h3 id="比较好的滑动窗口代码"><a href="#比较好的滑动窗口代码" class="headerlink" title="比较好的滑动窗口代码"></a>比较好的滑动窗口代码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#定义滑动窗口[i,j]  i=0,j=-1 表示当前滑动窗口无元素</span>        i<span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment" spellcheck="true">#窗口的长度,初始长度是0,因为题设求最长，故而我们需要用max函数，所以初始值设置小点</span>        lenght <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">#定义集合存放数据</span>        se <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#窗口的前端扫描到末尾为止</span>        <span class="token keyword">while</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#如果窗口右端元素没有在窗口中，那么我们窗口右扩展1位</span>            <span class="token comment" spellcheck="true"># 当然，首次窗口右边j=-1，故而判断的是s[j+1]</span>            <span class="token keyword">if</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">and</span> s<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> se<span class="token punctuation">:</span>                j<span class="token operator">+=</span><span class="token number">1</span>                se<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                se<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i<span class="token operator">+=</span><span class="token number">1</span>            lenght <span class="token operator">=</span> max<span class="token punctuation">(</span>lenght<span class="token punctuation">,</span> len<span class="token punctuation">(</span>se<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> lenght</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 104 ms, 在Longest Substring Without Repeating Characters的Python提交中击败了27.04% 的用户<br>内存消耗 : 12.1 MB, 在Longest Substring Without Repeating Characters的Python提交中击败了38.37% 的用户</p></blockquote><table><tr><td>提交时间</td><td>状态</td><td>执行用时</td><td>内存消耗</td><td>语言</td></tr><tr><td>几秒前</td><td>通过</td><td>104 ms</td><td>12.1MB</td><td>python</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python高级编程教程（三） | 第三章 生成器</title>
      <link href="/2019/04/python-advance-learning-three/"/>
      <url>/2019/04/python-advance-learning-three/</url>
      
        <content type="html"><![CDATA[<h1 id="第三章-生成器"><a href="#第三章-生成器" class="headerlink" title="第三章 生成器"></a>第三章 生成器</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>生成器处理值序列的时候，允许序列中的值只在需要的时候才计算。而不是传统的计算列表中所有的值。<br>在恰当的地方使用生成器可以节省内存。</p><ul><li>生成器是一个函数，按照顺序返回一个或者多个值</li><li>生成器可以表现为一个无限序列</li></ul><p>生成器函数的特征：函数内部有一个或者多个<code>yield</code>语句，而不是<code>return</code>。在<code>python2</code>中<code>yeild</code>和<code>return</code>不能共存，<code>python3</code>中可以共存<br><code>yield</code>和<code>return</code>一样，命令函数返回一个值给调用者。不同的是，<code>yield</code>不会终止函数的执行，执行会暂时停顿直到调用代码重新恢复生成器，在停顿的地方再次执行。</p><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>我们先看看下面简单的打开文件的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">yield</span> <span class="token number">1</span>    <span class="token keyword">yield</span> <span class="token number">1</span>    <span class="token keyword">yield</span> <span class="token number">2</span>    <span class="token keyword">yield</span> <span class="token number">3</span>    <span class="token keyword">yield</span> <span class="token number">5</span>    <span class="token keyword">yield</span> <span class="token number">8</span><span class="token keyword">for</span> i <span class="token keyword">in</span> fibonacci<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#之所以用for in循环，因为我们前面说了，生成器是一个值序列</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p>会输出<code>1，2，3，4，5，6，7，8</code> （逗号是换行，这里为了书写方便）<br>下面我们看看无限的生成器：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>            li<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> li<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> fibonacci<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">import</span> time   <span class="token comment" spellcheck="true">#程序执行太快，这里我们休眠一下</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>由于<code>python</code>列表不能存储无穷的数值序列，此时我们的生成器表示的<code>fibonacci</code>序列就很方便了。</p><h2 id="next函数"><a href="#next函数" class="headerlink" title="next函数"></a>next函数</h2><p>虽然for-in循环可以循环得到值，但是有时可能只打算一个单一的值或者固定数量的值，就不适用了。<br>python中提供了next函数，用于请求下一个值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            li<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">)</span>            li<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> li<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>gen <span class="token operator">=</span> fibonacci<span class="token punctuation">(</span><span class="token punctuation">)</span>val <span class="token operator">=</span> next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#1</span><span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>val <span class="token operator">=</span> next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#1</span><span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>val <span class="token operator">=</span> next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#2</span><span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>val <span class="token operator">=</span> next<span class="token punctuation">(</span>gen<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#3</span><span class="token keyword">print</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span></code></pre><p>因为<code>yield</code>在循环中，调用后，回归状态，然后继续执行循环。</p><h2 id="生成器之间的交互"><a href="#生成器之间的交互" class="headerlink" title="生成器之间的交互"></a>生成器之间的交互</h2><p>生成器提供了一个send方法，允许生成器的反向沟通。能赋值给yield表达式的结果</p><p><strong>下面举一个简单的例子</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">squares</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cursor <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> <span class="token keyword">yield</span> cursor <span class="token operator">**</span> <span class="token number">2</span>        <span class="token keyword">if</span> response<span class="token punctuation">:</span>            cursor <span class="token operator">=</span> int<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            cursor <span class="token operator">+=</span> <span class="token number">1</span>sq <span class="token operator">=</span> squares<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>sq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#1</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>sq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#4</span><span class="token keyword">print</span><span class="token punctuation">(</span>sq<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#64</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>sq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#81</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>sq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#100</span></code></pre><p>不难看出，我们的send方法，传值给了yield调用处的response，然后我们判断一下response的值是否是None，完成了对cursor的修改，最后就完成了生成器的跳跃。</p><p>可以看出，不是就意味着我们使用了send，然后我们的生成器就可以完成跳跃，而是需要由代码的逻辑来决定的。<br>如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">squares</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cursor <span class="token operator">=</span> <span class="token number">3</span>    re <span class="token operator">=</span> None    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> re<span class="token punctuation">:</span>            <span class="token keyword">yield</span> re <span class="token operator">**</span> <span class="token number">2</span>   <span class="token comment" spellcheck="true">#这里计算8*8,加入值到序列</span>            re <span class="token operator">=</span> None       <span class="token comment" spellcheck="true">#置初始值None，使if不执行</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            re <span class="token operator">=</span> <span class="token keyword">yield</span> cursor <span class="token operator">**</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true">#send从这里传入re=8</span>            cursor <span class="token operator">+=</span> <span class="token number">1</span>sq <span class="token operator">=</span> squares<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>sq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#9</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>sq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#16</span><span class="token keyword">print</span><span class="token punctuation">(</span>sq<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#64</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>sq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#25</span></code></pre><hr><h2 id="并非所有的迭代对象都是迭代器"><a href="#并非所有的迭代对象都是迭代器" class="headerlink" title="并非所有的迭代对象都是迭代器"></a>并非所有的迭代对象都是迭代器</h2><p>迭代器：</p><ul><li>包含<code>__next__</code>方法的任何对象（可以响应<code>next</code>函数）</li></ul><p>迭代对象：</p><ul><li>定义了<code>__iter__</code>方法的任何对象，可迭代对象的<code>__iter__</code>方法返回一个迭代器。</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> r <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'range'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> r<span class="token punctuation">.</span>nextTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>AttributeError<span class="token punctuation">:</span> <span class="token string">'range'</span> object has no attribute <span class="token string">'next'</span><span class="token operator">>></span><span class="token operator">></span> iter<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">&lt;</span>range_iterator object at <span class="token number">0x000000000038A470</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> iterator <span class="token operator">=</span> iter<span class="token punctuation">(</span>r<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#通过__iter__方法，返回一个迭代器，迭代器可迭代</span><span class="token operator">>></span><span class="token operator">></span> next<span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> next<span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token number">1</span></code></pre><p>可以看出我们常用的<code>range</code>方法，是迭代对象，不是迭代器。可通过<code>__iter__</code>方法返回迭代器。</p><h2 id="标准库中的生成器"><a href="#标准库中的生成器" class="headerlink" title="标准库中的生成器"></a>标准库中的生成器</h2><ul><li><p>range函数，range对象的迭代器是一个生成器，返回序列值。</p></li><li><p>dict.items及其家族，kyes、values和items (均是：迭代器是一个生成器的迭代对象)</p><blockquote><p>di = {“hello”:”你好”, “world”:”世界”}<br>ite = iter(di.items())<br>print(next(ite))<br>print(next(ite<br>(‘hello’, ‘你好’)   &lt;class ‘tuple’&gt;<br>(‘world’, ‘世界’)</p></blockquote></li><li><p>zip函数</p><blockquote><p>z = zip([‘a’,’b’,’c’],[1,2])<br>print(type(z))     #&lt;class ‘zip’&gt;<br>it = iter(z)<br>print(next(it))    #(‘a’, 1)<br>print(next(it))    #(‘b’, 2)<br>print(next(it))  #StopIteration<br><span>或者：</span><br>z = zip([‘a’,’b’,’c’],[1,2])<br>print(next(z))    #(‘a’, 1)<br>print(next(z))    #(‘b’, 2)</p></blockquote></li><li><p>map</p></li><li><p>文件对象，中的特殊方法readline可以用next替代。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python高级编程教程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-2 | 两数相加  中等难度</title>
      <link href="/2019/04/leetcode-2/"/>
      <url>/2019/04/leetcode-2/</url>
      
        <content type="html"><![CDATA[<h1 id="2-两数相加（Add-Two-Numbers）"><a href="#2-两数相加（Add-Two-Numbers）" class="headerlink" title="2. 两数相加（Add Two Numbers）"></a>2. 两数相加（Add Two Numbers）</h1><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><blockquote><p><span>Example:</span><br>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807.</p></blockquote><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>可能会有这种思想：将链表中的数据还原成为数值类型，然后做完加法操作，还原成为列表。但是，我们需要考虑数值类型所能表示的最大的范围，是不可取的。</p><blockquote><p><span>Python 支持三种不同的数值类型：</span></p><ul><li><span>整型(Int)</span> - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。</li><li><span>浮点型(float)</span> - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）</li><li><span>复数( (complex))</span> - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</li></ul></blockquote><blockquote><p><span>这里介绍一个取位的思想：</span><br>a = 12345<br>取个位 : b = (a / 1) % 10 = a % 10<br>取十位： b = (a / 10) % 10<br>取百位： b = (a / 100) % 10</p></blockquote><p>比较神奇的就是，python3整数没有大小的限制！但是，也不能采用。</p><ul><li>按照出题人思路，应该是要考察链表的理解</li><li>如果采用，需要对数字完成逐个取值，很浪费时间</li><li>代码量也比较高</li></ul><p><img src="/images/201904/2019-04-18_220932.jpg" alt="想输入的提示名字，可不输入" title="图解"></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)</span><span class="token comment" spellcheck="true"># 输出：7 -> 0 -> 8</span><span class="token comment" spellcheck="true"># 原因：342 + 465 = 807</span><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">,</span>q <span class="token operator">=</span> l1<span class="token punctuation">,</span> l2        carry <span class="token operator">=</span> <span class="token number">0</span>        resultnode <span class="token operator">=</span> None        <span class="token comment" spellcheck="true">#使用or判断+下面的‘三元运算符’统一化处理，一次性处理了长链和断链情况</span>        <span class="token keyword">while</span> p<span class="token operator">!=</span>None <span class="token operator">or</span> q<span class="token operator">!=</span>None<span class="token punctuation">:</span>            a <span class="token operator">=</span> p<span class="token punctuation">.</span>val <span class="token keyword">if</span> p<span class="token operator">!=</span>None <span class="token keyword">else</span> <span class="token number">0</span>            b <span class="token operator">=</span> q<span class="token punctuation">.</span>val <span class="token keyword">if</span> q<span class="token operator">!=</span>None <span class="token keyword">else</span> <span class="token number">0</span>            <span class="token comment" spellcheck="true">#这里也是比较巧妙的统一化处理</span>            sum <span class="token operator">=</span> <span class="token punctuation">(</span>carry <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span>            carry <span class="token operator">=</span> <span class="token punctuation">(</span>carry <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">10</span>            listn <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>sum<span class="token punctuation">)</span>            <span class="token keyword">if</span> resultnode<span class="token operator">==</span>None<span class="token punctuation">:</span>                resultnode <span class="token operator">=</span> listn                flagnode <span class="token operator">=</span> resultnode            <span class="token keyword">else</span><span class="token punctuation">:</span>                flagnode<span class="token punctuation">.</span>next <span class="token operator">=</span> listn                flagnode <span class="token operator">=</span> flagnode<span class="token punctuation">.</span>next            <span class="token comment" spellcheck="true"># 加入判断是否为None，是因为为None时报错：'NoneType' object has no attribute 'next'</span>            <span class="token keyword">if</span> p<span class="token operator">!=</span>None<span class="token punctuation">:</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next            <span class="token keyword">if</span> q<span class="token operator">!=</span>None<span class="token punctuation">:</span>                q <span class="token operator">=</span> q<span class="token punctuation">.</span>next        <span class="token keyword">if</span> carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#处理进位值，如最后值为7 + 8，则需要增加一个节点存储进位值</span>            listn <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>carry<span class="token punctuation">)</span>            flagnode<span class="token punctuation">.</span>next <span class="token operator">=</span> listn        <span class="token keyword">return</span> resultnode</code></pre><blockquote><p><span>结果：</span><br>执行用时 : 80 ms, 在Add Two Numbers的Python提交中击败了78.72% 的用户<br>内存消耗 : 11.9 MB, 在Add Two Numbers的Python提交中击败了20.89% 的用户</p></blockquote><hr><p>网站给出的解答中，Java代码的解法很直观：</p><hr><pre><code>伪代码如下：* 将当前结点初始化为返回列表的哑结点。* 将进位 carry 初始化为 0。* 将 p 和 q 分别初始化为列表 l1 和 l2 的头部。* 遍历列表 l1 和 l2 直至到达它们的尾端。    * 将 x 设为结点 p 的值。如果 p 已经到达 l1 的末尾，则将其值设置为 0。    * 将 y 设为结点 q 的值。如果 q 已经到达 l2 的末尾，则将其值设置为 0。    * 设定 sum = x + y + carry。    * 更新进位的值，carry = sum / 10。    * 创建一个数值为 (sum mod 10) 的新结点，    并将其设置为当前结点的下一个结点，然后将当前结点前进到下一个结点。    * 同时，将 p 和 q 前进到下一个结点。* 检查 carry = 1 是否成立，如果成立，则向返回列表追加一个含有数字 1 的新结点。* 返回哑结点的下一个结点。请注意，我们使用哑结点来简化代码。如果没有哑结点，则必须编写额外的条件语句来初始化表头的值。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode p <span class="token operator">=</span> l1<span class="token punctuation">,</span> q <span class="token operator">=</span> l2<span class="token punctuation">,</span> curr <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null <span class="token operator">||</span> q <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> q<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> carry <span class="token operator">+</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 中等难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1 | Two Sum 简单难度</title>
      <link href="/2019/04/leetcode-1/"/>
      <url>/2019/04/leetcode-1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-两数之和（Two-Sum）"><a href="#1-两数之和（Two-Sum）" class="headerlink" title="1. 两数之和（Two Sum）"></a>1. 两数之和（Two Sum）</h1><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><blockquote><p><span>示例:</span><br>给定 nums = [2, 7, 11, 15], target = 9<br>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p></blockquote><p>解答区：<br>首先，不同于C或者Java中的数组，但也希望能够一次遍历获取列表的下标和值：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">:</span></code></pre><p>但是，实际上是错误的语法。在Python中提供了这样的一个循环：</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span></code></pre><p>然后，我们可以编写解决问题的代码了：</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    功能：找num在列表nums中的下标位置          不存在，返回-1    """</span>    <span class="token keyword">def</span> <span class="token function">findIndex</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">==</span> j<span class="token punctuation">:</span>                <span class="token keyword">return</span> i        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token punctuation">,</span>j <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>             r <span class="token operator">=</span> target <span class="token operator">-</span> j             <span class="token keyword">if</span> r <span class="token keyword">in</span> nums<span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true">##这里，需要考虑到不能重复</span>                 <span class="token keyword">if</span> self<span class="token punctuation">.</span>findIndex<span class="token punctuation">(</span>r<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">and</span> i<span class="token operator">!=</span>self<span class="token punctuation">.</span>findIndex<span class="token punctuation">(</span>r<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                     <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span> self<span class="token punctuation">.</span>findIndex<span class="token punctuation">(</span>r<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>    target <span class="token operator">=</span> <span class="token number">6</span>    a <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> a<span class="token punctuation">.</span>twoSum<span class="token punctuation">(</span>nums<span class="token operator">=</span>nums<span class="token punctuation">,</span> target<span class="token operator">=</span>target<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode 简单难度 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python高级编程教程（二）| 第二章 上下文管理器</title>
      <link href="/2019/04/python-advance-learning-two/"/>
      <url>/2019/04/python-advance-learning-two/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-上下文管理器"><a href="#第二章-上下文管理器" class="headerlink" title="第二章 上下文管理器"></a>第二章 上下文管理器</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>上下文管理器是装饰器的近亲，都是包装其他代码的工具。<br>装饰器包装函数或者类；上下文管理器包装任意格式的代码块。在大多数情况下，作用等价。<br>上下文管理器是一个包装任意代码块的对象。保证进入上下文管理器时，每次代码执行的一致性；当退出上下文管理器时，相关的资源会被正确回收。<br>上下文管理器应用最多的就是–作为确保资源被正确清理的一种方式。有点类似于try-exception-finally的结构。</p><h2 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h2><p>我们先看看下面简单的打开文件的代码：</p><pre class=" language-python"><code class="language-python">file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>如果在文件打开失败了，代码执行到<code>file.close()</code>就会是一个空对象执行<code>close()</code>方法。<br>显然这是不行的，所以有了下面的代码：</p><pre class=" language-python"><code class="language-python">file <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">try</span><span class="token punctuation">:</span>    file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'se'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>finally</code>语句块中的代码无论try语句块中发生了什么都会执行。因此可以保证文件一定会关闭。这么做有什么问题么？当然没有，但当我们写一些更复杂的代码的时候，<code>try-finally</code>语句就会变得丑陋无比。<br>Python内置函数open也可以作为上下文管理器使用，所以就有了下面的改进版本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Hello '</span><span class="token punctuation">)</span></code></pre><p><strong><code>“with”</code>是一个新关键词，并且总是伴随着上下文管理器出现</strong><br><code>__enter__</code> 方法的返回结果会被赋给<code>as</code>关键字之后的变量。<br><code>__exit__</code> 方法则在离开代码块之后被调用(即使在代码块中遇到了异常)。<br>与装饰器相同的是，使用上下文管理器的关键原因在于避免代码的重复。</p><h3 id="enter和exit方法"><a href="#enter和exit方法" class="headerlink" title="enter和exit方法"></a>enter和exit方法</h3><p>with语句的表达式的作用是返回一个遵循特定协议的对象。具体来说，该对象必须定义一个<code>__enter__</code>方法和一个<code>__exit__</code>方法，且后者必须接受特定参数。</p><ul><li><code>__enter__</code>方法，除了<code>self</code>参数外，不接受任何其他参数。一般来说，<code>__enter__</code>方法负责执行一些配置。</li><li><code>__exit__</code>方法，除了<code>self</code>参数外，还有三个位置参数：一个异常类型、一个异常实例、一个回溯。如果没有异常，这3个参数全被设置成<code>None</code>，但如果在代码中发生了异常，则参数被填充。</li></ul><p><strong>下面举一个简单的例子</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>entered <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>entered <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>entered <span class="token operator">=</span> <span class="token boolean">False</span>t <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>entered<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># False</span><span class="token keyword">with</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> t<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>entered<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># True</span></code></pre><p>上面有两种调用方式，右边分别给出了运行的结果。不难看出：<code>with</code>和普通调用的区别就在于是否执行了<code>__enter__</code>方法。</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p><code>__exit__</code>方法中可以选择性地处理包装代码块中出现的异常，或者处理其他需要关闭上下文管理器状态的事情。（具体的异常处理，本文后面会讲解）</p><h2 id="自定义上下文管理器"><a href="#自定义上下文管理器" class="headerlink" title="自定义上下文管理器"></a>自定义上下文管理器</h2><p>要实现上下文管理器，必须实现两个方法 – 一个负责进入语句块的准备操作，另一个负责离开语句块的善后操作。<br>Python类包含两个特殊的方法，分别名为：<code>__enter__</code>以及<code>__exit__</code>(双下划线作为前缀及后缀)。</p><blockquote><p>当一个对象被用作上下文管理器时：<br><code>__enter__</code> 方法的返回结果会被赋给<code>as</code>关键字之后的变量。<br><code>__exit__</code> 方法则在离开代码块之后被调用(即使在代码块中遇到了异常)。<br>与装饰器相同的是，使用上下文管理器的关键原因在于避免代码的重复。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>unused<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Exit"</span><span class="token punctuation">)</span><span class="token keyword">with</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"invoking"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#运行结果</span><span class="token comment" spellcheck="true">#Enter</span><span class="token comment" spellcheck="true">#invoking</span><span class="token comment" spellcheck="true">#Exit</span></code></pre><p>在此没有使用<code>“as”</code>关键词。下面我们自己定义打开文件的方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestOpen</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 新增初始化方法</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>filename <span class="token operator">=</span> filename        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>openfile <span class="token operator">=</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> self<span class="token punctuation">.</span>mode<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>openfile    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>unused<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>openfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> TestOpen<span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span></code></pre><p>如果语句块内部发生了异常，<code>__exit__</code>方法将被调用，而异常将会被重新抛出(re-raised)。我们可以让<code>__exit__</code>方法简单的返回True来忽略语句块中发生的所有异常(大部分情况下这都不是明智之举)。</p><h2 id="何时应该编写上下文管理器"><a href="#何时应该编写上下文管理器" class="headerlink" title="何时应该编写上下文管理器"></a>何时应该编写上下文管理器</h2><h3 id="资源清理"><a href="#资源清理" class="headerlink" title="资源清理"></a>资源清理</h3><p>打开和关闭资源（如数据库和文件的连接）。确保异常时正确关闭资源很重要。如下面连接数据库的案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">DBConnection</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dbName<span class="token operator">=</span>None<span class="token punctuation">,</span>user<span class="token operator">=</span>None<span class="token punctuation">,</span>password<span class="token operator">=</span>None<span class="token punctuation">,</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>host <span class="token operator">=</span> host        self<span class="token punctuation">.</span>dbName <span class="token operator">=</span> dbName        self<span class="token punctuation">.</span>user <span class="token operator">=</span> user        self<span class="token punctuation">.</span>password <span class="token operator">=</span> password    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>connectioin <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span>self<span class="token punctuation">.</span>user<span class="token punctuation">,</span>self<span class="token punctuation">.</span>password<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dbName<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>connectioin<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>connectioin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> DBConnection<span class="token punctuation">(</span>dbName<span class="token operator">=</span><span class="token string">'weizu'</span><span class="token punctuation">,</span>user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> db<span class="token punctuation">:</span>    db<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'SELECT VERSION()'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> db<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># (('5.7.24',),)</span></code></pre><h3 id="避免重复"><a href="#避免重复" class="headerlink" title="避免重复"></a>避免重复</h3><p>最常见的是避免重复处理异常。上下文管理器能够传播和终止异常，那么就最好将它和<code>except</code>子句放在同一个地方定义。</p><h4 id="1-传播异常"><a href="#1-传播异常" class="headerlink" title="1.传播异常"></a>1.传播异常</h4><p><code>__exit__</code>方法只是向流程链上传播异常，这是通过返回<code>False</code>实现的，根本不需要与异常实例进行交互，如下面的上下文管理器：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> exc_val<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Bubbling up exception: %s'</span> <span class="token operator">%</span> exc_val<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">with</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token number">5</span><span class="token operator">/</span><span class="token number">0</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true"># Bubbling up exception: division by zero</span><span class="token comment" spellcheck="true">#   File "E:/codes/django_learn01/blog/test.py", line 14, in &lt;module></span><span class="token comment" spellcheck="true">#     5/0</span><span class="token comment" spellcheck="true"># ZeroDivisionError: division by zero</span></code></pre><p>观察上面的结果，<code>__exit__</code>方法确实执行到了<code>return False</code>。因为输出了<code>print</code>，然后必然执行的是<code>return</code>，所以发送给<code>__exit__</code>的异常只是被重新抛出了。</p><h4 id="2-终止异常"><a href="#2-终止异常" class="headerlink" title="2.终止异常"></a>2.终止异常</h4><p>不妨试试，将<code>__exit__</code>中的<code>return False</code>改为<code>return True</code>。看是否还会抛出异常，显然不会。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> exc_val<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Bubbling up exception: %s'</span> <span class="token operator">%</span> exc_val<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">with</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token number">5</span><span class="token operator">/</span><span class="token number">0</span><span class="token comment" spellcheck="true"># ZeroDivisionError: division by zero</span></code></pre><ul><li>回溯消失了。</li><li>由于异常被<code>__exit__</code>方法处理终止了，因此程序没有引发异常，继续执行。<br>但是，永远也不要这样做</li></ul><h4 id="3-处理特定异常类"><a href="#3-处理特定异常类" class="headerlink" title="3.处理特定异常类"></a>3.处理特定异常类</h4><p>在<code>__exit__</code>方法中，可以仅检查是否是特定异常类的实例，执行异常处理。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> exc_type<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> issubclass<span class="token punctuation">(</span>exc_type<span class="token punctuation">,</span>ValueError<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ValueError: %s"</span> <span class="token operator">%</span> exc_val<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#end</span></code></pre><p>下面是一些测试的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"wrong value."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ValueError: wrong value.</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"wrong type."</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "E:/codes/django_learn01/blog/test.py", line 21, in &lt;module></span><span class="token comment" spellcheck="true">#     raise TypeError("wrong type.")</span><span class="token comment" spellcheck="true"># TypeError: wrong type.</span></code></pre><p>但是，就本身而言，这并没有多少价值，毕竟可以使用一个更加直观的<code>try</code>代替：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    do something<span class="token keyword">except</span> ValueError <span class="token keyword">as</span> exc_instance<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ValueError: %s"</span> <span class="token operator">%</span> exc_instance<span class="token punctuation">)</span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在网页中，加入如下的<code>JavaScript</code>代码，可以实现网页的<code>伪加密</code>：</p><pre class=" language-JavaScript"><code class="language-JavaScript"><script>    window.onload=function(){     var pa = prompt('请输入文章密码');     if(pa!='123'){          history.back();     }    };</script></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python高级编程教程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python高级编程教程（一）| 第一章 装饰器类</title>
      <link href="/2019/04/python-advance-learning-one/"/>
      <url>/2019/04/python-advance-learning-one/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-装饰器类"><a href="#第一章-装饰器类" class="headerlink" title="第一章 装饰器类"></a>第一章 装饰器类</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用于封装函数或者类代码的工具。其核心也就是一个可以接受调用也可以返回调用的调用。无非就是一个函数（或调用），该函数接受被装饰的函数作为其位置参数。装饰器通过使用该参数来执行一些操作，然后返回原始参数或者其他的一些调用。<br><strong>装饰器类也就是接受另一个函数作为参数，并用其完成一些操作的函数。</strong><br>装饰器类：通常是接受被装饰的可调用函数作为唯一参数，并返回一个可调用函数。<br><strong>示例：</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">debug</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[DEBUG]: enter {}()"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper@debug<span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    say_hello<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在 <code>say_hello()</code>函数的定义前加上<code>@debug</code>，相当于执行了：<code>say_hello=debug(say_hello)</code><br>也就是说：</p><blockquote><p>当装饰器应用到装饰函数时（而不是调用装饰器），会执行装饰代码本身。 </p></blockquote><h3 id="练习-计算任意函数运行时间"><a href="#练习-计算任意函数运行时间" class="headerlink" title="练习: 计算任意函数运行时间"></a>练习: 计算任意函数运行时间</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        func<span class="token punctuation">(</span><span class="token punctuation">)</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper@decorator<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 函数调用</span><span class="token comment" spellcheck="true"># 输出：0.800644397735595</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    func<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>这里的内层函数-wrapper，其实就相当于闭包函数，它起到装饰给定函数的作用，wrapper参数为<em>args, *</em>kwargs。<em>args表示的参数以列表的形式传入；*</em>kwargs表示的参数以字典的形式传入<br>什么函数可以被称为闭包函数呢？主要是满足两点：函数内部定义的函数；引用了外部变量但非全局变量。</p></blockquote><h2 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h2><p>在Python中，一切皆对象，函数和类本质没有什么不一样。[装饰器函数、装饰器类]<br>装饰器函数其实是这样一个接口约束，它必须接受一个callable对象作为参数，然后返回一个callable对象。在Python中一般callable对象都是函数，但也有例外。只要某个对象重载了<code>__call__()</code>方法，那么这个对象就是callable的。<br>回到装饰器上的概念上来，装饰器要求接受一个callable对象，并返回一个callable对象（不太严谨，详见后文）。那么用类来实现也是也可以的。我们可以让类的构造函数<code>__init__()</code>接受一个函数，然后重载<code>__call__()</code>并返回一个函数，可将一个类实例变成一个可调用对象，也可以达到装饰器函数的效果。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>f <span class="token operator">=</span> f    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"decorator start"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"decorator end"</span><span class="token punctuation">)</span>@Decorator<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"func"</span><span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#运行结果：</span><span class="token comment" spellcheck="true">#decorator start</span><span class="token comment" spellcheck="true">#func</span><span class="token comment" spellcheck="true">#decorator end</span></code></pre><p><strong>解释：</strong></p><blockquote><p>p = <code>Decorator(func)</code>   p是类Decorator的一个实例<br>p()  实现了<code>__call__()</code>方法后，p可以被调用<br>要使用类装饰器必须实现类中的<code>__call__()</code>方法，就相当于将实例变成了一个方法。</p></blockquote><h2 id="多个装饰器"><a href="#多个装饰器" class="headerlink" title="多个装饰器"></a>多个装饰器</h2><p>当有多个装饰器修饰一个函数的时候，装饰器的执行顺序是<strong>由近及远</strong></p><h2 id="Python装饰器库-functools"><a href="#Python装饰器库-functools" class="headerlink" title="Python装饰器库-functools"></a>Python装饰器库-functools</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">inner_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">return</span> inner_function@decorator<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span></code></pre><blockquote><p>执行的结果：<br>inner_function</p></blockquote><p>也就是说，代码执行的不是<code>func</code>，而是直接调用的<code>inner_function</code>函数。<br><strong>需要借助functools模块</strong><br>因为返回的那个<code>inner_function()</code>函数名字就是<code>inner_function</code>，所以，需要把原始函数的<code>__name__</code>等属性复制到<code>inner_function()</code>函数中，否则，有些依赖函数签名的代码执行就会出错。<br>不需要编写<code>inner_function.__name__ = func.__name__</code>这样的代码，Python内置的<code>functools.wraps</code>就是干这个事的<br>修改后：</p><pre><code>from functools import wrapsdef decorator(func):    @wraps(func)     def inner_function():        pass    return inner_function@decoratordef func():    passprint(func.__name__)</code></pre><blockquote><p>运行结果：<br>func</p></blockquote><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>某个功能在你原有的函数基础上，添加了新的功能，而你又不希望去修改原有的函数定义，从而定义的新的函数。这种在代码运行期间动态增加功能的方式，称之为装饰器。</li><li>Django中使用@login_required作为装饰器</li><li>Flask中使用@app.route充当指定URI路由</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python高级编程教程系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作面试经历历程</title>
      <link href="/2019/04/interview/"/>
      <url>/2019/04/interview/</url>
      
        <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>这几天，前前后后经历了三场面试，应试的是Python软件开发方向的实习工作。都算是失败了吧。然后，自己也从中明白了一些什么。<br>面试，是一个自我检测，我们也期望得到面试官的肯定。但是，在自己自以为自己真的有良好的工作能力的时候，需要一次发自内心的自省：是否是自我太过于盲目自信。<br>一两场的面试或许不能说明什么问题，但是在面试的过程中，我们自己终究是能够找到自己的缺失点，而接下来的日子里，就应该去抹平或者填补一下，而不是“嗯，我知道，但是我还想缓缓。”<br>没有谁生来强大，也没有谁生来彷徨。<br>今天的面试官说的很好，首先要认清自己的现状，再看看周围的人、看看自己以前的同学都在做哪些工作。看看他们的现状，然后对比自己，比较比较自己的差距在哪里。应该努力的去运用到手边的一切的资源。<br>也该好好给自己一个职业规划。<br>以前，总觉得职业规划很遥远。觉得生活嘛，还不是那么一天一天的过。就在今天上午，面试官突然问我，你的职业规划是什么？我楞了一下，难道不是先养活自己，然后再谈人生？然后，我面带笑容的回应：没有好的职业规划，先想找个工作做做。<br>然后，谜一般的，面试官也楞了一下，只是笑笑，不说话。<br>可能自己当时没有感觉到，但是后来还是发现了自己原来活着也就是为了活着，通过这句话，其实就可以看出一个人是不是对生活充满了正能量。<br>我觉得，一个正能量的人，基本的能力应该是能掌控。不说掌控身边的事物，最起码应该掌控自己的一切行为。</p><hr><p>现在，我在省图书馆。把前几天搞的这个网站搞完，想把它弄好了，然后把自己的csdn的博客搬家到这里来。这个估计就是以后再搬家了。现在网站算是基本成型了。挺好。<br>这里要立一个flag，接下来的日子，好好了解识别方向，然后好好学习Python和英语。<br>虽然不知道自己以后的路是怎么样，但，把眼前的做好、做到极致。我想最后哪怕失败了，也算得上是对得起自己了。<br>然后是上传，我要回家了。。。。</p><h2 id="以下是一些感触："><a href="#以下是一些感触：" class="headerlink" title="以下是一些感触："></a>以下是一些感触：</h2><ul><li>公司、职工之间的关系其实很简单，就是利用与被利用。公司需要好的人才来创造价值，而职工需要一个平台来展示自己的能力，以谋取更多的利益。</li><li>做所有的事情都应该考虑后果，而不是所有的事情都想当然。小时候，父母会为你的任性买单，长大了凡是都应该靠自己。</li><li>没有谁生来强大，也没有谁生来彷徨。</li><li>想了解这个世界的任何事物，首先应该做的事情就是融入它的相关面，用心体验、感受。而融入的前提就是你要了解，至少是一知半解。</li><li>先为人，后为事。</li></ul>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> my life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭博客教程-3 | hexo的使用</title>
      <link href="/2019/04/usehexo-2/"/>
      <url>/2019/04/usehexo-2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-如何撰写文章？"><a href="#1-如何撰写文章？" class="headerlink" title="1. 如何撰写文章？"></a>1. 如何撰写文章？</h1><h2 id="步骤一：-创建文件"><a href="#步骤一：-创建文件" class="headerlink" title="步骤一： 创建文件"></a>步骤一： 创建文件</h2><p><code>win+R</code>，<code>cmd</code>切换到站点文件目录，输入如下命令创建文章，其中<code>title</code>是文章的标题</p><pre class=" language-python"><code class="language-python">hexo new <span class="token string">"title"</span></code></pre><blockquote><p>D:\blog\weizu&gt;hexo new usehexo-1<br>INFO  Created: D:\blog\weizu\source_posts\usehexo-1.md<br>当输入命令后，就会在 source/_post 文件夹下创建一个文件，命名为：howtobuildhexopage.md<br><a href="https://blog.csdn.net/witnessai1/article/details/52551362" title="markdown" target="_blank" rel="noopener">markdown语法参考</a></p></blockquote><h2 id="步骤二：-打开我们创建的usehexo-1-md文件"><a href="#步骤二：-打开我们创建的usehexo-1-md文件" class="headerlink" title="步骤二： 打开我们创建的usehexo-1.md文件"></a>步骤二： 打开我们创建的usehexo-1.md文件</h2><p>这里，推荐给大家一款简洁易用的 <code>Markdown</code> 编辑器<code>Typora</code> 的下载地址：<a href="https://www.typora.io/" target="_blank" rel="noopener">https://www.typora.io/</a><br>打开后，我加入了标签，列表的形式：</p><pre><code>---title: hexo-next搭建好，你需要了解编写文本的常见markdown语法date: 2019-04-11 11:21:15comments: true   是否开启本页的评论categories: ”hexo教程“  # 里面内容是举例tags:            标签， 每一页写了这个，然后主页的标签页就会自动生成一个页面    - hexo    - weizu_cool---注意：属性和属性值之间必须有一个空格，否则会解析错误</code></pre><blockquote><p>hexo比较好的一点就是，在运行了网站后，我们添加新的页面，以及修改原有页面的时候，是不会影响服务器的，服务会自动重新启动，也就是：在修改了hexo源码后，不需要ctrl+c，然后再hexo server 去启动服务，以查看效果。</p></blockquote><h2 id="步骤三：-编写文章内容，在适合的位置，插入-lt-–more–-gt-标签"><a href="#步骤三：-编写文章内容，在适合的位置，插入-lt-–more–-gt-标签" class="headerlink" title="步骤三： 编写文章内容，在适合的位置，插入&lt;!–more–&gt;标签"></a>步骤三： 编写文章内容，在适合的位置，插入&lt;!–more–&gt;标签</h2><p>在利用 <code>Hexo</code> 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容<br>如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简<br>这时，我们只需在文章中使用 该标志即可，表示只会显示标志前面的内容。</p><blockquote><p>当然，这里也可以修改主题配置文件，一步搞定。<br>Automatically Excerpt. Not recommend.<br>Please use &lt;!– more –&gt; in the post to control excerpt accurately.<br>auto_excerpt:<br>&nbsp;&nbsp;enable: true<br>&nbsp;&nbsp;length: 150</p></blockquote><h2 id="步骤四：部署和发布站点到GitHub"><a href="#步骤四：部署和发布站点到GitHub" class="headerlink" title="步骤四：部署和发布站点到GitHub"></a>步骤四：部署和发布站点到GitHub</h2><pre><code>hexo generate   # 生成静态文件。可简写 hexo ghexo deploy     # 发布到github。可简写 hexo d#如果需要本地查看，请运行hexo server</code></pre><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>其实并不需要使用上面的命令创建，如命令：<code>hexo new &quot;title&quot;</code>来创建以md结尾的文章，其实也就是使用<code>scaffolds</code>文件夹下的模板文件来创建文章。完全可以自己创建。这里我的模板文件目录是：<code>D:\blog\weizu\scaffolds</code></p><h1 id="2-常见markdown语法"><a href="#2-常见markdown语法" class="headerlink" title="2. 常见markdown语法"></a>2. 常见markdown语法</h1><h2 id="markdown教程官网"><a href="#markdown教程官网" class="headerlink" title="markdown教程官网"></a>markdown教程官网</h2><p><a href="https://kennylee26.gitbooks.io/markdown/content/index.html" target="_blank" rel="noopener">markdown</a></p><h2 id="下面介绍一些markdown的常见语法"><a href="#下面介绍一些markdown的常见语法" class="headerlink" title="下面介绍一些markdown的常见语法"></a>下面介绍一些markdown的常见语法</h2><h3 id="（1）-标题"><a href="#（1）-标题" class="headerlink" title="（1） 标题"></a>（1） 标题</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 一级标题</span><span class="token comment" spellcheck="true">## 二级标题</span><span class="token comment" spellcheck="true">### 三级标题</span><span class="token comment" spellcheck="true">#### 四级标题</span><span class="token comment" spellcheck="true">##### 五级标题</span><span class="token comment" spellcheck="true">###### 六级标题</span></code></pre><h3 id="（2）粗体、斜体、删除线和下划线"><a href="#（2）粗体、斜体、删除线和下划线" class="headerlink" title="（2）粗体、斜体、删除线和下划线"></a>（2）粗体、斜体、删除线和下划线</h3><pre class=" language-python"><code class="language-python"><span class="token operator">*</span>斜体<span class="token operator">*</span><span class="token operator">**</span>粗体<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>加粗斜体<span class="token operator">**</span><span class="token operator">*</span><span class="token operator">~</span><span class="token operator">~</span>删除线<span class="token operator">~</span><span class="token operator">~</span></code></pre><p><strong>效果：</strong><br><em>斜体</em><br><strong>粗体</strong><br><strong><em>加粗斜体</em></strong><br><del>删除线</del></p><h3 id="（3）引用块"><a href="#（3）引用块" class="headerlink" title="（3）引用块"></a>（3）引用块</h3><pre class=" language-python"><code class="language-python"><span class="token operator">></span> 文字引用</code></pre><p><strong>效果：</strong></p><blockquote><p>文字引用</p></blockquote><h3 id="（4）代码块"><a href="#（4）代码块" class="headerlink" title="（4）代码块"></a>（4）代码块</h3><pre class=" language-python"><code class="language-python">`行内代码`<span class="token comment" spellcheck="true">#```#   #没有'#'，我这里的代码块就是```，这三个点，我是复制的，不知道怎么敲来的</span>多行代码多行代码<span class="token comment" spellcheck="true">#```#</span></code></pre><p><strong>效果：</strong><br><code>行内代码</code></p><pre><code>多行代码</code></pre><h3 id="（5）列表"><a href="#（5）列表" class="headerlink" title="（5）列表"></a>（5）列表</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">.</span> 有序列表项<span class="token operator">*</span> 无序列表项<span class="token operator">+</span> 无序列表项<span class="token operator">-</span> 无序列表项</code></pre><p><strong>效果：</strong></p><ol><li>有序列表项</li></ol><ul><li>无序列表项</li></ul><ul><li>无序列表项</li></ul><ul><li>无序列表项</li></ul><h3 id="（6）超链接"><a href="#（6）超链接" class="headerlink" title="（6）超链接"></a>（6）超链接</h3><pre class=" language-python"><code class="language-python">方法一：<span class="token punctuation">[</span>链接文字<span class="token punctuation">]</span><span class="token punctuation">(</span>链接地址 <span class="token string">"链接描述"</span><span class="token punctuation">)</span>例如：<span class="token punctuation">[</span>示例链接<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span> <span class="token string">"示例链接"</span><span class="token punctuation">)</span>方法二：<span class="token operator">&lt;</span>链接地址<span class="token operator">></span>例如：<span class="token operator">&lt;</span>https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span><span class="token operator">></span></code></pre><p><strong>效果：</strong><br><a href="http://baiyazi.top" title="百丫子" target="_blank" rel="noopener">我的第一个博客：百丫子</a></p><h3 id="（7）图片"><a href="#（7）图片" class="headerlink" title="（7）图片"></a>（7）图片</h3><pre class=" language-python"><code class="language-python">!<span class="token punctuation">[</span>图片文字<span class="token punctuation">]</span><span class="token punctuation">(</span>图片地址 <span class="token string">"图片描述"</span><span class="token punctuation">)</span>例如：!<span class="token punctuation">[</span>示例图片<span class="token punctuation">]</span><span class="token punctuation">(</span>https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token operator">/</span>example<span class="token punctuation">.</span>PNG <span class="token string">"alt text"</span><span class="token punctuation">)</span></code></pre><p>Hexo中添加本地图片</p><ul><li>把主配置文件_config.yml 里的post_asset_folder:这个选项设置为true</li><li>在source下创建/images文件夹，先把图片xx.jpg/png复制到这个文件夹</li><li>最后在xxxx.md中想引入图片时，只需要在xxxx.md中按照markdown的格式引入图片：<br><img src="/images/201904/2019-04-18_220932.jpg" alt="想输入的提示名字，可不输入" title="实例"></li></ul><p><strong>效果：</strong><br><img src="https://www.baidu.com/img/bd_logo1.png" alt="博客中插入的第一张图片" title="百度"><br>图片大小的指定，需要用html的方式来解决：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span>200</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com/img/bd_logo1.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><img width="200" src="https://www.baidu.com/img/bd_logo1.png">### （8）表格```<table><tr><th>Tables</th><th>Are</th><th>Cool</th></tr><tr><td>col 1 is</td><td>left-aligned</td><td>$1600</td></tr><tr><td>col 2 is</td><td>centered</td><td>$12</td></tr><tr><td>col 3 is</td><td>right-aligned</td><td>$1</td></tr></table>```注意：使用的时候，HTML需要紧凑，不然会在表格前面留有大量的空白。**效果：**<table><tr><th>Tables</th><th>Are</th><th>Cool</th></tr><tr><td>col 1 is</td><td>left-aligned</td><td>$1600</td></tr><tr><td>col 2 is</td><td>centered</td><td>$12</td></tr><tr><td>col 3 is</td><td>right-aligned</td><td>$1</td></tr></table>### （9）代码```# 行内式C语言里的函数 `scanf()` 怎么使用？```**效果：**C语言里的函数 `scanf()` 怎么使用？```# 缩进式多行代码    #include <stdio.h>    int main(void){        printf("Hello world\n");    }```缩进 4 个空格或是 1 个制表符**效果：**    #include <stdio.h>    int main(void){        printf("Hello world\n");    }<h1 id="3-关于导航栏的设置"><a href="#3-关于导航栏的设置" class="headerlink" title="3. 关于导航栏的设置"></a>3. 关于导航栏的设置</h1><p>我发现我<code>hexo</code>博客的导航栏还没有激活，这里来创建和导航栏相关的页面。<br>就比如说，我的导航栏-关于，点击打开链接：<a href="http://localhost:4000/about/" target="_blank" rel="noopener">http://localhost:4000/about/</a> 出现的是<code>Cannot GET /about/</code><br>下面说说如何操作添加相关的页面：<br>同理，在站点目录中按住Shift，打开cmd窗口。输入：</p><pre><code>hexo new page about</code></pre><p>就会在<code>source</code>文件夹中生成<code>about</code>文件夹，在<code>about</code>文件夹下生成<code>index.md</code>。这个就叫做页面，不在文章列表显示，可以通过<a href="http://localhost/about" target="_blank" rel="noopener">http://localhost/about</a> 浏览。<br>在文件夹窗口中，用<code>Typora</code>打开我们创建好的<code>source/about/index.md</code>文件，然后编辑文件成你想要的样子就好了。<br>同理，我的创建标签页、分类页、日程表</p><pre><code>hexo new page tagshexo new page categorieshexo new page schedule</code></pre><p>归档页archives是自动就有的。<br>我们可以关闭上面三个页面的评论功能。</p><pre><code>---title: categoriesdate: 2019-04-12 16:21:03comments: falsetype: categories---</code></pre><p>并且，加入相应的type类型。</p></stdio.h></stdio.h>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭博客教程-2 | 安装主题</title>
      <link href="/2019/04/usehexo-1/"/>
      <url>/2019/04/usehexo-1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-如何为博客更换自己喜欢的主题？"><a href="#1-如何为博客更换自己喜欢的主题？" class="headerlink" title="1. 如何为博客更换自己喜欢的主题？"></a>1. 如何为博客更换自己喜欢的主题？</h1><p>在项目配置文件<code>_config.yml</code>中的第73~76行：</p><pre><code># Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape</code></pre><p>默认的主题是<code>landscape</code>；主题的官方网址是：<code>https://hexo.io/themes/</code></p><h2 id="1-选择并安装主题"><a href="#1-选择并安装主题" class="headerlink" title="1. 选择并安装主题"></a>1. 选择并安装主题</h2><p>访问网址，然后选择自己喜欢的主题样式。如：我选择的是：<a href="https://github.com/xiangming/landscape-plus" target="_blank" rel="noopener">https://github.com/xiangming/landscape-plus</a><br>这个网页中也给出了安装的命令：<br>安装<br>从release页面下载，然后解压到hexo的themes目录下。<br>或者直接clone最新版：（可能会存在bug，不建议新手尝试）</p><pre><code># 在hexo根目录下执行git clone https://github.com/xiangming/landscape-plus.git themes/landscape-plus</code></pre><h2 id="2-修改博客主配置文件"><a href="#2-修改博客主配置文件" class="headerlink" title="2. 修改博客主配置文件"></a>2. 修改博客主配置文件</h2><p>打开博客目录下的<code>_config.yml</code>配置文件，大约在<code>73~76</code>行可以看见配置主题。修改为刚才下载的主题的文件夹名：<code>theme: landscape-plus</code><br>然后，还是在<code>cmd</code>窗口中，运行</p><pre><code>hexo ghexo s</code></pre><p>查看效果。</p><h1 id="2-主题配置"><a href="#2-主题配置" class="headerlink" title="2. 主题配置"></a>2. 主题配置</h1><p>接下来就是对选定的主题进行配置。</p><h2 id="a-文章内容部分显示"><a href="#a-文章内容部分显示" class="headerlink" title="a. 文章内容部分显示"></a>a. 文章内容部分显示</h2><p>首先打开地址<code>127.0.0.1:4000</code>，发现<code>Hello World</code>比较难受，它显示了整个篇幅。希望它显示部分，就在你需要截断的位置，加入<code>&amp;lt;!--more--&gt;</code></p><h2 id="b-左栏显示"><a href="#b-左栏显示" class="headerlink" title="b. 左栏显示"></a>b. 左栏显示</h2><p>左边的栏目没有显示内容，其实也就是自己没有设置。打开<code>E:myblog\source\_postshello-world.md</code>文件，然后加入下面的内容即可：</p><pre><code>- - -title: Hello Worldcategory: &quot;first&quot;tag:  - hexo- - -</code></pre><h2 id="c-添加自我展示"><a href="#c-添加自我展示" class="headerlink" title="c. 添加自我展示"></a>c. 添加自我展示</h2><p>左栏中没有我想要的自我展示框，感觉很难受，觉得有必要加入一个。<br>寻寻觅觅，发现左栏的内容布局文件就在这里：<code>E:myblog\themes\landscape-plus\layout\_widget</code><br>好像可以自己定义一个，接着就尝试一下：<br>在该目录下，选择任意一个，赋值一个拷贝，改名称为：<code>introduction.ejs</code><br>当然，相应的，我们需要在配置文件中申明一下，打开主题配置文件，大约在15~24行，找到Sidebar，在组件下面添加一个，如下：</p><pre><code>widgets:- introduction</code></pre><p>（此时，重新生成页面<code>hexo g</code>，重启服务<code>hexo s</code>可以看见效果）</p><p>容器是放到页面了，但是，页框的效果、文字内容不是我想要的，接着就再次修改。<br>打开文件，查看内容，发现其实就是<code>HTML</code>文档，不妨直接写<code>HTML</code>内容。<br>我们先找找样式文件位置，在：<code>E:myblog\themes\landscape-plus\source\css</code><br>打开<code>style.styl</code>文件，然后在最后看见了导入样式的代码，很高兴。<br>于是，在<code>_partial</code>文件夹中，我创建了自己的样式文件，命名为<code>sidebar-author</code>，然后在<code>style.styl</code>文件中，添加的代码如下：</p><pre><code>if sidebar  @import &quot;_partial/sidebar&quot;  @import &quot;_partial/sidebar-author&quot;</code></pre><p>接着，就开始编辑自定义的<code>sidebar-author</code>样式文件。观察其他的样式文件内容，不难发现代码中不使用括号、分号，使用两个空格的缩进来标志代码块。</p><p>也就是说，我们需要编辑两个文件：</p><ul><li>一个是HTML（<code>E:myblog\themes\landscape-plus\layout\_widget\introduction.ejs</code>）；</li><li>一个是CSS（<code>E:myblog\themes\landscape-plus\source\css\sidebar-author.styl</code> ）。</li></ul><p>开始编辑：</p><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><p>感觉将侧栏中所有的<code>widget</code>，顶部都变成圆角比较好看，然后为了方便，在<code>sidebar.styl</code>文件中找到<code>widget</code>，添加代码：</p><pre><code>.widget  ...  border-top-left-radius:12px  border-top-right-radius:12px  border-bottom-left-radius:6px  border-bottom-right-radius:6px  ...</code></pre><p>文章也应该使用圆角，在浏览器中审查元素，发现其div的class是article-inner，打开article.styl文件，第四行就是需要的article-inner，接着加入圆角样式。（这里略）</p><h3 id="使用font-awesome"><a href="#使用font-awesome" class="headerlink" title="使用font-awesome"></a>使用font-awesome</h3><p>在css文件中没有我们希望的font-awesome.css文件，然后在浏览器中评论功能出发现使用了的，所以还是右键检查元素。然后可以看见，简单的使用如下：</p><pre><code>.article-comment-link:before {    content: &quot;\f075&quot;;    font-family: FontAwesome;    padding-right: 8px;}</code></pre><p>故而我们就会用了。<br>百度一下找到<code>font-awesome</code>对应的代码：<a href="http://www.fontawesome.com.cn/faicons/" target="_blank" rel="noopener">http://www.fontawesome.com.cn/faicons/</a><br>在应用的时候，如 <code>fa-link Unicode:f0c1</code>，我们<code>content: &quot;\f0c1&quot;</code>;<br>常用的如下：</p><ul><li>qq： <code>fa-qq   Unicode: f1d6</code></li><li>微信： <code>fa-weixin  Unicode: f1d7</code></li><li>邮箱： <code>fa-envelope  Unicode: f0e0</code></li><li>微博： <code>fa-weibo   Unicode: f18a</code></li></ul><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/images/201906/2019-06-13_175647.jpg" alt="自定义侧栏效果图"></p><p>下面分别将这两个文件的内容放在下面：<br>HTML（<code>E:myblog\themes\landscape-plus\layout\_widget\introduction.ejs</code>）：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widget-wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widget-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Introduction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widget introduction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>avatar<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/timg.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--在E:myblog\source\ 目录下新建images目录， 然后存放的timg.jpg图片--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>小王财务<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>如何做靠谱的经营<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site-state-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/archives/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>日志<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/archives/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>归档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/tags/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>随笔<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site-firend-link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>友情链接<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p-two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1270563429@qq.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://user.qzone.qq.com/1270563429<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>QQ空间<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p-three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://blog.sina.com.cn/u/5385828767<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>微博<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://baiyazi.top/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>无涯明月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>CSS（<code>E:myblog\themes\landscape-plus\source\css\sidebar-author.styl</code> ）：</p><pre class=" language-css"><code class="language-css"><span class="token number">.</span>introduction,<span class="token number">.</span>introduction img<span class="token number">.</span>avatar  <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span>  <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token number">.</span>introduction img<span class="token number">.</span>avatar  <span class="token property">border-top-left-radius</span><span class="token punctuation">:</span><span class="token number">12</span>px  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span><span class="token number">12</span>px<span class="token number">.</span>introduction img<span class="token number">.</span>avatar  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token number">.</span>introduction div<span class="token number">.</span>site-info  <span class="token property">text-align</span><span class="token punctuation">:</span>center  <span class="token property">margin-bottom</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token number">.</span>introduction div<span class="token number">.</span>site-info h<span class="token number">2</span>  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">24</span>px<span class="token number">.</span>introduction div<span class="token number">.</span>site-info p  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">18</span>px  <span class="token property">font-weight</span><span class="token punctuation">:</span>bolder<span class="token number">.</span>introduction div<span class="token number">.</span>site-state-info  <span class="token property">display</span><span class="token punctuation">:</span>flex  <span class="token property">padding-left</span><span class="token punctuation">:</span><span class="token number">30</span>px  <span class="token property">padding-right</span><span class="token punctuation">:</span><span class="token number">30</span>px<span class="token number">.</span>introduction div<span class="token number">.</span>site-state-info div  <span class="token property">flex</span><span class="token punctuation">:</span><span class="token number">1</span>  <span class="token property">text-align</span><span class="token punctuation">:</span>center  <span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token number">.</span>introduction div<span class="token number">.</span>site-state-info div a  <span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token number">.</span>introduction div<span class="token number">.</span>site-state-info div <span class="token property">a</span><span class="token punctuation">:</span>hover  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#000</span><span class="token number">.</span>introduction div<span class="token number">.</span>site-state-info div a span  <span class="token property">display</span><span class="token punctuation">:</span>block  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">16</span>px<span class="token number">.</span>introduction div<span class="token number">.</span>site-state-info div a <span class="token property">span</span><span class="token punctuation">:</span>first-child  <span class="token property">font-weight</span><span class="token punctuation">:</span>bolder<span class="token number">.</span>introduction div<span class="token number">.</span>site-state-info div a <span class="token property">span</span><span class="token punctuation">:</span>last-child  <span class="token property">margin-top</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token number">.</span>introduction div<span class="token number">.</span>site-state-info <span class="token property">div</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>,<span class="token number">.</span>introduction div<span class="token number">.</span>site-state-info <span class="token property">div</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token property">border-right</span><span class="token punctuation">:</span><span class="token number">1</span>px solid <span class="token hexcode">#DDD</span><span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link  <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link <span class="token property">p</span><span class="token punctuation">:</span>last-child,<span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link <span class="token property">p</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link <span class="token property">p</span><span class="token punctuation">:</span>first-child  <span class="token property">border-top</span><span class="token punctuation">:</span><span class="token number">1</span>px dashed <span class="token hexcode">#DDD</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span><span class="token number">1</span>px dashed <span class="token hexcode">#DDD</span>  <span class="token property">color</span><span class="token punctuation">:</span>orange  <span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">30</span>px  <span class="token property">text-align</span><span class="token punctuation">:</span>center  <span class="token property">font-weight</span><span class="token punctuation">:</span>bolder  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">14</span>px<span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link <span class="token property">p</span><span class="token punctuation">:</span><span class="token property">first-child</span><span class="token punctuation">:</span>before   <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\f0c1"</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> FontAwesome  <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">8</span>px<span class="token punctuation">;</span><span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link a  <span class="token property">flex</span><span class="token punctuation">:</span><span class="token number">1</span>  <span class="token property">text-align</span><span class="token punctuation">:</span>center  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px  <span class="token property">line-height</span><span class="token punctuation">:</span><span class="token number">50</span>px  <span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link p  <span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token number">10</span>px  <span class="token property">margin-right</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link p<span class="token number">.</span>p-two <span class="token property">a</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>before  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\f1d6"</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> FontAwesome  <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link p<span class="token number">.</span>p-two <span class="token property">a</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>before  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\f0e0"</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> FontAwesome  <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link p<span class="token number">.</span>p-three <span class="token property">a</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>before  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\f18a"</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> FontAwesome  <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token number">.</span>introduction div<span class="token number">.</span>site-firend-link p<span class="token number">.</span>p-three <span class="token property">a</span><span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>before  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\f140"</span><span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> FontAwesome  <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span></code></pre><p>篇幅是比较长，实际上没有多少东西。下面就继续对页面进行CSS定制。</p><hr><p>但是吧，感觉希望自己还是自定义个主题，所以还是好好读读官网还是比较好。<br>所以还是研究研究。<br>由于前段时间写了关于Next主题的配置，这里也就不删除了，就直接跳过了。<br>这里给出学习官网的链接：<a href="/2019/usehexo-9/">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭博客教程-1 | 入门与基础安装</title>
      <link href="/2019/04/usehexo-0/"/>
      <url>/2019/04/usehexo-0/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>简单了解 <code>Github Pages</code></p><ul><li><code>Github Pages</code>是一个可以托管静态网页的代码托管平台。</li><li><code>Github Pages</code>为你提供一个免费的服务器。</li><li><code>Github Pages</code>可以绑定自己的域名。</li></ul><p>简单了解 <code>Hexo</code><br><code>Hexo</code> 快速、简洁、高效的博客框架。</p><ul><li><code>Hexo</code> 基于<code>Node.js</code>搭建的静态页面生成框架，可以快速将Markdown编辑的文本解析按照它指定的规则生成Html代码。</li></ul><h1 id="2-安装与配置"><a href="#2-安装与配置" class="headerlink" title="2. 安装与配置"></a>2. 安装与配置</h1><h2 id="步骤一：安装Node-js"><a href="#步骤一：安装Node-js" class="headerlink" title="步骤一：安装Node.js"></a>步骤一：安装Node.js</h2><p><code>Hexo</code>是基于<code>node.js</code>编写的，所以需要安装一下<code>node.js</code>和里面的<code>npm</code>工具。<br><code>Node.js</code>官网下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">点击访问</a><br>下载自己电脑需要的版本就可以了，然后安装。</p><p>运行<code>cmd</code>，然后输入如下命令：</p><pre><code>node -vnpm -v</code></pre><p>都出现版本信息，说明安装成功。</p><h2 id="步骤二：安装git"><a href="#步骤二：安装git" class="headerlink" title="步骤二：安装git"></a>步骤二：安装git</h2><p><i class="fa fa-quote-left fa-3x pull-left fa-border"></i><code>Git</code>是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的<code>hexo</code>博客文章，上传到<code>GitHub</code>的工具。<code>Git</code>非常强大，我觉得建议每个人都去了解一下。廖雪峰老师的<code>Git教程</code>写的非常好，大家可以了解一下。<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程</a>   <a href="http://fangzh.top/2018/2018090514/" target="_blank" rel="noopener">By:fangzh</a></p><p><code>git</code>官网下载即可：<a href="https://gitforwindows.org/" target="_blank" rel="noopener">点击访问</a><br>比较简单，可以查看参考博客：<a href="https://www.cnblogs.com/jytx/p/5602927.html" target="_blank" rel="noopener">《如何在windows下安装GIT》</a></p><p>运行<code>cmd</code>，然后输入如下命令：</p><pre><code>git --version</code></pre><p>都出现版本信息，说明安装成功。</p><h2 id="步骤三：Hexo安装"><a href="#步骤三：Hexo安装" class="headerlink" title="步骤三：Hexo安装"></a>步骤三：Hexo安装</h2><h3 id="a-安装Hexo"><a href="#a-安装Hexo" class="headerlink" title="a. 安装Hexo"></a>a. 安装Hexo</h3><p>前面<code>git</code>和<code>node.js</code>安装好后，就可以安装<code>hexo</code>了。<br>打开<code>cmd</code>；或者在任意文件夹下右键，点击<code>Git Bash Here</code>，打开<code>git</code>窗口。<br>然后，输入下面的命令，安装Hexo：</p><pre><code>npm install -g hexo-cli</code></pre><p>用<code>hexo -v</code>查看一下版本</p><p>安装完成后，可以看见：</p><blockquote><p>C:\Users\o\AppData\Roaming\npm\hexo</p></blockquote><p>也即是Hexo的安装目录，也即是说和你前面打开的文件目录是无关的。<br><strong>注释</strong>：在windows环境下安装有WARN警告，忽略就好。</p><h3 id="b-Hexo初始化配置"><a href="#b-Hexo初始化配置" class="headerlink" title="b. Hexo初始化配置"></a>b. Hexo初始化配置</h3><p>在磁盘中新建一个文件夹，如：<code>blog</code>，切换<code>cmd</code>命令行窗口到这个文件夹，完成下面的操作：</p><pre><code>hexo init myblog注释：这个myblog可以自己取什么名字都行，完成后会在blog目录下创建myblog的文件夹及其文件，需要联网。cd myblog     //进入这个myblog文件夹npm install   //Create a new Hexo folder. </code></pre><p>完成后，我们可以看看都有什么命令：</p><blockquote><p>E:\so\img\myblog&gt;hexo<br>Usage: hexo <command><br><span style="color:red;"><strong>Commands:</strong></span><br>&nbsp;&nbsp;<strong>clean</strong>     &nbsp;&nbsp;&nbsp;&nbsp;Remove generated files and cache.<br>&nbsp;&nbsp;<strong>config</strong>    &nbsp;&nbsp;&nbsp;&nbsp;Get or set configurations.<br>&nbsp;&nbsp;<strong>deploy</strong>    &nbsp;&nbsp;&nbsp;&nbsp;Deploy your website.<br>&nbsp;&nbsp;<strong>generate</strong> &nbsp;&nbsp;&nbsp;&nbsp; Generate static files.<br>&nbsp;&nbsp;<strong>help</strong>      &nbsp;&nbsp;Get help on a command.<br>&nbsp;&nbsp;<strong>init</strong>   &nbsp;&nbsp;&nbsp;&nbsp;Create a new Hexo folder.<br>&nbsp;&nbsp;<strong>list</strong>   &nbsp;&nbsp;&nbsp;&nbsp; List the information of the site<br>&nbsp;&nbsp;<strong>migrate</strong>   &nbsp;&nbsp;&nbsp;&nbsp;Migrate your site from other system to Hexo.<br>&nbsp;&nbsp;<strong>new **   &nbsp;&nbsp;&nbsp;&nbsp;Create a new post.<br>&nbsp;&nbsp;</strong>publish**   &nbsp;&nbsp;&nbsp;&nbsp;Moves a draft post from _drafts to _posts folder.<br>&nbsp;&nbsp;<strong>render</strong>   &nbsp;&nbsp;&nbsp;&nbsp;Render files with renderer plugins.<br>&nbsp;&nbsp;<strong>server</strong>   &nbsp;&nbsp;&nbsp;&nbsp;Start the server.<br>&nbsp;&nbsp;<strong>version</strong>   &nbsp;&nbsp;&nbsp;&nbsp; Display version information.<br><span style="color:red;"><strong>Global Options:</strong></span><br>&nbsp;&nbsp;<strong>–config</strong>   &nbsp;&nbsp;&nbsp;&nbsp;Specify config file instead of using _config.yml<br>&nbsp;&nbsp;<strong>–cwd</strong>   &nbsp;&nbsp;&nbsp;&nbsp; Specify the CWD<br>&nbsp;&nbsp;<strong>–debug</strong>   &nbsp;&nbsp;&nbsp;&nbsp; Display all verbose messages in the terminal<br>&nbsp;&nbsp;<strong>–draft</strong>   &nbsp;&nbsp;&nbsp;&nbsp;Display draft posts<br>&nbsp;&nbsp;<strong>–safe</strong>   &nbsp;&nbsp;&nbsp;&nbsp;   Disable all plugins and scripts<br>&nbsp;&nbsp;<strong>–silent</strong>   &nbsp;&nbsp;&nbsp;&nbsp; Hide output on console<br>For more help, you can use ‘hexo help [command]’ for the detailed information or you can check the docs: <a href="http://hexo.io/docs/" target="_blank" rel="noopener">http://hexo.io/docs/</a></p></blockquote><h3 id="c-查看效果"><a href="#c-查看效果" class="headerlink" title="c. 查看效果"></a>c. 查看效果</h3><p>还是在刚才的命令行窗口中，输入<code>hexo server</code>，启动服务器。<br>浏览器中输入：<a href="http://127.0.0.1:4000/" target="_blank" rel="noopener">http://127.0.0.1:4000/</a> 以查看效果</p><p>以上：也就是<code>Hexo</code>在本地的效果搭建完毕。</p><h2 id="步骤四：创建Github仓库"><a href="#步骤四：创建Github仓库" class="headerlink" title="步骤四：创建Github仓库"></a>步骤四：创建Github仓库</h2><h3 id="a-建立gibhub账户"><a href="#a-建立gibhub账户" class="headerlink" title="a. 建立gibhub账户"></a>a. 建立gibhub账户</h3><p>要托管到<code>github</code>，那你就应该要有一个属于你自己的<code>github</code>帐号，所以你应该先到<code>github.com</code>注册<br>打开浏览器<br>在地址栏输入地址：<code>github.com</code><br>填写用户名、邮箱、密码<br>点击<code>Sign up</code>即可简单地注册</p><h3 id="b-建立托管仓库"><a href="#b-建立托管仓库" class="headerlink" title="b. 建立托管仓库"></a>b. 建立托管仓库</h3><p>完成注册，进入<code>github</code>平台，<br>点击<code>new repositories</code><br>新建一个新项目（你也可以加入到一个已有的项目）<br><img src="/images/201904/github_create.jpg" alt="hexo" title="创建仓库1"><br><img src="/images/201904/github_create_2.jpg" alt="hexo" title="创建仓库2"><br>上面的名字应该是如：<code>baiyazi.github.io</code></p><h2 id="步骤五：生成ssh添加到github"><a href="#步骤五：生成ssh添加到github" class="headerlink" title="步骤五：生成ssh添加到github"></a>步骤五：生成ssh添加到github</h2><pre><code>git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><p>yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><pre><code>git config user.namegit config user.email</code></pre><p><img src="/images/201904/github_git_count.jpg" alt="hexo" title="验证github账户"></p><p>然后创建SSH,一路回车</p><pre><code>ssh-keygen -t rsa -C &quot;youremail&quot;</code></pre><p><img src="/images/201904/ssh_keygen.jpg" alt="hexo" title="生成ssh key的正确样式"></p><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。<br><img src="/images/201904/github_git_ssh.jpg" alt="hexo" title="验证github账户"></p><blockquote><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p></blockquote><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。Title随便什么都可以。</p><p><img src="/images/201904/github_git_seting_1.jpg" alt="hexo" title="验证github账户"></p><p><img src="/images/201904/github_git_seting_2.jpg" alt="hexo" title="验证github账户"></p><p>在gitbash中，查看是否成功</p><pre><code>ssh -T git@github.com</code></pre><p><img src="/images/201904/github_git_seting_test.jpg" alt="hexo" title="验证github账户"></p><p>前面的主要目的就是生成秘钥，然后将公钥上传到<code>github</code>。<br>一台电脑可以配置多个<code>Hexo</code>，在生成第二个秘钥的时候，需要将秘钥所在的目录中的第一个删除，然后同样上传到对应的<code>github</code>的设置中去。<br>不同的是，第二个在执行<code>hexo d</code>发布的时候，需要输入用户邮箱和密码，以上传。</p><h2 id="步骤六：将Hexo部署到Github"><a href="#步骤六：将Hexo部署到Github" class="headerlink" title="步骤六：将Hexo部署到Github"></a>步骤六：将Hexo部署到Github</h2><p>也就是需要将<code>hexo</code>和<code>GitHub</code>关联起来。<br>打开站点配置文件<code>_config.yml</code>，翻到最后，修改为<br><code>YourgithubName</code>就是你的<code>GitHub</code>账户</p><pre><code>deploy:  type: git  repo: https://github.com/YourgithubName/YourgithubName.github.io.git  branch: master</code></pre><p>还需要cmd切换到根目录，然后控制台安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到<code>GitHub</code>。</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>执行<code>hexo d</code>上传资源到仓库中去。</p><h2 id="最后：-修改为我们自己的域名："><a href="#最后：-修改为我们自己的域名：" class="headerlink" title="最后： 修改为我们自己的域名："></a>最后： 修改为我们自己的域名：</h2><p>我在阿里云购买的：<a href="https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5" target="_blank" rel="noopener">https://wanwang.aliyun.com/?spm=5176.8142029.digitalization.2.e9396d3e46JCc5</a></p><p>注册后，点击右上角的控制台：<br><img src="/images/201904/github_aliyun_1.jpg" alt="dns" title="登录后"><br>然后在左边导航栏中找到域名：<br><img src="/images/201904/github_aliyun_2.jpg" alt="dns" title="进入控制台"><br>可以看见自己购买的域名的状态，没有购买的，在页面中找到域名注册即可：<br><img src="/images/201904/github_aliyun_3.jpg" alt="dns" title="域名列表"><br>点击<code>解析</code>，进入域名配置，我只添加了CNAME记录和A记录：<br><img src="/images/201904/github_aliyun_4.jpg" alt="dns" title="域名"><br>对了，IP地址来自于ping<br><img src="/images/201904/github_aliyun_5.jpg" alt="dns" title="域名"></p><p>如果你有自己的域名的话，映射到github上，需要新建一个CNAME文件。<br>在github仓库中，新建一个CNAME文件，内容直接写需要绑定的域名<br><img src="/images/201904/github_aliyun_6.png" alt="dns" title="设置CNAME"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
